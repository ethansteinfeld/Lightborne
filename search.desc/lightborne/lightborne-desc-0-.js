searchState.loadedDescShard("lightborne", 0, "The <code>Plugin</code> responsible for handling anything Camera …\nMarker <code>Component</code> used to query for the main (and currently …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates <code>Self</code> using <code>default()</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\n<code>System</code> that moves camera to player’s position and …\n<code>Startup</code> <code>System</code> that spawns the <code>Camera2d</code> in the world.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCreates <code>Self</code> using <code>default()</code>.\nCalls <code>U::from(self)</code>.\n<code>Component</code> that holds the position of the cursor, in world …\nReturns the argument unchanged.\nCreates <code>Self</code> using <code>default()</code>.\nCalls <code>U::from(self)</code>.\n<code>Update</code> <code>System</code> that updates the world position of the …\n<code>Resource</code> that holds the <code>level_iid</code> of the current level.\n<code>Plugin</code> that handles everything related to the level.\n<code>SystemSet</code> used to distinguish different types of systems\nSystems used to process Ldtk Entities after they spawn in …\nSystems used to simulate game logic in <code>Update</code>\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates <code>Self</code> using <code>default()</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\n<code>System</code> that will run on <code>Update</code> to check if the Player has …\n<code>Component</code> that shuold be inserted into any entity that is …\n<code>Resource</code> used to store the entity handles of each …\n<code>Plugin</code> that manages all activatables in the game, e.g. …\n<code>Component</code> that indicates whether or not an entity should …\n<code>Event</code> that should be sent from an <code>Interactable</code> to notify …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nThe corresponding id of an <code>Interactable</code>.\nInitialization function to be used to intialize <code>Activatable</code>…\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhen <code>Activatable</code>s are spawned, we need to insert the …\nThe <code>Update</code> <code>System</code> responsible for responding to …\nMarker <code>Component</code> used to query for crystals, currently …\n<code>Bundle</code> registered with …\n<code>Plugin</code> for managing all things related to <code>Crystal</code>s. This …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\n<code>System</code> to ensure that the sprite color and collider match …\n<code>System</code> that listens to when <code>Crystal</code>s are activated or …\n<code>System</code> that listens to [<code>LevelSwitchEvent</code>]s to ensure that …\n<code>Bundle</code> used to group together components commonly used …\nThis function will instantiate the proper values for a …\nReturns the argument unchanged.\nCreates <code>Self</code> using <code>default()</code>.\nCalls <code>U::from(self)</code>.\n<code>Component</code> inserted into entities that are interactable.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates <code>Self</code> using <code>default()</code>.\nCorresponds to the id field on an <code>Activatable</code> that should …\nUsed with the proc macro <code>#[with(init_interactable)]</code> to …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\n<code>Bundle</code> registered with Ldtk to spawn buttons.\n<code>Component</code> to mark buttons in the level.\n<code>Component</code> to hold information about start flags in the …\n<code>Bundle</code> spawned in by Ldtk corresponding to start flags.\n<code>Component</code> to mark start flags in the level. Used to query …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nInitializes the start maker with the <code>level_iid</code>, which must …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe <code>level_iid</code> of the <code>StartFlag</code>’s level.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nMarker <code>Component</code> representing a wall.\nWall <code>Bundle</code> spawned int by Ldtk.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nNOTE: copied from the <code>bevy_ecs_ldtk</code> examples\nThe width of the rectangle used to represent <code>LightSegment</code>s.\nThe speed of the light beam in units per <code>FixedUpdate</code>.\n<code>Enum</code> for each of the light colors.\n<code>Plugin</code> that manages everything light related.\nA <code>Component</code> marking the start of a light ray. These are …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates <code>Self</code> using <code>default()</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe number of bounces off of terrain each <code>LightColor</code> can …\nThe path to the shader used by the <code>LightMaterial</code>\nCustom <code>Material2d</code> that will use our custom WGSL shader to …\nA resource that stored handles to the <code>Mesh2d</code> and …\nReturns the argument unchanged.\nReturns the argument unchanged.\nInitializes the <code>LightRenderData</code> <code>Resource</code> from the <code>World</code>, …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\n<code>Bundle</code> used in the initialization of the <code>LightSegmentCache</code> …\n<code>Resource</code> used to store <code>Entity</code> handles to the light …\nMarker <code>Component</code> used to query for light segments.\n<code>System</code> that is responsible for hiding all of the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\n<code>System</code> that runs on <code>Update</code>, calculating the <code>Transform</code> of …\n<code>System</code> that runs on <code>FixedUpdate</code>, advancing the distance …\n<code>Event</code> used to notify other entities to trigger based on …\n<code>Component</code> added to entities receptive to light. The …\n<code>Bundle</code> that includes all the <code>Component</code>s needed for a …\nThe amount of time the light beam needs to be hitting the …\nStores the cumulative time light has been hitting the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\n<code>System</code> that resets the <code>LightSensor</code>s when a […\n<code>System</code> that runs on <code>Update</code>, querying each <code>LightSensor</code> and …\nWhether or not the sensor was hit the previous frame\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\n<code>Bundle</code> registered with Ldtk that will be spawned in with …\n<code>Bundle</code> that will be initialized with <code>init_player_bundle</code> …\n<code>Plugin</code> for anything player based.\n<code>Component</code> to signal our own code to finish the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\n<code>System</code> that will cause a state switch to […\nResets the player inventory and movement information on a […\n<code>System</code> that runs on [<code>GameState::Respawning</code>]. Will turn the …\nA <code>Component</code> used to track Lyra’s current shooting color …\nReturns the argument unchanged.\nCreates <code>Self</code> using <code>default()</code>.\n<code>System</code> to handle the keyboard presses corresponding to …\nCalls <code>U::from(self)</code>.\n<code>System</code> that uses <code>Gizmos</code> to preview the light path while …\n<code>System</code> that spawns a <code>LightRaySource</code> when the player …\n<code>Component</code> that offsets positions to make them match the …\n<code>Component</code> that sets Entity’s <code>z</code> to the player’s <code>z</code> plus …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\n<code>System</code> that offsets entities’ positions to match the …\n<code>System</code> that resets entities’ transforms from the …\nThe number of <code>FixedUpdate</code> steps the player can jump for …\nThe number of <code>FixedUpdate</code> steps the player should receive …\nThe y velocity subtracted from the player due to gravity.\nThe positive y velocity added to the player every jump …\nMax player horizontal velocity.\nMax player vertical velocity.\nThe x velocity added to the player when A/D is held.\n<code>Component</code> that stores information about the player’s …\nThe number of <code>FixedUpdate</code> steps the player can jump for …\nReturns the argument unchanged.\nCreates <code>Self</code> using <code>default()</code>.\nCalls <code>U::from(self)</code>.\n<code>System</code> that is run on <code>Update</code> to move the player around.\n<code>System</code> that is run the frame the space bar is pressed. …\nHolds information that is passed into the rapier character …\n<code>System</code> that spawns the player’s hurtbox <code>Collider</code> as a …\nUsed by Ldtk to spawn the player correctly with all of the …\n<code>Component</code> attached to the “root” strand (the strand …\n<code>Component</code> representing one node in a chain of strands, …\nCreates a chain of strands to the player.\n<code>Entity</code> the strand is connected to, that entity should have …\nMaximum distance between this strand and <code>connect</code>\nThe strand’s velocity is multiplied by <code>friction</code> before …\nReturns the argument unchanged.\nReturns the argument unchanged.\nAcceleration due to gravity, applied every <code>FixedUpdate</code>\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nOffsets the point the strand connects to\nSpecifies update order, with lower numbers updated first. …\n<code>System</code> that updates <code>Strand</code> offsets based on …\nLabels used for rapier_2d <code>CollisionGroups</code>\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.")