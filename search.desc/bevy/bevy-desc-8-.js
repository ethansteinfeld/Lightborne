searchState.loadedDescShard("bevy", 8, "The name of the type that implements <code>Node</code>.\nUpdates internal node state using the current render <code>World</code> …\nUpdates internal node state using the current render <code>World</code> …\nUpdates all nodes and sub graphs of the render graph. …\nVerifies that the edge existence is as expected and checks …\nValidates that each input slot corresponds to an input …\nValidates that each output slot corresponds to an output …\nWhether or not this <code>PhaseItem</code> should be subjected to …\nRegisters a <code>RenderCommand</code> as a <code>Draw</code> function. They are …\nThe item is a mesh that’s eligible for indirect …\nThe key used for binning <code>PhaseItem</code>s into bins. Order the …\nRepresents phase items that are placed into bins. The …\nA collection of all rendering instructions, that will be …\nInformation about a single batch of entities rendered …\nA convenient abstraction for adding all the systems …\nIdentifies the list within <code>BinnedRenderPhase</code> that a phase …\nA <code>PhaseItem</code> item, that automatically sets the appropriate …\nA draw function used to draw <code>PhaseItem</code>s.\nAn identifier for a <code>Draw</code> function stored in <code>DrawFunctions</code>.\nStores all draw functions for the <code>PhaseItem</code> type hidden …\nStores all <code>Draw</code> functions for the <code>PhaseItem</code> type.\nTo extract the flag from a packed <code>PhaseItemExtraIndex</code>, …\nThe flag that indicates that this index is an indirect …\nSpecifies the ECS data of the item entity required by …\nThe special value that indicates that no extra index is …\nThe item isn’t a mesh at all.\nTo extract the index from a packed <code>PhaseItemExtraIndex</code>, …\nSpecifies the general ECS data (e.g. resources) required …\nAn item (entity of the render world) which will be drawn …\nThe “extra index” associated with some <code>PhaseItem</code>s, …\n<code>RenderCommand</code>s are modular standardized pieces of render …\nThe result of a <code>RenderCommand</code>.\nWraps a <code>RenderCommand</code> into a state so that it can be used …\nA <code>RenderCommand</code> that sets the pipeline for the …\nThe type used for ordering the items. The smallest values …\nRepresents phase items that must be sorted. The <code>SortKey</code> …\nA collection of all items to be rendered that will be …\nA convenient abstraction for adding all the systems …\nA <code>RenderPass</code>, which tracks the current pipeline state to …\nInformation about the unbatchable entities in a bin.\nThe item is a mesh that’s eligible for indirect …\nStores the rendering instructions for a single phase that …\nSpecifies the ECS data of the view entity required by …\nA distance calculator for the draw order of <code>PhaseItem</code>s.\nStores the rendering instructions for a single phase that …\nAdds the <code>Draw</code> function and maps it to its own type.\nBins a new entity.\nAdds a <code>PhaseItem</code> to this render phase.\nAdds the <code>RenderCommand</code> for the specified render phase to …\nAdds the <code>Draw</code> function and maps it to the type <code>T</code>\nIf this extra index describes a dynamic offset, returns …\nIf this extra index describes an indirect parameters …\nThe range of instances that the batch covers. After doing …\nReturns a pair of mutable references to both the batch …\nA list of <code>BinKey</code>s for batchable items.\nThe batchable bins themselves.\nThe id of the render pipeline, cached in the <code>PipelineCache</code>…\nRemoves all <code>PhaseItem</code>s from this render phase.\nCalculates the distance, or view-space <code>Z</code> value, for the …\nCalculates the distance, or view-space <code>Z</code> value, for the …\nDraws a <code>PhaseItem</code> by issuing zero or more <code>draw</code> calls via …\nFetches the ECS parameters for the wrapped <code>RenderCommand</code> …\nDraws primitives from the active vertex buffer(s).\nSpecifies the <code>Draw</code> function used to render the item.\nDraws indexed primitives using the active index buffer and …\nDraws indexed primitives using the active index buffer and …\nDraws primitives from the active vertex buffer(s) based on …\nPacks a dynamic offset into this extra index.\nThe entities.\nThe corresponding entity that will be drawn.\nReturns the <code>PhaseItemExtraIndex</code>.\nThe dynamic offset of the batch.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates a 3D rangefinder for a view matrix.\nRetrieves the id of the <code>Draw</code> function corresponding to …\nRetrieves the <code>Draw</code> function corresponding to the <code>id</code> …\nRetrieves the id of the <code>Draw</code> function corresponding to …\nPacks a indirect parameters index into this extra index.\nInsert a single debug marker.\nThe range of instance indices in this batch.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe items within this <code>SortedRenderPhase</code>.\nAn <code>Iterator</code> through the associated <code>Entity</code> for each …\nThe main world entity represented by this <code>PhaseItem</code>.\nReturns either a dynamic offset or …\nReturns either an indirect parameters index or …\nCreates the appropriate <code>BinnedRenderPhaseType</code> for a mesh, …\nDispatches multiple draw calls from the active index …\nDispatches multiple draw calls from the active index …\nDispatches multiple draw calls from the active vertex …\nDispatches multiple draw calls from the active vertex …\nCreates a new binned phase item from the key and …\nCreates a new <code>RenderCommandState</code> for the <code>RenderCommand</code>.\nTracks the supplied render pass.\nItems in the bin that aren’t meshes at all.\nEnd the current debug group.\nPrepares the draw function to be used. This is called once …\nPrepares all draw function. This is called once and only …\nPrepares the render command to be used. This is called …\nStart a new debug group.\nAccesses the draw functions in read mode.\nRenders a <code>PhaseItem</code> by recording commands (e.g. setting …\nEncodes the GPU commands needed to render all entities in …\nRenders all of its <code>PhaseItem</code>s using their corresponding …\nRenders all <code>PhaseItem</code>s in the provided <code>range</code> (based on …\nAn entity that’s <em>representative</em> of this batch.\nSets the active bind group for a given bind group index. …\nSets the blend color as used by some of the blending modes.\nSet the rendering viewport to the given camera <code>Viewport</code>.\nSets the active index buffer.\nSet push constant data.\nSets the active <code>RenderPipeline</code>.\nSets the scissor region.\nSets the stencil reference.\nAssign a vertex buffer to a slot.\nSet the rendering viewport.\nSorts all of its <code>PhaseItem</code>s.\nSorts a slice of phase items into render order. Generally …\nDetermines the order in which the items are drawn.\nThis system sorts the <code>PhaseItem</code>s of all <code>SortedRenderPhase</code>s …\nA list of <code>BinKey</code>s for unbatchable items.\nThe unbatchable bins.\nReturns the wgpu <code>RenderPass</code>.\nAccesses the draw functions in write mode.\nEnable writes to all channels.\nEnable alpha channel writes\nBlend mode that does standard alpha blending with …\nSupports samplers with anisotropic filtering. Note this isn…\nA ray-tracing acceleration structure binding.\nSrc + Dst\nHow edges should be handled in texture addressing.\nDepth, Stencil, and Color.\nFunction always passes\nConverts a value to a <code>BindGroup</code> with a given …\nAn error that occurs during <code>AsBindGroup::as_bind_group</code> …\nConverts a value to a <code>ShaderType</code> for use in a bind group.\nblock compressed texture. 16 bytes per block.\nASTC block dimensions\nASTC RGBA channel\n10x10 block compressed texture. 16 bytes per block (1.28 …\n10x5 block compressed texture. 16 bytes per block (2.56 …\n10x6 block compressed texture. 16 bytes per block (2.13 …\n10x8 block compressed texture. 16 bytes per block (1.6 …\n12x10 block compressed texture. 16 bytes per block (1.07 …\n12x12 block compressed texture. 16 bytes per block (0.89 …\n4x4 block compressed texture. 16 bytes per block (8 …\n5x4 block compressed texture. 16 bytes per block (6.4 …\n5x5 block compressed texture. 16 bytes per block (5.12 …\n6x5 block compressed texture. 16 bytes per block (4.27 …\n6x6 block compressed texture. 16 bytes per block (3.56 …\n8x5 block compressed texture. 16 bytes per block (3.2 …\n8x6 block compressed texture. 16 bytes per block (2.67 …\n8x8 block compressed texture. 16 bytes per block (2 …\nSupports non-zero <code>base_vertex</code> parameter to direct indexed …\nEnable blue channel writes\nSupports buffer bindings with sizes that aren’t a …\nBack face\n4x4 block compressed texture. 8 bytes per block (4 …\n4x4 block compressed texture. 8 bytes per block (4 …\n4x4 block compressed texture. 16 bytes per block (8 …\n4x4 block compressed texture. 16 bytes per block (8 …\n4x4 block compressed texture. 16 bytes per block (8 …\n4x4 block compressed texture. 16 bytes per block (8 …\n4x4 block compressed texture. 8 bytes per block (4 …\n4x4 block compressed texture. 8 bytes per block (4 …\n4x4 block compressed texture. 16 bytes per block (8 …\n4x4 block compressed texture. 16 bytes per block (8 …\n4x4 block compressed texture. 16 bytes per block (8 …\n4x4 block compressed texture. 16 bytes per block (8 …\n4x4 block compressed texture. 16 bytes per block (8 …\n4x4 block compressed texture. 16 bytes per block (8 …\nBlue, green, red, and alpha channels. 8 bit integer per …\nBlue, green, red, and alpha channels. 8 bit integer per …\nBind groups are responsible for binding render resources …\nDescribes a group of bindings and the resources to be …\nHelper for constructing bindgroups.\nAn element of a <code>BindGroupDescriptor</code>, consisting of a …\nDescribes a <code>BindGroupLayout</code>.\nDescribes a single binding inside a bind group.\nHelper for constructing bind group layouts.\nResource that can be bound to a pipeline.\nSpecific type of a binding.\nDescribes a blend component of a <code>BlendState</code>.\nAlpha blend factor.\nAlpha blend operation.\nDescribe the blend state of a render pipeline, within …\nBinding is backed by a buffer.\nA buffer binding.\nIntegral type used for buffer offsets.\nBinding is backed by an array of buffers.\nError occurred when trying to async map a buffer.\nDescribes the segment of a buffer to bind.\nSpecific type of a buffer binding.\nDescribes a <code>Buffer</code>.\nDescribes a Buffer when allocating.\nIntegral type used for buffer slice sizes.\nDifferent ways that you can use a buffer.\nLike <code>RawBufferVec</code>, but doesn’t require that the data …\nEnable red, green, and blue channel writes\nSupports comparison samplers.\nBinding is visible from the compute shader of a compute …\nThe device supports compiling and using compute shaders.\nBuffer to buffer copy as well as buffer clear offsets and …\nAllow a buffer to be the destination buffer for a […\nAllows a texture to be the destination in a  […\nAllow a buffer to be the source buffer for a […\nAllows a texture to be the source in a […\nSupports textures that are cube arrays.\nIndex of a cached compute pipeline in a <code>PipelineCache</code>.\nState of a cached pipeline inserted into a <code>PipelineCache</code>.\nIndex of a cached render pipeline in a <code>PipelineCache</code>.\nTriangles with vertices in counter clockwise order are …\nClamp the value to the border of the texture Requires …\nClamp the value to the edge of the texture\nLoads the specified value for this attachment into the …\nDescribes the color state of a render pipeline.\nColor write mask. Disabled color channels will not be …\nEncodes a series of GPU operations.\nDescribes a <code>CommandEncoder</code>.\nComparison function used for depth and stencil operations.\nUse as a comparison sampler instead of a normal sampler. …\nIn-progress recording of a compute pass.\nDescribes the attachments of a compute pass.\nA <code>ComputePipeline</code> represents a compute pipeline and its …\nDescribes a compute pipeline.\nConstant\nThe pipeline GPU object is being created.\nA cubemap texture. <code>texture_cube</code> in WGSL and <code>textureCube</code> in …\nA cubemap array texture. <code>texture_cube_array</code> in WGSL and …\nTriangles with vertices in clockwise order are considered …\nA one dimensional texture. <code>texture_1d</code> in WGSL and <code>texture1D</code>…\n1D texture\nA two dimensional texture. <code>texture_2d</code> in WGSL and <code>texture2D</code>…\n2D texture\nA two dimensional array texture. <code>texture_2d_array</code> in WGSL …\nA three dimensional texture. <code>texture_3d</code> in WGSL and …\n3D texture\nSupports depth bias clamping\nSupports copies between depth textures and buffers.\nData that will be stored alongside the “prepared” bind …\nDecrements stencil value by one, clamping on underflow.\nDecrements stencil value by one, wrapping on underflow.\nUse the “default” shader for the current context.\nA rendering resource for the default image sampler which …\nSampling does the depth reference comparison.\nSpecial depth format with 16 bit integer depth.\nSpecial depth format with at least 24 bit integer depth.\nSpecial depth/stencil format with at least 24 bit integer …\nSpecial depth format with 32 bit floating point depth.\nSpecial depth/stencil format with 32 bit floating point …\nDescribes the biasing setting for the depth target.\nDepth.\nDescribes the depth/stencil state in a render pipeline.\nDiscards the resulting value of the render pass for this …\nArgument buffer layout for dispatch_indirect commands.\nBinary flags listing features that may or may not be …\nArgument buffer layout for draw_indexed_indirect commands.\nArgument buffer layout for draw_indirect commands.\nD.component\nD.alpha\nStores data to be transferred to the GPU and made …\nStores data to be transferred to the GPU and made …\nA writer that can be used to directly write elements into …\n4x4 block compressed texture. 8 bytes per block (4 …\n4x4 block compressed texture. 8 bytes per block (4 …\n4x4 block compressed texture. 16 bytes per block (8 …\n4x4 block compressed texture. 16 bytes per block (8 …\nFunction passes if new value is equal to existing value. …\nAn error occurred while trying to create the pipeline GPU …\n4x4 block compressed texture. 8 bytes per block (4 …\n4x4 block compressed texture. 8 bytes per block (4 …\n4x4 block compressed texture. 8 bytes per block (4 …\n4x4 block compressed texture. 8 bytes per block (4 …\n4x4 block compressed texture. 16 bytes per block (8 …\n4x4 block compressed texture. 16 bytes per block (8 …\nExtent of a texture related operation.\nBinding is visible from the fragment shader of a render …\nSupports storage buffers in fragment shaders.\nSupports binding storage buffers and textures to fragment …\nSupports full 32-bit range indices (2^32-1 as opposed to …\nFace of a vertex.\nPolygons are filled\nTexel mixing mode when sampling between texels.\nThe sampling result is produced based on more than a …\nSampling returns floats.\nTwo half-precision floats (no Rust equiv). <code>vec2&lt;f32&gt;</code> in …\nFour half-precision floats (no Rust equiv). <code>vec4&lt;f32&gt;</code> in …\nOne single-precision float (f32). <code>f32</code> in shaders.\nTwo single-precision floats (f32). <code>vec2&lt;f32&gt;</code> in shaders.\nThree single-precision floats (f32). <code>vec3&lt;f32&gt;</code> in shaders.\nFour single-precision floats (f32). <code>vec4&lt;f32&gt;</code> in shaders.\nOne double-precision float (f64). <code>f32</code> in shaders. Requires …\nTwo double-precision floats (f64). <code>vec2&lt;f32&gt;</code> in shaders. …\nThree double-precision floats (f64). <code>vec3&lt;f32&gt;</code> in shaders. …\nFour double-precision floats (f64). <code>vec4&lt;f32&gt;</code> in shaders. …\nDescribes the fragment process in a render pipeline.\nFront face\nVertex winding order which classifies the “front” face …\nEnable green channel writes\nStores an array of elements to be transferred to the GPU …\nAn index into a <code>GpuArrayBuffer</code> for a given element.\nTrait for types able to go in a <code>GpuArrayBuffer</code>.\nFunction passes if new value is greater than existing value\nFunction passes if new value is greater than or equal to …\nA handle to a shader stored in the <code>Assets&lt;Shader&gt;</code> resource\nfloating-point RGBA, linear-color float can be outside of …\nIgnore the stencil state for the face.\nSupports different blend operations per color attachment.\nAllow a buffer to be the index buffer in a draw operation.\nAllow a buffer to be the indirect buffer in an indirect …\nSupports indirect drawing and dispatching.\nAn invalid cached render pipeline index, often used to …\nAn invalid cached compute pipeline index, often used to …\nView of a buffer which can be used to copy to/from a …\nView of a buffer which can be used to copy to/from a …\nView of a texture which can be used to copy to/from a …\nView of a texture which can be used to copy to/from a …\nLayout of a texture in a buffer’s memory.\nSubresource range within an image\nIncrements stencil value by one, clamping on overflow.\nIncrements stencil value by one, wrapping on overflow.\nFormat of indices used with pipeline.\nVertex data is advanced every instance.\nBitwise inverts stencil value.\nKeep stencil value unchanged.\nThe texture is laid out densely in memory as:\nFunction passes if new value less than existing value\nFunction passes if new value is less than or equal to …\nPolygons are drawn as line segments\nVertex data is a list of lines. Each pair of vertices …\nVertex data is a strip of lines. Each set of two adjacent …\nLinear Interpolation\nLoads the existing value for this attachment into the …\nOperation to perform to the output attachment at the start …\nAllow a buffer to be mapped for reading using […\nAllow a buffer to be mapped for writing using […\nSupports sample-rate shading.\nPassed to <code>Device::poll</code> to control how and if it should …\nType of buffer mapping.\nmax(Src, Dst)\nmin(Src, Dst)\nThe texture is laid out densely in memory as:\nRepeat the texture, mirroring it every repeat\nDescribes the multi-sampling state of a render pipeline.\nIf this is true, calls to <code>CommandEncoder::resolve_query_set</code>…\nBinding is not visible from any shader stage.\nSupports textures with mipmaps which have a non power of …\nYUV 4:2:0 chroma subsampled format.\nNaga module.\nNearest neighbor sampling.\nFunction never passes\nThe sampling result is produced based on a single color …\nFunction passes if new value is not equal to existing …\nBlend state of (1 * src) + ((1 - src_alpha) * dst)\nThe pipeline GPU object was created successfully and is …\n1.0\n1.0 - Constant\n1.0 - D.component\n1.0 - D.alpha\n1.0 - S.component\n1.0 - S1.component\n1.0 - S1.alpha\n1.0 - S.alpha\nPair of load and store operations for an attachment aspect.\nOrigin of a copy to/from a texture.\nAn owned binding resource of any type (ex: a <code>Buffer</code>, …\nBlend mode that does standard alpha blending with …\nAn asset path leading to a shader\nA pipeline defining the data layout and shader logic for a …\nCache for render and compute pipelines.\nType of error returned by a <code>PipelineCache</code> when the …\nAdvanced options for use when a pipeline is compiled\nA descriptor for a <code>Pipeline</code>.\nHandle to a pipeline layout.\nDescribes a <code>PipelineLayout</code>.\nPlane 0.\nPlane 1.\nPlane 2.\nPolygons are drawn as points\nVertex data is a list of points. Each vertex is a new …\nCheck the device for a single time without blocking.\nType of drawing mode for polygons\nA prepared bind group returned as a result of …\nDescribes the state of primitive assembly and …\nPrimitive type the input mesh is composed of.\nA range of push constant memory to pass to a shader stage.\nAllow a buffer to be the destination buffer for a […\nThe pipeline GPU object is queued for creation.\nRed channel only. 16 bit float per channel. Float in …\nRed channel only. 16 bit integer per channel. Signed in …\nRed channel only. 16 bit integer per channel. [0, 65535] …\nRed channel only. 16 bit integer per channel. Unsigned in …\nRed channel only. 16 bit integer per channel. [0, 65535] …\nRed channel only. 32 bit float per channel. Float in …\nRed channel only. 32 bit integer per channel. Signed in …\nRed channel only. 32 bit integer per channel. Unsigned in …\nRed channel only. 8 bit integer per channel. Signed in …\nRed channel only. 8 bit integer per channel. [-127, 127] …\nRed channel only. 8 bit integer per channel. Unsigned in …\nRed channel only. 8 bit integer per channel. [0, 255] …\nSupports reading from a depth/stencil texture while using …\nEnable red channel writes\nAllows a texture to be an output attachment of a render …\nDefault blending state that replaces destination with the …\nBlend mode that does no color blending, just overwrites …\nA structure for storing raw bytes that have already been …\nDescribes a compute pipeline.\nDescribes the fragment processing in a render pipeline.\nDescribes a render (graphics) pipeline.\nDescribes how the vertex buffer is interpreted.\nDescribes the vertex processing in a render pipeline.\nMap only for reading\nThe texture can only be read in the shader and it must be …\nThe texture can be both read and written in the shader and …\nDescribes a color attachment to a <code>RenderPass</code>.\nDescribes a depth/stencil attachment to a <code>RenderPass</code>.\nDescribes the attachments of a render pass.\nA <code>RenderPipeline</code> represents a graphics pipeline and its …\nDescribes a render (graphics) pipeline.\nRepeat the texture in a tiling fashion\nReplace stencil value with value provided in most recent …\nThe bind group could not be generated. Try again next …\nDst - Src\nRed, green, and blue channels. 11 bit float with no sign …\nRed and green channels. 16 bit float per channel. Float in …\nRed and green channels. 16 bit integer per channel. Signed …\nRed and green channels. 16 bit integer per channel. [0, …\nRed and green channels. 16 bit integer per channel. …\nRed and green channels. 16 bit integer per channel. [0, …\nRed and green channels. 32 bit float per channel. Float in …\nRed and green channels. 32 bit integer per channel. Signed …\nRed and green channels. 32 bit integer per channel. …\nRed and green channels. 8 bit integer per channel. Signed …\nRed and green channels. 8 bit integer per channel. [-127, …\nRed and green channels. 8 bit integer per channel. …\nRed and green channels. 8 bit integer per channel. [0, 255]…\nRed, green, blue, and alpha channels. 10 bit integer for …\nRed, green, blue, and alpha channels. 10 bit integer for …\nPacked unsigned float with 9 bits mantisa for each RGB …\nRed, green, blue, and alpha channels. 16 bit float per …\nRed, green, blue, and alpha channels. 16 bit integer per …\nRed, green, blue, and alpha. 16 bit integer per channel. […\nRed, green, blue, and alpha channels. 16 bit integer per …\nRed, green, blue, and alpha channels. 16 bit integer per …\nRed, green, blue, and alpha channels. 32 bit float per …\nRed, green, blue, and alpha channels. 32 bit integer per …\nRed, green, blue, and alpha channels. 32 bit integer per …\nRed, green, blue, and alpha channels. 8 bit integer per …\nRed, green, blue, and alpha channels. 8 bit integer per …\nRed, green, blue, and alpha channels. 8 bit integer per …\nRed, green, blue, and alpha channels. 8 bit integer per …\nRed, green, blue, and alpha channels. 8 bit integer per …\nRepresents WGSL Size (equivalent to <code>ShaderType::min_size</code>)\nAllow a buffer to be a <code>BufferBindingType::Storage</code> inside a …\nAllows a texture to be a <code>BindingType::StorageTexture</code> in a …\nSupports specifying which view formats are allowed when …\nA Sampler defines how a pipeline will sample from a …\nBinding is a sampler.\nA sampler that can be used to sample a texture.\nBinding is backed by an array of samplers.\nSpecific type of a sampler binding.\nDescribes a <code>Sampler</code>.\nA shader, as defined by its <code>ShaderSource</code> and <code>ShaderStage</code> …\nHandle to a compiled shader module.\nDescriptor for use with <code>Device::create_shader_module</code>.\nA reference to a shader asset.\nTrait implemented for all WGSL fixed-footprint types\nSource of a shader module.\nStage of the programmable pipeline.\nDescribes the shader stages that a binding will be visible …\nBase trait for all WGSL host-shareable types\nSampling returns signed integers.\nTwo signed shorts (i16). <code>vec2&lt;i32&gt;</code> in shaders.\nFour signed shorts (i16). <code>vec4&lt;i32&gt;</code> in shaders.\nOne signed int (i32). <code>i32</code> in shaders.\nTwo signed ints (i32). <code>vec2&lt;i32&gt;</code> in shaders.\nThree signed ints (i32). <code>vec3&lt;i32&gt;</code> in shaders.\nFour signed ints (i32). <code>vec4&lt;i32&gt;</code> in shaders.\nTwo signed bytes (i8). <code>vec2&lt;i32&gt;</code> in shaders.\nFour signed bytes (i8). <code>vec4&lt;i32&gt;</code> in shaders.\nTwo signed shorts (i16). [-32767, 32767] converted to …\nFour signed shorts (i16). [-32767, 32767] converted to …\nTwo signed bytes (i8). [-127, 127] converted to float [-1, …\nFour signed bytes (i8). [-127, 127] converted to float […\nS.component\nS1.component\nS1.alpha\nS.alpha\nmin(S.alpha, 1.0 - D.alpha)\nStencil format with 8 bit integer stencil.\nDescribes stencil state in a render pipeline.\nStencil.\nOperation to perform on the stencil value.\nState of the stencil operation (fixed-pipeline stage).\nA storage buffer.\nStores data to be transferred to the GPU and made …\nA storage texture.\nSpecific type of a sample in a texture binding.\nStores the resulting value of the render pass for this …\nOperation to perform to the output attachment at the end …\nSrc - Dst\nAllows a texture to be a <code>BindingType::Texture</code> in a bind …\nA GPU-accessible texture.\nA texture binding.\nKind of data the texture holds.\nOrder in which TextureData is laid out in memory.\nDescribes a <code>Texture</code>.\nDimensionality of a texture.\nUnderlying texture data format.\nSpecific type of a sample in a texture binding.\nDifferent ways that you can use a texture.\nDescribes a <code>Texture</code> with its associated metadata required …\nBinding is backed by a texture.\nBinding is backed by an array of textures.\nDescribes a <code>TextureView</code>.\nDimensions of a particular texture view.\nVertex data is a list of triangles. Each set of 3 vertices …\nVertex data is a triangle strip. Each set of three …\nAllow a buffer to be a <code>BufferBindingType::Uniform</code> inside a …\nWith this feature not present, there are the following …\nSupports buffers to combine <code>BufferUsages::INDEX</code> with …\nSampling returns unsigned integers.\nIndices are 16 bit unsigned integers.\nTwo unsigned shorts (u16). <code>vec2&lt;u32&gt;</code> in shaders.\nFour unsigned shorts (u16). <code>vec4&lt;u32&gt;</code> in shaders.\nIndices are 32 bit unsigned integers.\nOne unsigned int (u32). <code>u32</code> in shaders.\nTwo unsigned ints (u32). <code>vec2&lt;u32&gt;</code> in shaders.\nThree unsigned ints (u32). <code>vec3&lt;u32&gt;</code> in shaders.\nFour unsigned ints (u32). <code>vec4&lt;u32&gt;</code> in shaders.\nTwo unsigned bytes (u8). <code>vec2&lt;u32&gt;</code> in shaders.\nFour unsigned bytes (u8). <code>vec4&lt;u32&gt;</code> in shaders.\nA buffer for uniform values.\nStores data to be transferred to the GPU and made …\nLike a <code>BufferVec</code>, but only reserves space on the GPU for …\n8 bit integer RGBA, [0, 255] converted to/from …\nThree unsigned 10-bit integers and one 2-bit integer, …\nTwo unsigned shorts (u16). [0, 65535] converted to float […\nFour unsigned shorts (u16). [0, 65535] converted to float […\nTwo unsigned bytes (u8). [0, 255] converted to float [0, 1]…\nFour unsigned bytes (u8). [0, 255] converted to float [0, 1…\n8 bit integer RGBA, Srgb-color [0, 255] converted to/from …\na map containing <code>OwnedBindingResource</code>s, keyed by the …\nBinding is visible from the vertex shader of a render …\nAllow a buffer to be the vertex buffer in a draw operation.\nIf this is true, use of <code>@builtin(vertex_index)</code> and …\nBinding is visible from the vertex and fragment shaders of …\nSupports storage buffers in vertex shaders.\nSupports specifying which view format values are allowed …\nVertex data is advanced every vertex.\nVertex inputs (attributes) to shaders.\nDescribes how the vertex buffer is interpreted.\nVertex Format for a <code>VertexAttribute</code> (input).\nWhether a vertex buffer is indexed by vertex or by …\nSupports all the texture usages described in WebGPU. If …\nSame as WaitForSubmissionIndex but waits for the most …\nOn wgpu-core based backends, block until the given …\nInformation about an adapter.\nFeatures that are not guaranteed to be supported.\nRepresents the sets of limits an adapter/device supports.\nWGSL module as a string slice.\nMap only for writing\nThe texture can only be written in the shader and it:\nZero origin.\n0.0\nSet stencil value to zero.\nReserves space for one more element in the buffer and …\nAdds an <code>Srgb</code> suffix to the given texture format, if the …\nAdd more <code>BufferUsages</code> to the buffer.\nAdd more <code>BufferUsages</code> to the buffer.\nAdd more <code>BufferUsages</code> to the buffer.\nAdd more <code>BufferUsages</code> to the buffer.\nHow to deal with out of bounds accesses in the u (i.e. x) …\nHow to deal with out of bounds accesses in the v (i.e. y) …\nHow to deal with out of bounds accesses in the w (i.e. z) …\nGet a flags value with all known bits set.\nGet a flags value with all known bits set.\nGet a flags value with all known bits set.\nGet a flags value with all known bits set.\nGet a flags value with all known bits set.\nAlpha equation.\nWhen enabled, produces another sample mask per pixel based …\nMust be at least 1. If this is not 1, all filter modes …\nLayer count. If <code>Some(count)</code>, <code>base_array_layer + count</code> must …\nLayer count. If <code>Some(count)</code>, <code>base_array_layer + count</code> must …\nThe stride, in bytes, between elements of this buffer.\nThe stride, in bytes, between elements of this buffer.\nCreates a bind group for <code>self</code> matching the layout defined …\nReturn the <code>T</code> <code>ShaderType</code> for <code>self</code>. When used in <code>AsBindGroup</code> …\nReturns the bytes representation of the struct, ready to …\nReturns the bytes representation of the struct, ready to …\nReturns the bytes representation of the struct, ready to …\nReturns the inner hal CommandEncoder using a callback. The …\nThe copy aspect.\nAspect of the texture. Color textures must be …\nThe copy aspect.\nAspect of the texture. Color textures must be …\nReturns the aspect-specific format of the original format\nAsserts that <code>Self</code> meets the requirements of the uniform …\nThe list of attributes which comprise a single vertex.\nThe list of attributes which comprise a single vertex.\nBack face mode.\nBackend used for device\nBase array layer.\nBase array layer.\nBase mip level.\nBase mip level.\nThe value added to the vertex index before indexing into …\nBegins recording of a compute pass.\nStart a pipeline statistics query on this compute pass. It …\nBegins recording of a render pass.\nDepth bias state.\nCreates the bind group layout matching all bind groups …\nReturns a vec of bind group layout entries\nBind groups that this pipeline uses. The first entry will …\nReturns the binding for the buffer if the data has been …\nReturns the binding for the buffer if the data has been …\nReturns the binding for the buffer if the data has been …\nSlot for which binding provides resource. Corresponds to …\nBinding index. Must match shader index and be unique …\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nGet the underlying bits value.\nGet the underlying bits value.\nGet the underlying bits value.\nGet the underlying bits value.\nGet the underlying bits value.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe blending that is used for this pipeline.\nThe number of bytes one texel block occupies during an …\nReturns the dimension of a block of texels.\nWait for a render pipeline to finish compiling.\nThe number of bytes one texel block occupies during an …\nBorder color to use when address_mode is …\nReturns a handle to the buffer, if the data has been …\nReturns a handle to the buffer, if the data has been …\nReturns the buffer, if allocated.\nThe buffer to be copied to/from.\nThe buffer to bind.\nThe buffer to be copied to/from.\nThe format of any vertex buffers used with this pipeline.\nThe format of any vertex buffers used with this pipeline.\nBytes per “row” in an image.\nThe pipeline cache to use when creating this pipeline.\nThe pipeline cache to use when creating this pipeline.\nReturns the amount of space that the GPU will use before …\nReturns the amount of space that the GPU will use before …\nDepth bias clamp value (absolute).\nRemoves all elements from the buffer.\nRemoves all elements from the buffer.\nRemoves all elements from the buffer.\nClears buffer to zero.\nClears texture to zero.\nColor equation.\nThe color attachments of the render pass.\nIf this is enabled, this is a comparison sampler using the …\nComparison function that determines if the fail_op or …\nGet the texture dimension required of this texture view …\nAdvanced options for when this pipeline is compiled\nAdvanced options for when this pipeline is compiled\nAdvanced options for when this pipeline is compiled\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nAll flags that indicate if the backend is WebGPU compliant\nReturns the number of components this format has.\nReturns the number of components this format has taking …\nIf set to true, the primitives are rendered with …\nConstant depth biasing factor, in basic units of the depth …\nSpecifies the values of pipeline-overridable constants in …\nWhether all set bits in a source flags value are also set …\nWhether all set bits in a source flags value are also set …\nWhether all set bits in a source flags value are also set …\nWhether all set bits in a source flags value are also set …\nWhether all set bits in a source flags value are also set …\nReturns true if the bitflags contains bits that are not …\nReturns true if the bitflags contains bits that are not …\nReturns true if the bitflags contains bits that are not …\nReturns true if the bitflags contains bits that are not …\nReturns true if the bitflags contains bits that are not …\nContents of a buffer on creation.\nCopy data from one buffer to another.\nCopy data from a buffer to a texture.\nCopy data from a texture to a buffer.\nCopy data from one texture to another.\nThe number of samples calculated per pixel (for MSAA). For …\nIf this value is Some, indicates this entry is an array. …\nCreates a view of this texture.\nThe face culling mode.\nComparison function used to compare depth values in the …\nOperation that is performed when depth test fails but …\nWhat operations will be performed on the depth part of the …\nThe depth of the extent or the number of array layers\nThe effect of draw calls on the depth and stencil aspects …\nThe effect of draw calls on the depth and stencil aspects …\nThe depth and stencil attachment of the render pass, if …\nIf disabled, depth will not be written to.\n<code>Backend</code>-specific device ID of the adapter\nType of device\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nDimensions of the texture.\nThe dimension of the texture view. For 1D textures, this …\nDispatches compute work operations.\nDispatches compute work operations, based on the contents …\nDriver name\nDriver info\nMultiplier for the destination, which is stored in the …\nThe dynamic offset to use when setting the bind group in a …\nGet a flags value with all bits unset.\nGet a flags value with all bits unset.\nGet a flags value with all bits unset.\nGet a flags value with all bits unset.\nGet a flags value with all bits unset.\nEnd the pipeline statistics query on this compute pass. It …\nThe resources to bind to this bind group.\nArray of entries in this BindGroupLayout\nThe name of the entry point in the compiled shader to use.\nThe name of the entry point in the compiled shader to use.\nThe name of the entry point in the compiled shader to use.\nThe name of the entry point in the compiled shader. There …\nThe name of the entry point in the compiled shader. There …\nThe name of the entry point in the compiled shader. There …\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nOperation that is performed when stencil test fails.\nFinishes recording and returns a <code>CommandBuffer</code> that can be …\nThe first index within the index buffer.\nThe instance ID of the first instance to draw.\nThe instance ID of the first instance to draw.\nThe Index of the first vertex to draw.\nDrops the lifetime relationship to the parent command …\nFormat of the texture.\nThe <code>TextureFormat</code> of the image that this pipeline will …\nFormat of the depth/stencil buffer, must be special depth …\nFormat of the input\nFormat of the texture view. Either must be the same as the …\nThe compiled fragment stage, its entry point, and the …\nThe compiled fragment stage, its entry point, and the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from a bits value.\nConvert from a bits value.\nConvert from a bits value.\nConvert from a bits value.\nConvert from a bits value.\nConvert from a bits value exactly.\nConvert from a bits value exactly.\nConvert from a bits value exactly.\nConvert from a bits value exactly.\nConvert from a bits value exactly.\nConvert from a bits value, unsetting any unknown bits.\nConvert from a bits value, unsetting any unknown bits.\nConvert from a bits value, unsetting any unknown bits.\nConvert from a bits value, unsetting any unknown bits.\nConvert from a bits value, unsetting any unknown bits.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nGet a flags value with the bits of a flag with the given …\nGet a flags value with the bits of a flag with the given …\nGet a flags value with the bits of a flag with the given …\nGet a flags value with the bits of a flag with the given …\nGet a flags value with the bits of a flag with the given …\nReturns the texture aspect for a given plane.\nCreates a new densely packed <code>VertexBufferLayout</code> from an …\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nFront face mode.\nThe face to consider the front for the purpose of culling …\nGet the compilation info for the shader module.\nTry to retrieve a compute pipeline GPU object from a …\nGet the compute pipeline descriptor a cached render …\nGet the state of a cached compute pipeline.\nReturns the label\nReturns the label\nTry to retrieve a render pipeline GPU object from a cached …\nGet the render pipeline descriptor a cached render …\nGet the state of a cached render pipeline.\nCreates a writer that can be used to directly write …\nReturns the format features guaranteed by the WebGPU spec.\nReturns <code>true</code> if the format has a color aspect\nReturns <code>true</code> if the format has a depth aspect\nReturns true for buffer bindings with dynamic offset …\nReturns <code>true</code> if the format has a stencil aspect\nHeight of the extent\nReturns the <code>BindGroupId</code>.\nReturns the <code>ComputePipelineId</code>.\nReturns the <code>TextureId</code>.\nReturns the <code>TextureViewId</code>.\nReturns the <code>SamplerId</code>.\nThe index to use in a shader into the array.\nThe number of indices to draw.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nInserts debug marker.\nInserts debug marker.\nThe number of instances to draw.\nThe number of instances to draw.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nWhether any set bits in a source flags value are also set …\nWhether any set bits in a source flags value are also set …\nWhether any set bits in a source flags value are also set …\nWhether any set bits in a source flags value are also set …\nWhether any set bits in a source flags value are also set …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether all known bits in this flags value are set.\nWhether all known bits in this flags value are set.\nWhether all known bits in this flags value are set.\nWhether all known bits in this flags value are set.\nWhether all known bits in this flags value are set.\nReturns <code>true</code> for BCn compressed formats.\nReturns <code>true</code> if the format is a combined depth-stencil …\nReturns <code>true</code> for compressed formats.\nReturns true if the depth testing is enabled.\nReturns true if the state doesn’t mutate the depth …\nReturns <code>true</code> if <code>self</code> is a depth or stencil component of …\nReturns <code>true</code> if the format is a depth and/or stencil format\nWhether all bits in this flags value are unset.\nWhether all bits in this flags value are unset.\nWhether all bits in this flags value are unset.\nReturns true if the buffer is empty.\nReturns true if the buffer is empty.\nReturns true if no elements have been added to this …\nWhether all bits in this flags value are unset.\nWhether all bits in this flags value are unset.\nReturns true if the stencil test is enabled.\nReturns true if the depth biasing is enabled.\nReturns if the given range represents a full resource, …\nReturns <code>true</code> if the format is a multi-planar format\nReturns true if the state doesn’t mutate the target …\nReturns true if the state doesn’t mutate either depth or …\nReturns true if the face state doesn’t mutate the target …\nReturns <code>true</code> for srgb formats.\nReturns true if the state doesn’t mutate the stencil.\nReturns true for strip topologies.\nYield a set of contained flags values.\nYield a set of contained flags values.\nYield a set of contained flags values.\nYield a set of contained flags values.\nYield a set of contained flags values.\nYield a set of contained named flags values.\nYield a set of contained named flags values.\nYield a set of contained named flags values.\nYield a set of contained named flags values.\nYield a set of contained named flags values.\nlabel\nDebug label of a buffer. This will show up in graphics …\nDebug label for the command encoder. This will show up in …\nDebug label of the texture. This will show up in graphics …\nDebug label of the bind group. This will show up in …\nDebug label of the bind group layout. This will show up in …\nDebug label of the compute pass. This will show up in …\nDebug label of the pipeline. This will show up in graphics …\nDebug label of the pipeline layout. This will show up in …\nDebug label of the render pass. This will show up in …\nDebug label of the pipeline. This will show up in graphics …\nDebug label of the sampler. This will show up in graphics …\nDebug label of the shader module. This will show up in …\nDebug label of the texture view. This will show up in …\nDebug label of a buffer. This will show up in graphics …\nDebug label of the pipeline. This will show up in graphics …\nReturns the layer range of a subresource range describes …\nThe layout of the texture data in this buffer.\nThe <code>BindGroupLayout</code> that corresponds to this bind group.\nThe layout of bind groups for this pipeline.\nThe layout of bind groups for this pipeline.\nThe layout of the texture data in this buffer.\nThe layout of bind groups for this pipeline.\nReturns the number of items that have been pushed to this …\nReturns the number of items that have been pushed to this …\nReturns the length of the buffer.\nProcesses the asset in an asynchronous closure.\nHow data should be read through this attachment.\nMaximum level of detail (i.e. mip level) to use\nMinimum level of detail (i.e. mip level) to use\nHow to filter the texture when it needs to be magnified …\nAllows a buffer to be mapped immediately after they are …\nBitmask that restricts the samples of a pixel modified by …\nAmount of bind groups that can be attached to a pipeline …\nMaximum binding index allowed in <code>create_bind_group_layout</code>. …\nA limit above which buffer allocations are guaranteed to …\nThe maximum number of bytes necessary to hold one sample …\nThe maximum allowed number of color attachments.\nMaximum value of the product of the <code>workgroup_size</code> …\nThe maximum value of the workgroup_size X dimension for a …\nThe maximum value of the workgroup_size Y dimension for a …\nThe maximum value of the workgroup_size Z dimension for a …\nMaximum number of bytes used for workgroup memory in a …\nThe maximum value for each dimension of a …\nAmount of storage buffer bindings that can be dynamic in a …\nAmount of uniform buffer bindings that can be dynamic in a …\nMaximum allowed number of components (scalars) of input or …\nCalculates the maximum possible count of mipmaps.\nMaximum number of live non-sampler bindings.\nAmount of storage available for push constants in bytes. …\nAmount of sampled textures visible in a single shader …\nAmount of samplers visible in a single shader stage. …\nMaximum size in bytes of a binding to a storage buffer. …\nAmount of storage buffers visible in a single shader …\nAmount of storage textures visible in a single shader …\nMaximal number of invocations in a subgroup. Lower is “…\nMaximum allowed value for the <code>size.depth_or_array_layers</code> …\nMaximum allowed value for the <code>size.width</code> of a texture …\nMaximum allowed value for the <code>size.width</code> and <code>size.height</code> …\nMaximum allowed value for the <code>size.width</code>, <code>size.height</code>, and …\nMaximum size in bytes of a binding to a uniform buffer. …\nAmount of uniform buffers visible in a single shader …\nMaximum length of <code>VertexBufferLayout::attributes</code>, summed …\nMaximum value for <code>VertexBufferLayout::array_stride</code> when …\nMaximum length of <code>VertexState::buffers</code> when creating a …\nHow to filter the texture when it needs to be minified …\nRepresents the minimum size of <code>Self</code> (equivalent to …\nRequired <code>BufferBindingType::Storage</code> alignment for …\nMinimal number of invocations in a subgroup. Higher is “…\nRequired <code>BufferBindingType::Uniform</code> alignment for …\nThe target mip level of the texture.\nThe target mip level of the texture.\nMip count of texture. For a texture with no extra mips, …\nMip level count. If <code>Some(count)</code>, <code>base_mip_level + count</code> …\nMip level count. If <code>Some(count)</code>, <code>base_mip_level + count</code> …\nCalculates the extent at a given mip level. Does <em>not</em> …\nReturns the mip level range of a subresource range …\nHow to filter between mip map levels\nThe compiled shader module for this stage.\nThe compiled shader module for this stage.\nThe compiled shader module for this stage.\nThe multi-sampling properties of the pipeline.\nThe multi-sampling properties of the pipeline.\nIf the pipeline will be used with a multiview render pass, …\nAdapter name\nReturns true if the stencil state uses the reference value …\nReturns true if the face state uses the reference value …\nReturns true if the comparison depends on the reference …\nCreates a new <code>RawBufferVec</code> with the given <code>BufferUsages</code>.\nCreates a new <code>BufferVec</code> with the given <code>BufferUsages</code>.\nCreates a new <code>UninitBufferVec</code> with the given <code>BufferUsages</code>.\nCreate a new pipeline cache associated with the given …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nDefines where the occlusion query results will be stored …\nBase offset of the buffer, in bytes.\nByte offset of the start of the input\nOffset into the buffer that is the start of the texture. …\nReturns a <code>VertexBufferLayout</code> with the shader location of …\nThe binary operation applied to the source and destination,\nWhat operations will be performed on this color attachment.\nThe base texel of the texture in the selected <code>mip_level</code>. …\nThe base texel of the texture in the selected <code>mip_level</code>. …\nOperation that is performed when stencil test success.\nCalculates the physical size backing a texture of the given\nReturns an iterator over the pipelines in the pipeline …\nReturns the number of planes a multi-planar format has.\nControls the way each polygon is rasterized. Can be either …\nStops command recording and creates debug group.\nStops command recording and creates debug group.\nThe properties of the pipeline at the primitive assembly …\nThe properties of the pipeline at the primitive assembly …\nProcess the pipeline queue and create all pending …\nAdds a new value and returns its index.\nAdds a new value and returns its index.\nPush data into the <code>DynamicUniformBuffer</code>’s internal …\nSet of push constant ranges this pipeline uses. Each …\nThe push constant ranges for this pipeline. Supply an …\nStart record commands and group it into debug marker group.\nStart record commands and group it into debug marker group.\nInsert a compute pipeline into the cache, and queue its …\nInsert a render pipeline into the cache, and queue its …\nRange in push constant memory to use for the stage. Must …\nStencil values are AND’d with this mask when reading and …\nReturns <code>true</code> if the blend factor references the second …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nStrips the <code>Srgb</code> suffix from the given texture format.\nReturns the required features (if any) in order to use the …\nCreates a <code>Buffer</code> on the <code>RenderDevice</code> with size at least …\nCreates a <code>Buffer</code> on the <code>RenderDevice</code> with size at least …\nMaterializes the buffer on the GPU with space for <code>capacity</code> …\nResolves a query set, writing the results into the …\nThe view that will receive the resolved output if …\nResource to attach to the binding\n“Rows” that make up a single “image”.\nSample count of texture. If this is not 1, texture must …\nReturns the sample type compatible with this format and …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nSet the data the buffer stores.\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nSets the active bind group for a given bind group index. …\nChanges the debugging label of the buffer.\nChanges the debugging label of the buffer.\nSets the active compute pipeline.\nSet push constant data for subsequent dispatch calls.\nThe compiled shader module for this stage.\nThe compiled shader module for this stage.\nThe compiled shader module for this stage.\nLocation for this input. Must match the location in the …\nReturns the size of <code>Self</code> at runtime\nReturns the byte size of the format.\nSize of a buffer, in bytes.\nSize of the texture. All components must be greater than …\nSize of the binding in bytes, or <code>None</code> for using the rest …\nReturns the size multiple requirement for a texture using …\nSlope depth biasing factor.\nSource code for the shader.\nMultiplier for the source, which is produced by the …\nStage push constant range is visible from. Each stage can …\nStencil state.\nWhat operations will be performed on the stencil part of …\nHow often this vertex buffer is “stepped” forward.\nHow often this vertex buffer is “stepped” forward.\nWhether data will be written to through this attachment.\nWhen drawing strip topologies with indices, this is the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nSee …\nThe number of bytes occupied per pixel in a color …\nThe color state of the render targets.\nThe color state of the render targets.\nThe texture to be copied to/from.\nThe texture to be copied to/from.\nDefines which timestamp values will be written for this …\nDefines which timestamp values will be written for this …\nRemoves the third dimension from this origin\nAdds color space and premultiplied alpha information to …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe primitive topology used to interpret vertices.\nReduces the length of the buffer.\nReduces the length of the buffer.\nThe type of the binding\nIf set to true, the polygon depth is not clipped to 0-1 …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nReturns a vec of (binding index, <code>OwnedBindingResource</code>). In …\nConvenience method to “unwrap” a pipeline state into …\nUsages of a buffer. If the buffer is used in any way that …\nAllowed usages of the texture. If used in other ways, the …\nUsages of a buffer. If the buffer is used in any way that …\nReturns true if the state relies on the constant color, …\n<code>Backend</code>-specific vendor ID of the adapter\nThe compiled vertex stage, its entry point, and the input …\nThe compiled vertex stage, its entry point, and the input …\nThe number of vertices to draw.\nThe view to use as an attachment.\nThe view to use as an attachment.\nSpecifies what view formats will be allowed when calling …\nWhich shader stages can see this binding.\nCalculates the volume of the <code>Extent3d</code>.\nReturns a iterator of the IDs of all currently waiting …\nWidth of the extent\nQueues writing of data from system RAM to VRAM using the …\nQueues writing of data from system RAM to VRAM using the …\nMaterializes the buffer on the GPU, with an appropriate …\nQueues writing of data from system RAM to VRAM using the …\nQueues writing of data from system RAM to VRAM using the …\nQueues writing of data from system RAM to VRAM using the …\nMask which enables/disables writes to different …\nStencil values are AND’d with this mask when writing to …\nIssue a timestamp command at this point in the queue. The …\nIssue a timestamp command at this point in the queue. The …\nX position of the origin\nThe number of work groups in X dimension.\nY position of the origin\nThe number of work groups in Y dimension.\nZ position of the origin\nThe number of work groups in Z dimension.\nWhether workgroup scoped memory will be initialized with …\nWhether to zero-initialize workgroup memory by default. If …\nWhether to zero-initialize workgroup memory by default. If …\nAllowed access to this texture.\nFormat of the texture.\nIndicates that the binding has a dynamic offset.\nThe minimum size for a <code>BufferBinding</code> matching this entry, …\nTrue if the texture has a sample count greater than 1. If …\nSample type of the texture binding.\nSub-type of the buffer binding.\nDimension of the texture view that is going to be sampled.\nDimension of the texture view that is going to be sampled.\nIf <code>true</code>, the buffer can only be read in the shader, and it:\ncompressed block dimensions\nASTC RGBA channel\nIf this is <code>false</code>, the texture can’t be sampled with a …\nHelper type meant to be used together with the <code>ShaderType</code> …\nTrait implemented for WGSL runtime-sized arrays and WGSL …\nDynamic storage buffer wrapper facilitating RW operations\nDynamic uniform buffer wrapper facilitating RW operations\nRepresents WGSL Size (equivalent to <code>ShaderType::min_size</code>)\nTrait implemented for all WGSL fixed-footprint types\nBase trait for all WGSL host-shareable types\nStorage buffer wrapper facilitating RW operations\nUniform buffer wrapper facilitating RW operations\nAsserts that <code>Self</code> meets the requirements of the uniform …\nReturns the size of <code>Self</code> assuming the (contained) …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates <code>Self</code> using <code>default()</code>.\nUsed to implement <code>ShaderType</code> for the given matrix type\nUsed to implement <code>ShaderType</code> for the given runtime-sized …\nUsed to implement <code>ShaderType</code> for the given vector type\nUsed to implement <code>ShaderType</code> for the given wrapper type\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nModule containing items necessary to implement <code>ShaderType</code> …\nRepresents the minimum size of <code>Self</code> (equivalent to …\nCreates a new dynamic storage buffer wrapper with an …\nCreates a new dynamic uniform buffer wrapper with an …\nCreates a new dynamic storage buffer wrapper with a given …\nCreates a new dynamic uniform buffer wrapper with a given …\nModule containing items necessary to implement <code>ShaderType</code> …\nReturns the size of <code>Self</code> at runtime\nModule containing items necessary to implement <code>ShaderType</code> …\nHelper type for alignment calculations\nContains the error value\nContains the success value\nHelper type for size calculations\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns an alignment that is the smallest power of two …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns true if <code>n</code> is a multiple of this alignment\nReturns the max alignment from an array of alignments\nReturns the amount of padding needed so that <code>n + padding</code> …\nWill round up the given <code>n</code> so that the returned value will …\nWill round up the given <code>n</code> so that the returned value will …\nlength of the contained runtime sized array\nmax elements to read into the contained runtime sized array\nEnables writing to the matrix (via <code>&amp;mut [[T; R]; C]</code>)\nEnables reading from the matrix (via <code>&amp;[[T; R]; C]</code>)\nEnables the creation of a matrix (via <code>[[T; R]; C]</code>)\nUsed to implement <code>ShaderType</code> for the given matrix type\nUsed to implement <code>ShaderType</code> for the given runtime-sized …\nEnables writing to the vector (via <code>&amp;mut [T; N]</code>)\nEnables reading from the vector (via <code>&amp;[T; N]</code>)\nEnables the creation of a vector (via <code>[T; N]</code>)\nUsed to implement <code>ShaderType</code> for the given vector type\nThe handle to the physical device being used for rendering.\nThe <code>AdapterInfo</code> of the adapter in use by the renderer.\nThe context with all information required to interact with …\nThis GPU device is responsible for the creation of most …\nThe GPU instance is used to initialize the <code>RenderQueue</code> and …\nThis queue is used to enqueue tasks for the GPU to execute …\nA wrapper to safely make <code>wgpu</code> types Send / Sync on web …\nAppend a <code>CommandBuffer</code> to the command buffer queue.\nAppend a function that will generate a <code>CommandBuffer</code> to the\nCreates a new <code>TrackedRenderPass</code> for the context, …\nGets the current <code>CommandEncoder</code>.\nInitializes <code>Surface</code> for presentation.\nCreates a new <code>BindGroup</code>.\nCreates a <code>BindGroupLayout</code>.\nCreates a <code>Buffer</code>.\nCreates a <code>Buffer</code> and initializes it with the specified …\nCreates an empty <code>CommandEncoder</code>.\nCreates a <code>ComputePipeline</code>.\nCreates a <code>PipelineLayout</code>.\nCreates an empty <code>RenderBundleEncoder</code>.\nCreates a <code>RenderPipeline</code>.\nCreates a new <code>Sampler</code>.\nCreates a <code>ShaderModule</code> from either SPIR-V or WGSL source …\nCreates a new <code>Texture</code>.\nCreates a new <code>Texture</code> and initializes it with the …\nGets the diagnostics recorder, used to track elapsed time …\nList all <code>Features</code> that may be used with this device.\nFinalizes and returns the queue of <code>CommandBuffer</code>s.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nInitializes the renderer by retrieving and preparing the …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nList all <code>Limits</code> that were requested of this device.\nCreates a new <code>RenderContext</code> from a <code>RenderDevice</code>.\nCheck for resource cleanups and mapping callbacks.\nGets the underlying <code>RenderDevice</code>.\nUpdates the <code>RenderGraph</code> with all of its nodes and then …\nReturns the wgpu <code>Device</code>.\nAllows the use of <code>AddressMode::ClampToBorder</code> with a border …\nAllows the use of <code>AddressMode::ClampToBorder</code> with a border …\nWhether wgpu should expose adapters that run on top of …\nLets the rendering plugin create resources itself.\nNo explicit minor version is requested, the driver …\nAllows the [<code>wgpu::TextureUsages::STORAGE_BINDING</code>] usage on …\nSupported when targeting the web through webassembly with …\nAllows the user to create arrays of buffers in shaders:\nRepresents the backends that wgpu will use.\nEnables clear to zero for textures.\nAllows the user to set a …\nWebGPU default features and limits\nGenerate debug information in shaders and objects.\nAllows for explicit creation of textures of format …\nBy default, polygon depth is clipped to 0-1 range …\nDon’t pass labels to wgpu-hal.\nAllows two outputs from a shader to be used for blending. …\nSupported on Windows 10 and later\nSelects which DX12 shader compiler to use.\nThe Dxc compiler is new, fast and maintained.\nAllows textures with formats “r32float”, “rg32float…\nThe maximum supported features and limits of the adapter …\nThe Fxc compiler (default) is old, slow and unmaintained.\nSupported on Linux/Android, the web through webassembly …\nEnable GPU-based validation. Implies <code>Self::VALIDATION</code>. …\nSelects which OpenGL ES 3 minor version to request.\nAdapter that has the highest performance. This is often a …\nAllows non-zero value for the <code>first_instance</code> member in …\nInstance debugging flags.\nAdapter that uses the least possible power. This is often …\nWebgpu only allows the MAP_READ and MAP_WRITE buffer usage …\nSupported on macOS/iOS\nEnables multiview render passes and <code>builtin(view_index)</code> in …\nAllows the user to call <code>RenderPass::multi_draw_indirect</code> …\nAllows the user to call …\nApplications that have control over the content that is …\nAllows renderer resource initialization to happen outside …\nHints to the device about the memory allocation strategy.\nFavor memory usage over performance.\nPower usage is not considered when choosing an adapter.\nAllows the user to create bind groups containing arrays …\nAllows the use of pipeline cache objects\nEnables use of Pipeline Statistics Queries. These queries …\nAllows the user to set <code>PolygonMode::Line</code> in …\nAllows the user to set <code>PolygonMode::Point</code> in …\nAll the apis that wgpu offers first tier of support for.\nAllows the use of push constants: small, fast bits of …\nFavor performance over memory usage (the default value).\nPower Preference when choosing a physical adapter.\nAllows for the creation of ray-tracing queries within …\nAllows for the creation of ray-tracing acceleration …\nAllows for usage of textures of format …\nAn enum describing how the renderer will initialize …\nAllows shaders to index sampled texture and storage buffer …\nAll the apis that wgpu offers second tier of support for. …\nAllows shaders to use the <code>early_depth_test</code> attribute.\nAllows shaders to acquire the FP16 ability\nEnables 64-bit floating point types in SPIR-V shaders.\nAllows shaders to use i16. Not currently supported in <code>naga</code>…\nAllows shaders to use i64 and u64.\nAllows shaders to use all i64 and u64 atomic operations.\nAllows shaders to use i64 and u64 atomic min and max.\nEnables <code>builtin(primitive_index)</code> in fragment shaders.\nEnables creating shader modules from SPIR-V binary data …\nAllows the user to create uniform arrays of storage …\nAllows compute and fragment shaders to use the subgroup …\nAllows shaders to use the subgroup barrier\nAllows vertex shaders to use the subgroup operation …\nEnables device specific texture format features.\nAllows the user to create uniform arrays of textures in …\nEnables ASTC family of compressed textures. ASTC textures …\nEnables ASTC HDR family of compressed textures.\nEnables BCn family of compressed textures. All BCn …\nAllows the 3d dimension for textures with BC compressed …\nEnables ETC family of compressed textures. All ETC …\nEnables normalized <code>16-bit</code> texture formats.\nAllows for creation of textures of format …\nEnables use of Timestamp Queries. These queries tell the …\nAllows for timestamp queries directly on command encoders.\nAllows for timestamp queries directly on command encoders.\nAllows shaders to index uniform buffer and storage texture …\nEnable validation, if possible.\nEnables using 64-bit types for vertex attributes.\nEnables bindings of writable storage buffers and textures …\nSupported on Windows, Linux/Android, and macOS/iOS via …\nAllows using the VK_GOOGLE_display_timing Vulkan extension.\nRequest an ES 3.0 context.\nRequest an ES 3.1 context.\nRequest an ES 3.2 context.\nWebGPU default limits plus additional constraints in order …\nFeatures that are not guaranteed to be supported.\nRepresents the sets of limits an adapter/device supports.\nProvides configuration for renderer initialization. Use …\nConfigures the priority used when automatically …\nEnable advanced debugging and validation flags …\nGet a flags value with all known bits set.\nGet a flags value with all known bits set.\nGet a flags value with all known bits set.\nMask of all features that are only available when …\nMask of all features which are part of the upstream WebGPU …\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nGet the underlying bits value.\nGet the underlying bits value.\nGet the underlying bits value.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nCompares every limits within self is within the limits …\nCompares every limits within self is within the limits …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe constraints on limits allowed regardless of what the …\nWhether all set bits in a source flags value are also set …\nWhether all set bits in a source flags value are also set …\nWhether all set bits in a source flags value are also set …\nReturns true if the bitflags contains bits that are not …\nReturns true if the bitflags contains bits that are not …\nEnable recommended debugging and validation flags.\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe features to ensure are disabled regardless of what the …\nThese default limits are guaranteed to be compatible with …\nThese default limits are guaranteed to be compatible with …\nThe shader compiler to use for the DX12 backend.\nGet a flags value with all bits unset.\nGet a flags value with all bits unset.\nGet a flags value with all bits unset.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe features to ensure are enabled regardless of what the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from a bits value.\nConvert from a bits value.\nConvert from a bits value.\nConvert from a bits value exactly.\nConvert from a bits value exactly.\nConvert from a bits value exactly.\nConvert from a bits value, unsetting any unknown bits.\nConvert from a bits value, unsetting any unknown bits.\nConvert from a bits value, unsetting any unknown bits.\nInfer good defaults from the build type\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nGet a flags value with the bits of a flag with the given …\nGet a flags value with the bits of a flag with the given …\nGet a flags value with the bits of a flag with the given …\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nAllows you to choose which minor version of GLES3 to use …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThese are for controlling WGPU’s debug information to …\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nWhether any set bits in a source flags value are also set …\nWhether any set bits in a source flags value are also set …\nWhether any set bits in a source flags value are also set …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether all known bits in this flags value are set.\nWhether all known bits in this flags value are set.\nWhether all known bits in this flags value are set.\nWhether all bits in this flags value are unset.\nWhether all bits in this flags value are unset.\nWhether all bits in this flags value are unset.\nYield a set of contained flags values.\nYield a set of contained flags values.\nYield a set of contained flags values.\nYield a set of contained named flags values.\nYield a set of contained named flags values.\nYield a set of contained named flags values.\nThe imposed limits.\nFunction to create a <code>RenderCreation::Manual</code> variant.\nAmount of bind groups that can be attached to a pipeline …\nMaximum binding index allowed in <code>create_bind_group_layout</code>. …\nA limit above which buffer allocations are guaranteed to …\nThe maximum number of bytes necessary to hold one sample …\nThe maximum allowed number of color attachments.\nMaximum value of the product of the <code>workgroup_size</code> …\nThe maximum value of the workgroup_size X dimension for a …\nThe maximum value of the workgroup_size Y dimension for a …\nThe maximum value of the workgroup_size Z dimension for a …\nMaximum number of bytes used for workgroup memory in a …\nThe maximum value for each dimension of a …\nAmount of storage buffer bindings that can be dynamic in a …\nAmount of uniform buffer bindings that can be dynamic in a …\nMaximum allowed number of components (scalars) of input or …\nMaximum number of live non-sampler bindings.\nAmount of storage available for push constants in bytes. …\nAmount of sampled textures visible in a single shader …\nAmount of samplers visible in a single shader stage. …\nMaximum size in bytes of a binding to a storage buffer. …\nAmount of storage buffers visible in a single shader …\nAmount of storage textures visible in a single shader …\nMaximal number of invocations in a subgroup. Lower is “…\nMaximum allowed value for the <code>size.depth_or_array_layers</code> …\nMaximum allowed value for the <code>size.width</code> of a texture …\nMaximum allowed value for the <code>size.width</code> and <code>size.height</code> …\nMaximum allowed value for the <code>size.width</code>, <code>size.height</code>, and …\nMaximum size in bytes of a binding to a uniform buffer. …\nAmount of uniform buffers visible in a single shader …\nMaximum length of <code>VertexBufferLayout::attributes</code>, summed …\nMaximum value for <code>VertexBufferLayout::array_stride</code> when …\nMaximum length of <code>VertexState::buffers</code> when creating a …\nThis hints to the WGPU device about the preferred memory …\nRequired <code>BufferBindingType::Storage</code> alignment for …\nMinimal number of invocations in a subgroup. Higher is “…\nRequired <code>BufferBindingType::Uniform</code> alignment for …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nGet a features/limits priority from the environment …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe path to pass to wgpu for API call tracing. This only …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nModify the current limits to use the buffer alignment …\nModify the current limits to use the resolution limits of …\nReturns this set of flags, affected by environment …\nPath to the <code>dxcompiler.dll</code> file, or path to the directory …\nPath to the <code>dxil.dll</code> file, or path to the directory …\nDefines the range of allowed memory block sizes for …\nA storage buffer that is prepared as a <code>RenderAsset</code> and …\nA storage buffer that is prepared as a <code>RenderAsset</code> and …\nAdds <code>ShaderStorageBuffer</code> as an asset that is extracted and …\nThe asset usage of the storage buffer.\nThe buffer description used to create the buffer.\nOptional data used to initialize the buffer.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new storage buffer with the given data and asset …\nSets the data of the storage buffer to the given <code>ShaderType</code>…\nCreates a new storage buffer with the given size and asset …\nPlugin that registers a component for automatic sync to …\nReturns the argument unchanged.\nCreates <code>Self</code> using <code>default()</code>.\nCalls <code>U::from(self)</code>.\nComponent added on the render world entities to keep track …\nA <code>HashMap</code> pre-configured to use <code>EntityHash</code> hashing with a …\nA <code>HashSet</code> pre-configured to use <code>EntityHash</code> hashing with a …\nComponent added on the main world entities that are synced …\nMarker component that indicates that its entity needs to …\nA plugin that synchronizes entities with <code>SyncToRenderWorld</code> …\nMarker component that indicates that its entity needs to …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nA cached GPU <code>Texture</code> with corresponding <code>TextureView</code>.\nA wrapper for a <code>CachedTexture</code> that is used as a …\nA rendering resource for the default image sampler which …\nA wrapper for a <code>TextureView</code> that is used as a depth-only …\nA <code>RenderApp</code> resource that contains the default “fallback …\nA <code>RenderApp</code> resource that contains a “cubemap fallback …\nA Cache of fallback textures that uses the sample count …\nA <code>RenderApp</code> resource that contains a <em>zero-filled</em> “…\nThe GPU-representation of an <code>Image</code>. Consists of the <code>Texture</code>…\nAdds the <code>Image</code> as an asset and makes sure that they are …\nA wrapper for a <code>TextureView</code> that is used as a …\nA handle to a 1 x 1 transparent white image.\nThis resource caches textures that are created repeatedly …\nFallback image for <code>TextureViewDimension::Cube</code>.\nFallback image for <code>TextureViewDimension::CubeArray</code>.\nFallback image for <code>TextureViewDimension::D1</code>.\nFallback image for <code>TextureViewDimension::D2</code>.\nFallback image for <code>TextureViewDimension::D2Array</code>.\nFallback image for <code>TextureViewDimension::D3</code>.\nThe default image sampler to use when …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nRetrieves a texture that matches the <code>descriptor</code>. If no …\nGet this texture view as an attachment. The attachment …\nGet this texture view as an attachment. The attachment …\nGet this texture view as an attachment. The attachment …\nGet this texture view as an attachment, without the …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if the texture cache contains no textures.\nConverts the extracted image into a <code>GpuImage</code>.\nUpdates the cache and only retains recently used textures.\nUpdates the <code>TextureCache</code> to only retains recently used …\nLabel for the <code>calculate_bounds</code>, <code>calculate_bounds_2d</code> and …\nLabel for the <code>check_visibility</code> system updating …\nConfigures filmic color grading parameters to adjust the …\nFilmic color grading values applied to the image as a …\nA section of color grading values that can be selectively …\nThe <code>ColorGrading</code> structure, packed into the most efficient …\nAn entity with <code>Visibility::Hidden</code> will be unconditionally …\nAn entity with <code>Visibility::Inherited</code> will inherit the …\nWhether or not an entity is visible in the hierarchy. This …\nAn identifier for a rendering layer.\nComponent for configuring the number of samples for …\nUse this component to opt-out of built-in frustum culling …\nDescribes which rendering layers an entity belongs to.\nStores information related to <code>VisibilityRange</code>s in the …\nCollection of entities visible from the current view.\nLabel for <code>update_frusta</code> in <code>CameraProjectionPlugin</code>.\nWe need at least 4 storage buffer bindings available to …\nContains <code>OutputColorAttachment</code> used for each target …\nAlgorithmically-computed indication of whether an entity …\nUser indication of whether an entity is visible. …\nA <code>Bundle</code> of the <code>Visibility</code>, <code>InheritedVisibility</code>, and …\nLabel for the system propagating the <code>InheritedVisibility</code> …\nSpecifies the range of distances that this entity must be …\nA plugin that enables <code>VisibilityRange</code>s, which allow …\nAn entity with <code>Visibility::Visible</code> will be unconditionally …\nCollection of entities visible from the current view.\nStores which entities are in within the <code>VisibilityRange</code>s …\nCreates a new <em>abrupt</em> visibility range, with no crossfade.\nReturns an iterator that visits the shadows, midtones, and …\nApplies the given mutating function to the shadows, …\nGet the bitmask representation of the contained layers.\nReturns a reference to the GPU buffer that stores …\nComputes and adds an <code>Aabb</code> component to entities with a …\nSystem updating the visibility of entities each frame.\nChecks all entities against all views in order to …\nClears the view target <code>OutputColorAttachment</code>s.\nAdjusts the range of colors.\nCreates window surfaces.\nBy default, this structure includes layer <code>0</code>, which …\nThe range of distances, in world units, between which this …\nAn entity that contains the components in <code>Window</code>.\nReturns true if the entity has a visibility range and it …\nReturns true if the entity is in range of any view.\nReturns true if the entity is in range of the given camera.\nExposure value (EV) offset, measured in stops.\nExtracts all <code>VisibilityRange</code> components from the main …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate a <code>RenderLayers</code> from a list of layers.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nA linear luminance adjustment, mainly affecting the middle …\nA nonlinear luminance adjustment, mainly affecting the …\nRetrieve this target’s main texture’s color attachment.\nRetrieve this target’s “unsampled” main texture’s …\nFilmic color grading values applied to the image as a …\nColor grading values that are applied to the lighter parts …\nAn adjustment to the hue, in radians.\nReturns the set of layers shared by two instances of …\nDetermine if a <code>RenderLayers</code> intersects another.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns true if both the start and end transitions for …\nReturns true if the object is completely invisible, given …\nReturns <code>true</code> if and only if the main texture is …\nReturns true if the object will be visible at all, given a …\nGet an iterator of the layers.\nCreate a new <code>RenderLayers</code> belonging to the given layer.\nA fixed luminance adjustment, mainly affecting the lower …\nReturns the index in the GPU buffer corresponding to the …\nThe “main” unsampled texture.\nThe <em>other</em> “main” unsampled texture. In most cases you …\nThe <em>other</em> “main” unsampled texture view. In most cases …\nThe “main” unsampled texture.\nColor grading values that are applied to the parts of the …\nThe luminance (brightness) ranges that are considered part …\nCreate a new <code>RenderLayers</code> that belongs to no layers.\nThe final texture this view will render to.\nThe format of the final texture this view will render to\nThis will start a new “post process write”, which …\nSaturation adjustment applied after tonemapping. Values …\nPrepares the view target <code>OutputColorAttachment</code> for each …\n(re)configures window surfaces, and obtains a swapchain …\nCreates a 3D rangefinder for a view\nThe “main” sampled texture.\nThe “main” sampled texture view.\nValues below 1.0 desaturate, with a value of 0.0 resulting …\nColor grading values that are applied to the darker parts …\nThe range of distances, in world units, between which this …\nNote: this will not always be the swap chain texture view. …\nReturns all layers included in exactly one of the …\nAn adjustment made to the CIE 1931 chromaticity <em>x</em> value.\nAn adjustment made to the CIE 1931 chromaticity <em>y</em> value.\nReturns all layers included in either instance of …\nUpdates <code>Frustum</code>.\nIf set to true, Bevy will use the center of the …\nThe visibility of the entity.\nAdd the given layer.\nCreates a new <code>ColorGrading</code> instance in which shadows, …\nRemoves the given rendering layer.\nWrites the <code>RenderVisibilityRanges</code> table to the GPU.\nLabel for the <code>calculate_bounds</code>, <code>calculate_bounds_2d</code> and …\nLabel for the <code>check_visibility</code> system updating …\nAn entity with <code>Visibility::Hidden</code> will be unconditionally …\nAn entity with <code>Visibility::Inherited</code> will inherit the …\nWhether or not an entity is visible in the hierarchy. This …\nAn identifier for a rendering layer.\nUse this component to opt-out of built-in frustum culling …\nDescribes which rendering layers an entity belongs to.\nStores information related to <code>VisibilityRange</code>s in the …\nCollection of entities visible from the current view.\nLabel for <code>update_frusta</code> in <code>CameraProjectionPlugin</code>.\nWe need at least 4 storage buffer bindings available to …\nAlgorithmically-computed indication of whether an entity …\nUser indication of whether an entity is visible. …\nA <code>Bundle</code> of the <code>Visibility</code>, <code>InheritedVisibility</code>, and …\nLabel for the system propagating the <code>InheritedVisibility</code> …\nSpecifies the range of distances that this entity must be …\nA plugin that enables <code>VisibilityRange</code>s, which allow …\nAn entity with <code>Visibility::Visible</code> will be unconditionally …\nCollection of entities visible from the current view.\nStores which entities are in within the <code>VisibilityRange</code>s …\nComputes and adds an <code>Aabb</code> component to entities with a …\nSystem updating the visibility of entities each frame.\nChecks all entities against all views in order to …\nThe range of distances, in world units, between which this …\nExtracts all <code>VisibilityRange</code> components from the main …\nThe range of distances, in world units, between which this …\nUpdates <code>Frustum</code>.\nIf set to true, Bevy will use the center of the …\nThe visibility of the entity.\nWrites the <code>RenderVisibilityRanges</code> table to the GPU.\nCreates window surfaces.\nAn entity that contains the components in <code>Window</code>.\n(re)configures window surfaces, and obtains a swapchain …\nNote: this will not always be the swap chain texture view. …\nA marker component that indicates that a screenshot has …\nA marker component that indicates that a screenshot is …\nA component that signals to the renderer to capture a …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCapture a screenshot of the provided render target image.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCapture a screenshot of the primary window, if one exists.\nSaves the captured screenshot to disk at the provided path.\nCapture a screenshot of the provided manual texture view.\nCapture a screenshot of the provided window entity.\nContains the set of permitted types by their <code>TypeId</code>.\nContains the set of prohibited types by their <code>TypeId</code>.\nA reflection-powered serializable representation of an …\nA collection of serializable resources and dynamic …\nA <code>DynamicScene</code> builder, used to build a scene from a <code>World</code> …\nA component bundle for a <code>DynamicScene</code> root.\nAdding this component will spawn the scene as a child of …\nUnique id identifying a scene instance.\nInformation about a scene instance.\nAn IO Error\nScene contains a proxy without a represented type.\nScene with the given id does not exist.\nDynamic scene with the given id does not exist.\nA RON Error\nA composition of <code>World</code> objects.\nA component bundle for a <code>Scene</code> root.\nA filter used to control which types can be added to a …\n<code>InstanceId</code> of a spawned scene. It can be used with the …\nTriggered on a scene’s parent entity when …\nAsset loader for a Bevy dynamic scene (<code>.scn</code> / <code>.scn.ron</code>).\nPossible errors that can be produced by <code>SceneLoader</code>\nPlugin that provides scene functionality to an <code>App</code>.\nAdding this component will spawn the scene as a child of …\nErrors that can occur when spawning a scene.\nHandles spawning and despawning scenes in the world, …\nScene contains an unregistered type which has a <code>TypePath</code>.\nScene contains an unregistered component type.\nScene contains an unregistered resource type.\nScene contains an unregistered type.\nRepresents an unset filter.\nAllow the given type, <code>T</code>.\nUpdates the filter to allow all component and resource …\nCreates a filter where all types are allowed.\nUpdates the filter to allow all component types.\nUpdates the filter to allow all resource types.\nAllow the given type.\nAllows the given component type, <code>T</code>, to be included in the …\nAllows the given resource type, <code>T</code>, to be included in the …\nConsume the builder, producing a <code>DynamicScene</code>.\nClone the scene.\nA vector of boxed components that belong to the given …\nDeny the given type, <code>T</code>.\nUpdates the filter to deny all component and resource …\nCreates a filter where all types are denied.\nUpdates the filter to deny all component types.\nUpdates the filter to deny all resource types.\nDeny the given type.\nDenies the given component type, <code>T</code>, from being included in …\nDenies the given resource type, <code>T</code>, from being included in …\nSchedule the despawn of all instances of the provided …\nSchedule the despawn of a scene instance, removing all its …\nImmediately despawns a scene instance, removing all its …\nImmediately despawns all scene instances scheduled for …\nImmediately despawns all scenes scheduled for despawn by …\nImmediately despawns all instances of a dynamic scene.\nEntities contained in the dynamic scene.\nThe identifier of the entity, unique within a scene (and …\nMapping of entities from the scene world to the instance …\nExtract entities from the builder’s <code>World</code>.\nExtract one entity from the builder’s <code>World</code>.\nExtract resources from the builder’s <code>World</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate a new scene from a given dynamic scene.\nCreate a new dynamic scene from a given scene.\nPrepare a builder that will extract entities and their …\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreate a new dynamic scene from a given world.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nGlobal transform of the scene root entity.\nGlobal transform of the scene root entity.\nInherited visibility of the scene root entity.\nInherited visibility of the scene root entity.\nInstance which has been spawned.\nCheck that an scene instance spawned previously is ready …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns true if the given type, <code>T</code>, is allowed by the …\nReturns true if the given type is allowed by the filter.\nReturns true if the given type, <code>T</code>, is denied by the filter.\nReturns true if the given type is denied by the filter.\nReturns true if there are zero items in the filter.\nReturns an iterator over the items in the filter.\nGet an iterator over the entities in an instance, once it…\nReturns the number of items in the filter.\nProcesses the asset in an asynchronous closure.\nCreates a new scene with the given world.\nThe scene prelude.\nDespawns all entities with no components.\nResources stored in the dynamic scene.\nHandle to the scene to spawn.\nHandle to the scene to spawn.\nSystem that will spawn scenes from the <code>SceneRoot</code> and …\nSystem that handles scheduled scene instance spawning and …\n<code>serde</code> serialization and deserialization implementation for …\nSerialize this dynamic scene into the official Bevy scene …\nSerialize a given Rust data structure into rust object …\nSchedule the spawn of a new instance of the provided scene.\nSchedule the spawn of a new instance of the provided scene …\nSchedule the spawn of a new instance of the provided …\nSchedule the spawn of a new instance of the provided …\nImmediately spawns a new instance of the provided dynamic …\nImmediately spawns all scenes scheduled for spawn.\nImmediately spawns a new instance of the provided scene.\nTransform of the scene root entity.\nTransform of the scene root entity.\nIterate through all instances of the provided scenes and …\nAlgorithmically-computed visibility of the scene root …\nAlgorithmically-computed visibility of the scene root …\nUser-driven visibility of the scene root entity.\nUser-driven visibility of the scene root entity.\nSpecify a custom component <code>SceneFilter</code> to be used with …\nSpecify a custom resource <code>SceneFilter</code> to be used with this …\nThe world of the scene, containing its entities and …\nWrite the resources, the dynamic entities, and their …\nWrite the resources, the dynamic entities, and their …\nWrite the entities and their corresponding components to …\nId of the non-existent dynamic scene.\nId of the non-existent scene.\nThe type name for the unregistered type.\nType of the unregistered component.\nType of the unregistered resource.\nThe unregistered type.\nThe dynamic instance type.\nContains the set of permitted types by their <code>TypeId</code>.\nContains the set of prohibited types by their <code>TypeId</code>.\nA collection of serializable resources and dynamic …\nA <code>DynamicScene</code> builder, used to build a scene from a <code>World</code> …\nA component bundle for a <code>DynamicScene</code> root.\nAdding this component will spawn the scene as a child of …\nA composition of <code>World</code> objects.\nA component bundle for a <code>Scene</code> root.\nA filter used to control which types can be added to a …\nAdding this component will spawn the scene as a child of …\nHandles spawning and despawning scenes in the world, …\nRepresents an unset filter.\nEntities contained in the dynamic scene.\nGlobal transform of the scene root entity.\nGlobal transform of the scene root entity.\nInherited visibility of the scene root entity.\nInherited visibility of the scene root entity.\nResources stored in the dynamic scene.\nHandle to the scene to spawn.\nHandle to the scene to spawn.\nTransform of the scene root entity.\nTransform of the scene root entity.\nAlgorithmically-computed visibility of the scene root …\nAlgorithmically-computed visibility of the scene root …\nUser-driven visibility of the scene root entity.\nUser-driven visibility of the scene root entity.\nThe world of the scene, containing its entities and …\nName of the serialized component field in an entity struct.\nName of the serialized entity struct type.\nHandles serialization of multiple entities as a map of …\nHandles entity serialization as a map of component type to …\nName of the serialized entities field in a scene struct.\nName of the serialized resources field in a scene struct.\nName of the serialized scene struct type.\nHandles scene deserialization.\nHandles deserialization for a collection of entities.\nHandle deserialization of an entity and its components.\nHandles deserialization of a sequence of values with …\nHandles serializing a list of values with a unique type as …\nSerializer for a <code>DynamicScene</code>.\nThe entities to serialize.\nThe entity to serialize.\nId of the deserialized entity.\nList of boxed values of unique type to serialize.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a new serializer from a <code>DynamicScene</code> and an …\nThe type registry containing the types present in the …\nType registry in which the component types used by the …\nType registry in which the component types used by the …\nType registry in which the types used in <code>entries</code> are …\nType registry in which the types of the values to …\nThe scene to serialize.\nType registry in which the components and resources types …\nType registry in which the component types used by the …\nType registry in which the component types used by the …\nBitmask reserving bits for the <code>AlphaMode2d</code> Values are just …\nSets how a 2d material’s base color alpha channel is …\nHow a sprite is positioned relative to its <code>Transform</code>. It …\nThe sprite will take on the size of the image by default, …\nThe base color alpha value defines the opacity of the …\nStruct defining a <code>Sprite</code> border with padding values\nA 2d material that renders 2d meshes with a texture tinted …\nThe GPU representation of the uniform data of a …\nA component bundle for entities with a <code>Mesh2d</code> and a …\nCustom anchor point. Top left is <code>(-0.5, 0.5)</code>, center is …\n<code>RenderCommand</code> for sprite rendering.\nHelper utility to update <code>TextureAtlasLayout</code> on the fly.\nContains the error value\nReduce transparency to fully opaque or fully transparent …\nMaterials are used alongside <code>Material2dPlugin</code>, <code>Mesh2d</code>, and …\nRender pipeline data for a given <code>Material2d</code>\nAdds the necessary ECS resources and render logic to …\nCommon <code>Material2d</code> properties, calculated for a specific …\nA component bundle for entities with a <code>Mesh2d</code> and a …\nA material used for rendering a <code>Mesh2d</code>.\nDisables wireframe rendering for any entity it is attached …\nContains the success value\nBase color alpha values are overridden to be fully opaque …\nData prepared for a <code>Material2d</code> instance.\nDefines how a texture slice scales when resized\nThe texture will be cut in 9 slices, keeping the texture …\nDescribes a sprite to be rendered to a 2D camera\nA <code>Bundle</code> of components for drawing a single sprite from an …\nControls how the image is altered when scaled.\nAdds support for 2D sprite rendering.\nA component that marks entities that aren’t themselves …\nSystem set for sprite rendering.\nThe slice will be stretched to fit the area\nAn index into a <code>TextureAtlasLayout</code>, which corresponds to a …\nA builder which is used to create a texture atlas from …\nStores a map used to lookup the position of a texture in a …\nStores a mapping from sub texture handles to the related …\nSingle texture slice, representing a texture rect to draw …\nSlices a texture using the <strong>9-slicing</strong> technique. This …\nThe slice will be tiled to fit the area\nThe texture will be repeated if stretched beyond …\nEnables wireframe rendering for any entity it is attached …\nSets the color of the <code>Wireframe2d</code> of the entity it is …\nA <code>Plugin</code> that draws wireframes for 2D meshes.\nA convenient alias for <code>Or&lt;With&lt;Sprite&gt;, With&lt;SpriteSource&gt;&gt;</code>…\nWhether to add the sprite picking backend to the app.\nAdd a new texture to <code>atlas_layout</code>.\nAdd a <em>section</em> to the list in the layout and returns its …\nAdds a texture to be copied to the texture atlas.\nGet a flags value with all known bits set.\nGet a flags value with all known bits set.\nGet a flags value with all known bits set.\nGet a flags value with all known bits set.\nThe <code>AlphaMode2d</code> of this material.\n<code>Anchor</code> point of the sprite in the world\nControl whether the added texture should be converted to …\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nGet the underlying bits value.\nGet the underlying bits value.\nGet the underlying bits value.\nGet the underlying bits value.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe sprite borders, defining the 9 sections of the image\nPixel padding to the bottom\nConsumes the builder, and returns the newly created …\nSystem calculating and inserting an <code>Aabb</code> component to …\nDefines how the center part of the 9 slices will scale\nThe sprite’s color tint\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nWhether all set bits in a source flags value are also set …\nWhether all set bits in a source flags value are also set …\nWhether all set bits in a source flags value are also set …\nWhether all set bits in a source flags value are also set …\nChange the on-screen size of the sprite\nAn optional custom size for the sprite that will be used …\nIf <code>Self::global</code> is set, any <code>Entity</code> that does not have a …\nAdd a bias to the view depth of the mesh which can be used …\nAdd a bias to the view depth of the mesh which can be used …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nslice draw size\nGet a flags value with all bits unset.\nGet a flags value with all bits unset.\nGet a flags value with all bits unset.\nGet a flags value with all bits unset.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nFlip the sprite along the <code>X</code> axis\nFlip the sprite along the <code>Y</code> axis\nSets the texture format for textures in the atlas.\nReturns this material’s fragment shader. If …\nReturns the argument unchanged.\nReturns the argument unchanged.")