searchState.loadedDescShard("bevy", 7, "Input string\nWindow that received the event.\nWindow that received the event.\nWindow that received the event.\nWindow that received the event.\nHow many additional steps to use at most to find the depth …\nThe slice will repeat when the ratio between the <em>drawing </em>…\nThe texture will repeat when the ratio between the <em>drawing </em>…\nShould the image repeat horizontally\nShould the image repeat vertically\nThe curve that results from chaining one curve with …\nA curve with a constant value over its domain.\nThe curve that results from chaining two curves.\nA curve that has been reparametrized by another curve, …\nThe curve that results from repeating a curve forever.\nA curve defined by a function together with a fixed domain.\nA curve that is the graph of another curve over its …\nA curve that has had its domain changed by a linear …\nA curve whose samples are defined by mapping samples from …\nThe curve that results from chaining a curve with its …\nA curve whose sample space is mapped onto that of some …\nThe curve that results from repeating a curve <code>N</code> times.\nThe curve that results from reversing another.\nA curve that combines the output data from two constituent …\nThis value lies on the interior, in between two points, …\nThe data core of a curve using uneven samples (i.e. …\nAn error that indicates that a <code>ChunkedUnevenCore</code> could not …\nThe data core of a curve derived from evenly-spaced …\nAn error indicating that an <code>EvenCore</code> could not be …\nThis value lies exactly on a value in the family.\nThis type expresses the relationship of a value to a fixed …\nThis value is off the left tail of the family; the inner …\nThe length of the value buffer is supposed to be the <code>width</code> …\nTried to infer the width, but the ratio of lengths wasn’…\nNot enough samples were provided.\nNot enough samples were provided.\nAt least two sample times are necessary to interpolate in …\nThis value is off the right tail of the family; the inner …\nUnbounded domains are not compatible with <code>EvenCore</code>.\nThe data core of a curve defined by unevenly-spaced …\nAn error indicating that an <code>UnevenCore</code> could not be …\nThe width of a <code>ChunkedUnevenCore</code> cannot be zero.\nThe domain of the curve derived from this core.\nThe domain of the curve derived from this core.\nThe domain of the curve derived from this core.\nThe domain over which the samples are taken, which …\nGiven a domain and a number of samples taken over that …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMap all values using a given function <code>f</code>, leaving the …\nThis core, but with the sample times moved by the map <code>f</code>. …\nCreate a new <code>EvenCore</code> from the specified <code>domain</code> and <code>samples</code>…\nCreate a new <code>UnevenCore</code>. The given samples are filtered to …\nCreate a new <code>ChunkedUnevenCore</code>. The given <code>times</code> are …\nCreate a new <code>ChunkedUnevenCore</code>, inferring the width from …\nGiven a time <code>t</code>, obtain a <code>InterpolationDatum</code> which governs …\nGiven a time <code>t</code>, obtain a <code>InterpolationDatum</code> which governs …\nGiven a time <code>t</code>, obtain a <code>InterpolationDatum</code> which governs …\nLike <code>sample_interp</code>, but the returned values include the …\nLike <code>sample_interp</code>, but the returned values include the …\nLike <code>sample_interp</code>, but the returned values include the …\nObtain a value from the held samples using the given …\nObtain a value from the held samples using the given …\nThe samples that are interpolated to extract values.\nThe samples corresponding to the times for this curve.\nThe times for the samples of this curve.\nThe times, one for each sample.\nGiven a list of <code>times</code> and a target value, get the …\nThe values that are used in sampling. Each width-worth of …\nThe sample width: the number of values that are contained …\nThe actual length of the value buffer.\nThe expected length of the value buffer.\nThe number of samples that were provided.\nThe length of the time buffer.\nThe length of the value buffer.\nThe number of samples that were provided.\nThe number of samples that were provided.\n<code>f(t) = 2.70158 * t³ - 1.70158 * t²</code>\nBehaves as <code>EaseFunction::BackIn</code> for t &lt; 0.5 and as …\n<code>f(t) = 1.0 +  2.70158 * (t - 1.0)³ - 1.70158 * (t - 1.0)²</code>\nbouncy at the start!\nBehaves as <code>EaseFunction::BounceIn</code> for t &lt; 0.5 and as …\nbouncy at the end!\n<code>f(t) = 1.0 - sqrt(1.0 - t²)</code>\nBehaves as <code>EaseFunction::CircularIn</code> for t &lt; 0.5 and as …\n<code>f(t) = sqrt((2.0 - t) * t)</code>\n<code>f(t) = t³</code>\nBehaves as <code>EaseFunction::CubicIn</code> for t &lt; 0.5 and as …\n<code>f(t) = (t - 1.0)³ + 1.0</code>\nA type whose values can be eased between.\nCurve functions over the unit interval, commonly used for …\nA <code>Curve</code> that is defined by\n…\n…\nBehaves as <code>EaseFunction::ElasticIn</code> for t &lt; 0.5 and as …\n…\n<code>f(t) = 2.0^(10.0 * (t - 1.0))</code>\nBehaves as <code>EaseFunction::ExponentialIn</code> for t &lt; 0.5 and as …\n<code>f(t) = 1.0 - 2.0^(-10.0 * t)</code>\n<code>f(t) = t</code>\n<code>f(t) = t²</code>\nBehaves as <code>EaseFunction::QuadraticIn</code> for t &lt; 0.5 and as …\n<code>f(t) = -(t * (t - 2.0))</code>\n<code>f(t) = t⁴</code>\nBehaves as <code>EaseFunction::QuarticIn</code> for t &lt; 0.5 and as …\n<code>f(t) = (t - 1.0)³ * (1.0 - t) + 1.0</code>\n<code>f(t) = t⁵</code>\nBehaves as <code>EaseFunction::QuinticIn</code> for t &lt; 0.5 and as …\n<code>f(t) = (t - 1.0)⁵ + 1.0</code>\n<code>f(t) = 1.0 - cos(t * π / 2.0)</code>\nBehaves as <code>EaseFunction::SineIn</code> for t &lt; 0.5 and as …\n<code>f(t) = sin(t * π / 2.0)</code>\n<code>n</code> steps connecting the start and the end\nGiven <code>start</code> and <code>end</code> values, produce a curve with unlimited …\nA nonempty closed interval, possibly unbounded in either …\nAn error that indicates that an operation would have …\nAn error indicating that spaced points could not be …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate an <code>Interval</code> with a given <code>start</code> and <code>end</code>. Alias of …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nA curve which provides samples in the form of <code>Iterator</code>s.\nThe interval over which this curve is parametrized.\nSample this curve at a specified time <code>t</code>, producing an …\nSample this curve at a specified time <code>t</code>, producing an …\nSample a point on this curve at the parameter value <code>t</code>, …\nApproximations for converting the wattage of lamps to …\nPredefined for lux values in several locations.\nThe amount of light (lux) from ambient daylight (not …\nThe amount of light (lux) during the dark limit of civil …\nThe amount of light (lux) during sunrise or sunset on a …\nThe amount of light (lux) in very dark overcast day\nThe amount of light (lux) in direct sunlight.\nThe amount of light (lux) in full daylight (not direct …\nThe amount of light (lux) during a full moon on a clear …\nThe amount of light (lux) in an office building’s …\nThe amount of light (lux) in family living room lights.\nThe amount of light (lux) in a moonless, overcast night …\nThe amount of light (lux) in an office.\nThe amount of light (lux) on a overcast day; typical TV …\nThis extension trait covers shortfall in determinacy from …\nComputes the arccosine of a number. Return value is in …\nInverse hyperbolic cosine function.\nComputes the arcsine of a number. Return value is in …\nInverse hyperbolic sine function.\nComputes the arctangent of a number. Return value is in …\nComputes the four-quadrant arctangent of <code>y</code> and <code>x</code> in …\nInverse hyperbolic tangent function.\nReturns the cube root of a number.\nComputes the cosine of a number (in radians).\nHyperbolic cosine function.\nCubes the f32\nReturns <code>e^(self)</code>, (the exponential function).\nReturns <code>2^(self)</code>.\nReturns <code>e^(self) - 1</code> in a way that is accurate even if the …\nCompute the distance between the origin and a point <code>(x, y)</code> …\nReturns the natural logarithm of the number.\nReturns <code>ln(1+n)</code> (natural logarithm) more accurately than if\nReturns the base 10 logarithm of the number.\nReturns the base 2 logarithm of the number.\nRaises a number to a floating point power.\nComputes the sine of a number (in radians).\nSimultaneously computes the sine and cosine of the number, …\nHyperbolic sine function.\nSquares the f32\nComputes the tangent of a number (in radians).\nHyperbolic tangent function.\nA curve that is defined by neighbor interpolation over a …\nA curve that is defined by explicit neighbor interpolation …\nA curve that is defined by interpolation over unevenly …\nA curve that is defined by interpolation over unevenly …\nA singular element access within a path. Multiple accesses …\nAn error originating from an <code>Access</code> of an element within a …\nThe kind of <code>AccessError</code>, along with some kind-specific …\nA enumeration of all error outcomes that might happen when …\nA trait used to power array-like operations via reflection.\nAn array-like type.\nA container for compile-time array info.\nAn iterator over an <code>Array</code>.\nA const parameter.\nType information for a const generic parameter.\nAttempted to apply to types with mismatched sizez, e.g. a […\nA fixed-size list of reflected values.\nA dynamic representation of an enum.\nA list of reflected values.\nAn ordered mapping between reflected values.\nAn ordered set of reflected values.\nA struct type which allows fields to be added at runtime.\nA tuple which allows fields to be added at runtime.\nA tuple struct which allows fields to be added at runtime.\nDynamic dispatch for <code>TypePath</code>.\nDynamic dispatch for <code>Typed</code>.\nA dynamic representation of an enum variant.\nA trait used to power enum-like operations via reflection.\nAn enum-like type.\nA container for compile-time enum info, used by <code>TypeInfo</code>.\nA name-based field access on a struct.\nA index-based field access on a struct.\nAn iterator over the field values of a struct.\nA trait that enables types to be dynamically constructed …\nDerives the <code>FromReflect</code> trait.\nTrait used to generate <code>TypeData</code> for trait reflection.\nAn enum representing a generic parameter.\nThe generic parameters of a type.\nA convenience trait which combines fetching and …\nA trait which allows nested <code>Reflect</code> values to be retrieved …\nA convenience trait which combines fetching and …\nA convenience trait which combines fetching and …\nA trait which allows a type to generate its …\nAn error that occurs when using an <code>Access</code> on the wrong …\nAn error that occurs when using an <code>Access</code> on the wrong …\nAn error caused by trying to access a path that’s not …\nAn error that occurs when a type cannot downcast to a …\nCaused when a type was expected to be of a certain kind, …\nA trait used to power list-like operations via reflection.\nA list-like type.\nAn index-based access on a list.\nA container for compile-time list info.\nAn iterator over an <code>List</code>.\nA trait used to power map-like operations via reflection.\nA map-like type.\nA container for compile-time map info.\nAn iterator over the key-value pairs of a <code>Map</code>.\nAttempted to apply the wrong kind to a type, e.g. a struct …\nTried to apply incompatible types.\nEnum variant that we tried to apply to was missing a field.\nAn error that occurs when a certain type doesn’t contain …\nThe named field of a reflected struct.\nAn <code>Access</code> combined with an <code>offset</code> for more helpful error …\nAn opaque type.\nA container for compile-time info related to …\nAn error that occurs when parsing reflect path strings.\nAn error caused by an invalid path string that couldn’t …\nA pre-parsed path to an element within a type.\nThe foundational trait of <code>bevy_reflect</code>, used for accessing …\nA core trait of <code>bevy_reflect</code>, used for downcasting to …\nThe main derive macro used by <code>bevy_reflect</code> for deriving …\nA struct used to deserialize reflected instances of a type.\n<code>Reflect</code> values are commonly used in situations where the …\nType data that represents the <code>FromReflect</code> trait and allows …\nAn enumeration of the “kinds” of a reflected type.\nCaused when a type was expected to be of a certain kind, …\nA mutable enumeration of “kinds” of a reflected type.\nAn owned enumeration of “kinds” of a reflected type.\nSomething that can be interpreted as a reflection path in …\nAn error returned from a failed path string query.\nAn immutable enumeration of “kinds” of a reflected …\nMarks a type as a reflectable wrapper for a remote type.\nA struct used to serialize reflected instances of a type.\nA catch-all trait that is bound by the core reflection …\nThe remote type this type represents via reflection.\nA trait used to power set-like operations via reflection.\nA set-like type.\nA container for compile-time set info.\nA trait used to power struct-like operations via reflection…\nA struct-like type.\nStruct enums take the form:\nStruct enums take the form:\nA container for compile-time named struct info.\nType info for struct variants.\nA trait used to power tuple-like operations via reflection.\nA tuple-like type.\nTuple enums take the form:\nTuple enums take the form:\nAn iterator over the field values of a tuple.\nAn index-based access on a tuple.\nA container for compile-time tuple info.\nA trait used to power tuple struct-like operations via …\nA tuple-struct-like type.\nAn iterator over the field values of a tuple struct.\nA container for compile-time tuple struct info.\nType info for tuple variants.\nThe base representation of a Rust type.\nA type parameter.\nA trait used to type-erase type metadata.\nCompile-time type information for various reflected types.\nA <code>TypeInfo</code>-specific error.\nCaused when a variant was expected to be of a certain type…\nType information for a generic type parameter.\nA static accessor to type paths and names.\nDerives the <code>TypePath</code> trait, providing a stable alternative …\nProvides dynamic access to all methods on <code>TypePath</code>.\nRuntime storage for type metadata, registered into the …\nA registry of reflected types.\nA synchronized wrapper around a <code>TypeRegistry</code>.\nA static accessor to compile-time type information.\nUnit enums take the form:\nUnit enums take the form:\nType info for unit variants.\nThe enum we tried to apply to didn’t contain a variant …\nThe unnamed field of a reflected tuple or tuple struct.\nAn iterator over the fields in the current enum variant.\nA container for compile-time enum variant info.\nA <code>VariantInfo</code>-specific error.\nDescribes the form of an enum variant.\nRepresentation for individual element accesses within a …\nThe returns the <code>Access</code> that this <code>AccessError</code> occurred in.\nThe <code>Access</code> itself.\nAttempts to register the type described by <code>registration</code>.\nApplies a reflected value to this value.\nApplies the reflected array data to the given array.\nThe default debug formatter for <code>Array</code> types.\nReturns the <code>u64</code> hash of the given array.\nCompares two arrays (one concrete and one reflected) to …\nTries to apply the reflected array data to the given array …\nReturns the value as a <code>&amp;dyn Any</code>.\nReturns the value as a <code>&amp;mut dyn Any</code>.\nAttempts a cast to a <code>Array</code> trait object.\nAttempts a cast to a <code>Array</code> trait object.\nAttempts a cast to <code>ArrayInfo</code>.\nAttempts a cast to a <code>Enum</code> trait object.\nAttempts a cast to a <code>Enum</code> trait object.\nAttempts a cast to <code>EnumInfo</code>.\nAttempts a cast to a <code>List</code> trait object.\nAttempts a cast to a <code>List</code> trait object.\nAttempts a cast to <code>ListInfo</code>.\nAttempts a cast to a <code>Map</code> trait object.\nAttempts a cast to a <code>Map</code> trait object.\nAttempts a cast to <code>MapInfo</code>.\nAttempts a cast to a <code>PartialReflect</code> trait object.\nAttempts a cast to a <code>PartialReflect</code> trait object.\nAttempts a cast to <code>OpaqueInfo</code>.\nCasts this type to a reflected value.\nCasts this type to a mutable, reflected value.\nCasts this type to a fully-reflected value.\nConvert <code>Ptr</code> into <code>&amp;dyn Reflect</code>.\nCasts this type to a mutable, fully-reflected value.\nConvert <code>PtrMut</code> into <code>&amp;mut dyn Reflect</code>.\nConverts a reference of this wrapper to a reference of its …\nConverts a mutable reference of this wrapper to a mutable …\nAttempts a cast to a <code>Set</code> trait object.\nAttempts a cast to a <code>Set</code> trait object.\nAttempts a cast to a <code>Struct</code> trait object.\nAttempts a cast to a <code>Struct</code> trait object.\nAttempts a cast to <code>StructInfo</code>.\nAttempts a cast to <code>StructVariantInfo</code>.\nAttempts a cast to a <code>Tuple</code> trait object.\nAttempts a cast to a <code>Tuple</code> trait object.\nAttempts a cast to <code>TupleInfo</code>.\nAttempts a cast to a <code>TupleStruct</code> trait object.\nAttempts a cast to a <code>TupleStruct</code> trait object.\nAttempts a cast to <code>TupleStructInfo</code>.\nAttempts a cast to <code>TupleVariantInfo</code>.\nAttempts a cast to <code>UnitVariantInfo</code>.\nConverts a reference of the remote type to a reference of …\nConverts a mutable reference of the remote type to a …\nThe compile-time capacity of the array.\nClones the map, producing a <code>DynamicMap</code>.\nClones the set, producing a <code>DynamicSet</code>.\nClones the struct into a <code>DynamicStruct</code>.\nClones the struct into a <code>DynamicTuple</code>.\nClones the struct into a <code>DynamicTupleStruct</code>.\nClones the list, producing a <code>DynamicArray</code>.\nClones the list, producing a <code>DynamicList</code>.\nClones the value as a <code>Reflect</code> trait object.\nChecks if the given value is contained in the set\nReturns true if this registration contains the given type …\nReturns true if this registration contains the given type …\nChecks if a variant with the given name exists within this …\nSee <code>TypePath::crate_name</code>.\nReturns the name of the crate the type is in, or <code>None</code> if …\nSee <code>TypePath::crate_name</code>.\nReturns the custom attributes for this item.\nReturns the custom attributes for this item.\nReturns the custom attributes for this item.\nReturns the custom attributes for this item.\nReturns the custom attributes for this item.\nReturns the custom attributes for this variant.\nReturns the custom attributes for this item.\nReturns the custom attributes for this item.\nReturns the custom attributes for this item.\nReturns a reference to the value of type <code>T</code> in this …\nReturns a reference to the value with the given <code>TypeId</code> in …\nReturns a mutable reference to the value of type <code>T</code> in this …\nReturns a mutable reference to the value with the given …\nDebug formatter for the value.\nThe default type for the parameter, if any.\nThe default value for the parameter, if any.\nDeserializes a reflected value.\nReturns a reference to this <code>Access</code>’s inner value as a …\nThe docstring of this array, if any.\nThe docstring of this field, if any.\nThe docstring of this field, if any.\nThe docstring of this list, if any.\nThe docstring of this map, if any.\nThe docstring of this set, if any.\nThe docstring of this struct, if any.\nThe docstring of this tuple, if any.\nThe docstring of this struct, if any.\nThe docstring of the underlying type, if any.\nThe docstring of this dynamic type, if any.\nThe docstring of this enum, if any.\nThe docstring of the underlying variant, if any.\nThe docstring of this variant, if any.\nThe docstring of this variant, if any.\nThe docstring of this variant, if any.\nReturns a boxed object from a boxed trait object if the …\nDowncasts the value to type <code>T</code>, consuming the trait object.\nReturns a mutable reference to the object within the trait …\nDowncasts the value to type <code>T</code> by mutable reference.\nReturns an <code>Rc</code>-ed object from an <code>Rc</code>-ed trait object if the …\nReturns a reference to the object within the trait object …\nDowncasts the value to type <code>T</code> by reference.\nDrain the elements of this array to get a vector of owned …\nDrain the elements of this list to get a vector of owned …\nDrain the key-value pairs of this map to get a vector of …\nDrain the values of this set to get a vector of owned …\nDrain the fields of this tuple to get a vector of owned …\nGets a <code>&amp;T</code> to the specified element on the given <code>Reflect</code> …\nGets a <code>&amp;mut T</code> to the specified element on the given <code>Reflect</code>…\nCreate a type registry with <em>no</em> registered types.\nThe default debug formatter for <code>Enum</code> types.\nReturns the <code>u64</code> hash of the given enum.\nCompares an <code>Enum</code> with a <code>PartialReflect</code> value.\nReturns a reference to the value of the field named <code>name</code> …\nReturns a reference to the value of the field with index …\nReturns a reference to the value of the field with index …\nReturns a reference to the value of the field (in the …\nGet the field with the given name.\nGet the field with the given name.\nReturns a reference to the value of the field with index …\nReturns a reference to the value of the field (in the …\nGet the field at the given index.\nGet the field at the given index.\nGet the field at the given index.\nGet the field at the given index.\nGet the field at the given index.\nReturns a mutable reference to the value of the field with …\nReturns a mutable reference to the value of the field (in …\nReturns the number of fields in the struct.\nReturns the number of fields in the tuple.\nReturns the number of fields in the tuple struct.\nReturns the number of fields in the current variant.\nThe total number of fields in this struct.\nThe total number of fields in this tuple.\nThe total number of fields in this struct.\nThe total number of fields in this variant.\nThe total number of fields in this variant.\nReturns a mutable reference to the value of the field …\nReturns a mutable reference to the value of the field with …\nReturns a mutable reference to the value of the field with …\nReturns a mutable reference to the value of the field (in …\nA slice containing the names of all fields in order.\nA slice containing the names of all fields in order.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate a <code>DynamicEnum</code> from an existing one.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate a dynamic struct that doesn’t represent a type …\nGet a function pointer to turn a <code>Ptr</code> into <code>&amp;dyn Reflect</code> for …\nGet a function pointer to turn a <code>PtrMut</code> into …\nCreate a <code>DynamicEnum</code> from an existing one.\nConstructs a concrete instance of <code>Self</code> from a reflected …\nPerform a <code>FromReflect::from_reflect</code> conversion on the …\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nGets the generic parameters for this type.\nGets the generic parameters for this type.\nGets the generic parameters for this type.\nGets the generic parameters for this type.\nGets the generic parameters for this type.\nGets the generic parameters for this type.\nGets the generic parameters for this type.\nGets the generic parameters for this type.\nGets the generic parameters for this type.\nGets the generic parameters for this type.\nReturns a reference to the element at <code>index</code>, or <code>None</code> if …\nReturns a reference to the element at <code>index</code>, or <code>None</code> if …\nReturns a reference to the value associated with the given …\nReturns a reference to the value.\nReturns a reference to the <code>TypeRegistration</code> of the type …\nReturns the key-value pair at <code>index</code> by reference, or <code>None</code> …\nReturns the key-value pair at <code>index</code> by reference where the …\nGets a custom attribute by type.\nGets a custom attribute by type.\nGets a custom attribute by type.\nGets a custom attribute by type.\nGets a custom attribute by type.\nGets a custom attribute by type.\nGets a custom attribute by type.\nGets a custom attribute by type.\nGets a custom attribute by type.\nGets a custom attribute by its <code>TypeId</code>.\nGets a custom attribute by its <code>TypeId</code>.\nGets a custom attribute by its <code>TypeId</code>.\nGets a custom attribute by its <code>TypeId</code>.\nGets a custom attribute by its <code>TypeId</code>.\nGets a custom attribute by its <code>TypeId</code>.\nGets a custom attribute by its <code>TypeId</code>.\nGets a custom attribute by its <code>TypeId</code>.\nGets a custom attribute by its <code>TypeId</code>.\nReturns a reference to the value of the field named <code>name</code>, …\nReturns a reference to the value of the field with index …\nReturns a reference to the value of the field with index …\nReturns a mutable reference to the value of the field …\nReturns a mutable reference to the value of the field with …\nReturns a mutable reference to the value of the field with …\nReturns a mutable reference to the element at <code>index</code>, or …\nReturns a mutable reference to the element at <code>index</code>, or …\nReturns a mutable reference to the value associated with …\nReturns a mutable reference to the <code>TypeRegistration</code> of the …\nFinds the generic parameter with the given name.\nWill return <code>None</code> if <code>TypeInfo</code> is not available.\nWill return <code>None</code> if <code>TypeInfo</code> is not available.\nWill return <code>None</code> if <code>TypeInfo</code> is not available.\nWill return <code>None</code> if <code>TypeInfo</code> is not available.\nWill return <code>None</code> if <code>TypeInfo</code> is not available.\nWill return <code>None</code> if <code>TypeInfo</code> is not available.\nWill return <code>None</code> if <code>TypeInfo</code> is not available.\nReturns the <code>TypeInfo</code> of the type <em>represented</em> by this value.\nTurn the value into a serializable representation\nReturns a reference to the <code>TypeData</code> of type <code>T</code> associated …\nReturns a mutable reference to the <code>TypeData</code> of type <code>T</code> …\nReturns the <code>TypeInfo</code> associated with the given <code>TypeId</code>.\nReturns the default <code>TypeRegistration</code> for this type.\nReturns a reference to the <code>TypeRegistration</code> of the type …\nReturns a mutable reference to the <code>TypeRegistration</code> of the …\nReturns a reference to the <code>TypeRegistration</code> of the type …\nReturns a mutable reference to the <code>TypeRegistration</code> of the …\nReturns <code>true</code> if this item has a custom attribute of the …\nReturns <code>true</code> if this item has a custom attribute of the …\nReturns <code>true</code> if this item has a custom attribute of the …\nReturns <code>true</code> if this item has a custom attribute of the …\nReturns <code>true</code> if this item has a custom attribute of the …\nReturns <code>true</code> if this variant has a custom attribute of the …\nReturns <code>true</code> if this item has a custom attribute of the …\nReturns <code>true</code> if this item has a custom attribute of the …\nReturns <code>true</code> if this item has a custom attribute of the …\nReturns <code>true</code> if this item has a custom attribute with the …\nReturns <code>true</code> if this item has a custom attribute with the …\nReturns <code>true</code> if this item has a custom attribute with the …\nReturns <code>true</code> if this item has a custom attribute with the …\nReturns <code>true</code> if this item has a custom attribute with the …\nReturns <code>true</code> if this variant has a custom attribute with …\nReturns <code>true</code> if this item has a custom attribute with the …\nReturns <code>true</code> if this item has a custom attribute with the …\nReturns <code>true</code> if this item has a custom attribute with the …\nReturns the <code>TypeId</code> of the type.\nSee <code>TypePath::type_ident</code>.\nSee <code>TypePath::type_ident</code>.\nA macro used to generate a <code>FromReflect</code> trait …\nA replacement for <code>#[derive(Reflect)]</code> to be used with …\nA macro used to generate reflection trait implementations …\nA replacement for deriving <code>TypePath</code> for use on foreign …\nReturns the index of the field.\nReturns the index of the field (in the current variant) …\nGet the index of the field with the given name.\nGets the index of the field with the given name.\nGet the index of the variant with the given name.\nGet the index of the field with the given name.\nInserts an element at position <code>index</code> within the list, …\nInserts an instance of <code>T</code> into this registration’s type …\nInserts a typed key-value pair into the map.\nInserts a typed value into the set.\nInserts a field named <code>name</code> with the typed value <code>value</code> into …\nAppends a typed element with value <code>value</code> to the tuple.\nAppends a typed element with value <code>value</code> to the tuple …\nInserts a key-value pair into the map.\nInserts a value into the set.\nInserts a field named <code>name</code> with value <code>value</code> into the …\nAppends an element with value <code>value</code> to the tuple.\nAppends an element with value <code>value</code> to the tuple struct.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the value as a <code>Box&lt;dyn Any&gt;</code>.\nAttempts a cast to a <code>Array</code> trait object.\nAttempts a cast to a <code>Enum</code> trait object.\nAttempts a cast to a <code>List</code> trait object.\nAttempts a cast to a <code>Map</code> trait object.\nConverts this into an “owned” value.\nCasts this type to a boxed, reflected value.\nCasts this type to a boxed, fully-reflected value.\nConverts this wrapper into its remote type.\nAttempts a cast to a <code>Set</code> trait object.\nAttempts a cast to a <code>Struct</code> trait object.\nAttempts a cast to a <code>Tuple</code> trait object.\nAttempts a cast to a <code>TupleStruct</code> trait object.\nAttempts a cast to a <code>PartialReflect</code> trait object.\nConverts the remote type into this wrapper.\nReturns true if the trait object wraps an object of type …\nCheck if the given type matches this one.\nCheck if the given type matches this one.\nCheck if the given type matches this one.\nCheck if the given type matches this one.\nCheck if the given type matches this one.\nReturns <code>true</code> if the underlying value is of type <code>T</code>, or <code>false</code>\nCheck if the given type matches this one.\nCheck if the given type matches this one.\nCheck if the given type matches this one.\nCheck if the given type matches this one.\nCheck if the given type matches this one.\nCheck if the given type matches this one.\nCheck if the given type matches this one.\nCheck if the given type matches this one.\nCheck if the given type matches this one.\nCheck if the given type matches this one.\nCheck if the given type matches this one.\nReturns <code>true</code> if the given short type path is ambiguous, …\nWhether the generic parameter is a const parameter.\nIndicates whether or not this type is a <em>dynamic</em> type.\nReturns <code>true</code> if the collection contains no elements.\nReturns <code>true</code> if the collection contains no elements.\nReturns <code>true</code> if the list contains no elements.\nReturns <code>true</code> if the list contains no elements.\nReturns true if this registration has no type data.\nReturns true if the current variant’s type matches the …\nThe <code>TypeInfo</code> of the array item.\nThe <code>TypeInfo</code> of the list item.\nThe type of the array item.\nThe type of the list item.\nReturns an iterator over the array.\nReturns an iterator over the list.\nReturns an iterator over the key-value pairs of the map.\nReturns an iterator over the values of the set.\nReturns an iterator over the <code>TypeRegistration</code>s of the …\nReturns an iterator over all type data in this …\nIterate over the fields of this struct.\nIterate over the fields of this tuple.\nIterate over the fields of this struct.\nIterate over the variants of this enum.\nIterate over the fields of this variant.\nIterate over the fields of this variant.\nReturns an iterator over the values of the reflectable …\nReturns an iterator over the values of the tuple’s …\nReturns an iterator over the values of the tuple struct’…\nReturns an iterator over the values of the current variant…\nReturns a mutable iterator over the <code>TypeRegistration</code>s of …\nReturns a mutable iterator over all type data in this …\nChecks to see if the <code>TypeData</code> of type <code>T</code> is associated with …\nThe <code>TypeInfo</code> of the key type.\nThe type of the key type.\nReturns the “kind” of this reflected type without any …\nReturns the “kind” of this reflected type without any …\nReturns the “kind” of this reflected type without any …\nReturns the kind of <code>AccessError</code>.\nReturns the kind of this <code>TypeInfo</code>.\nReturns the number of elements in the array.\nReturns the number of elements in the list.\nReturns the number of elements in the map.\nReturns the number of elements in the set.\nThe total count of type data in this registration.\nApplies the elements of <code>b</code> to the corresponding elements of …\nThe default debug formatter for <code>List</code> types.\nReturns the <code>u64</code> hash of the given list.\nCompares a <code>List</code> with a <code>Reflect</code> value.\nTries to apply the elements of <code>b</code> to the corresponding …\nApplies the elements of reflected map <code>b</code> to the …\nThe default debug formatter for <code>Map</code> types.\nCompares a <code>Map</code> with a <code>PartialReflect</code> value.\nTries to apply the elements of reflected map <code>b</code> to the …\nSee <code>TypePath::module_path</code>.\nReturns the path to the module the type is in, or <code>None</code> if …\nSee <code>TypePath::module_path</code>.\nThe name of the field.\nThe name of this variant.\nThe name of this variant.\nThe name of this variant.\nThe name of the generic parameter.\nThe name of the type parameter.\nThe name of the const parameter.\nReturns the name of the field with index <code>index</code>.\nReturns the name of the field (in the current variant) …\nCreates a new <code>ArrayIter</code>.\nCreates a new <code>ListIter</code>.\nCreates a new <code>MapIter</code>.\nCreate a type registry with default registrations for …\nCreate a new <code>ArrayInfo</code>.\nCreate a new <code>NamedField</code>.\nCreate a new <code>ListInfo</code>.\nCreate a new <code>MapInfo</code>.\nCreate a new <code>SetInfo</code>.\nCreate a new <code>StructInfo</code>.\nCreate a new <code>TupleInfo</code>.\nCreate a new <code>TupleStructInfo</code>.\nCreate a new <code>DynamicEnum</code> to represent an enum at runtime.\nCreate a new <code>EnumInfo</code>.\nCreate a new <code>StructVariantInfo</code>.\nCreate a new <code>TupleVariantInfo</code>.\nCreate a new <code>UnitVariantInfo</code>.\nCreates an empty set of generics.\nCreates a new type parameter with the given name.\nCreates a new const parameter with the given name.\nCreate a new <code>DynamicEnum</code> with a variant index to represent …\nCreates type registration information for <code>T</code>.\nCreate a new <code>Type</code> from a type that implements <code>TypePath</code>.\nCreates a new table from a type.\nIf the <code>Access</code> was created with a parser or an offset was …\nA character offset in the string the path was parsed from.\nRegisters the type described by <code>registration</code>.\nParses a <code>ParsedPath</code> from a string.\nSimilar to <code>Self::parse</code> but only works on <code>&amp;&#39;static str</code> and …\nReturns a statically typed reference to the value …\nSee <code>TypePath::type_path</code>.\nSee <code>TypePath::type_path</code>.\nReturns a statically typed mutable reference to the value …\nRemoves the <em>back</em> element from the list and returns it, or …\nThe reflect prelude.\nAppends an element to the <em>back</em> of the list.\nAppends a typed value to the list.\nAppends a <code>Reflect</code> trait object to the list.\nTakes a read lock on the underlying <code>TypeRegistry</code>.\nSee <code>TypePath::crate_name</code>.\nGets a reference to the specified element on the given …\nGets a mutable reference to the specified element on the …\nReturns a hash of the value (which includes the type).\nReturns a zero-sized enumeration of “kinds” of type.\nSee <code>TypePath::module_path</code>.\nReturns a mutable enumeration of “kinds” of type.\nReturns an owned enumeration of “kinds” of type.\nReturns a “partial equality” comparison result.\nReturns a reference to the value specified by <code>path</code>.\nReturns a mutable reference to the value specified by <code>path</code>.\nReturns an immutable enumeration of “kinds” of type.\nGenerates a wrapper type that can be used to “derive …\nSee <code>TypePath::short_type_path</code>.\nA macro that automatically generates type data for traits, …\nSee <code>TypePath::type_ident</code>.\nSee <code>Typed::type_info</code>.\nSee <code>TypePath::type_path</code>.\nAttempts to register the type <code>T</code> if it has not yet been …\nRegisters the type data <code>D</code> for type <code>T</code>.\nRegisters other types needed by this type.\nRemoves and returns the element at position <code>index</code> within …\nRemoves an entry from the map.\nRemoves a value from the set.\nReturns <code>true</code> if the underlying value represents a value of …\nReturns a serializable version of the value.\nPerforms a type-checked assignment of a reflected value to …\nApplies the elements of reflected set <code>b</code> to the …\nThe default debug formatter for <code>Set</code> types.\nCompares a <code>Set</code> with a <code>PartialReflect</code> value.\nSets the type to be represented by this <code>DynamicArray</code>.\nSets the type to be represented by this <code>DynamicList</code>.\nSets the type to be represented by this <code>DynamicMap</code>.\nSets the type to be represented by this <code>DynamicSet</code>.\nSets the type to be represented by this <code>DynamicStruct</code>.\nSets the type to be represented by this <code>DynamicTuple</code>.\nSets the type to be represented by this <code>DynamicTupleStruct</code>.\nSets the type to be represented by this <code>DynamicEnum</code>.\nTries to apply the elements of reflected set <code>b</code> to the …\nSet the current enum variant represented by this struct.\nSet the current enum variant represented by this struct …\nSee <code>TypePath::short_type_path</code>.\nSee <code>TypePath::short_type_path</code>.\nReturns a short, pretty-print enabled path to the type.\nThe default debug formatter for <code>Struct</code> types.\nCompares a <code>Struct</code> with a <code>PartialReflect</code> value.\nDowncasts the value to type <code>T</code>, unboxing and consuming the …\nAttempts to downcast the given value to <code>Self</code> using, …\nTries to <code>apply</code> a reflected value to this value.\nAttempts to cast this type to a fully-reflected value.\nAttempts to cast this type to a mutable, fully-reflected …\nDowncasts the value to type <code>T</code>, consuming the trait object.\nDowncasts the value to type <code>T</code> by mutable reference.\nDowncasts the value to type <code>T</code> by reference.\nAttempts to cast this type to a boxed, fully-reflected …\nDowncasts the value to type <code>T</code>, unboxing and consuming the …\nApplies the elements of <code>b</code> to the corresponding elements of …\nThe default debug formatter for <code>Tuple</code> types.\nCompares a <code>Tuple</code> with a <code>PartialReflect</code> value.\nThe default debug formatter for <code>TupleStruct</code> types.\nCompares a <code>TupleStruct</code> with a <code>PartialReflect</code> value.\nTries to apply the elements of <code>b</code> to the corresponding …\nThe underlying Rust type.\nThe underlying Rust type.\nThe underlying Rust type.\nThe underlying Rust type.\nThe underlying Rust type.\nThe underlying Rust type.\nThe underlying Rust type.\nThe underlying Rust type.\nThe underlying Rust type.\nThe underlying Rust type.\nThe underlying Rust type.\nThe underlying Rust type.\nThe underlying Rust type.\nThe underlying Rust type.\nThe underlying Rust type.\nReturns the <code>TypeId</code> of the type.\nThe <code>TypeId</code> of this type.\nThe <code>TypeId</code> of this type.\nThe <code>TypeId</code> of this type.\nThe <code>TypeId</code> of this type.\nThe <code>TypeId</code> of this type.\nThe <code>TypeId</code> of this type.\nThe <code>TypeId</code> of this type.\nThe <code>TypeId</code> of this type.\nThe <code>TypeId</code> of this type.\nThe <code>TypeId</code> of the underlying type.\nThe <code>TypeId</code> of this type.\nReturns the <code>TypeId</code> that the <code>ReflectFromPtr</code> was constructed …\nThe <code>TypeId</code> of this type.\nThe <code>TypeId</code> of this type.\nThe <code>TypeId</code> of this type.\nThe <code>TypeId</code> of this type.\nReturns the name of the type, or <code>None</code> if it is anonymous.\nReturns the compile-time info for the underlying type.\nReturns a reference to the registration’s <code>TypeInfo</code>\nThe <code>TypeInfo</code> of the field.\nThe <code>TypeInfo</code> of the field.\nReturns the fully qualified path of the underlying type.\nThe stable, full type path of this type.\nThe stable, full type path of this type.\nThe stable, full type path of this type.\nThe stable, full type path of this type.\nThe stable, full type path of this type.\nThe stable, full type path of this type.\nThe stable, full type path of this type.\nThe stable, full type path of this type.\nThe stable, full type path of this type.\nThe stable, full type path of the underlying type.\nThe stable, full type path of this type.\nThe stable, full type path of this type.\nThe stable, full type path of this type.\nThe stable, full type path of this type.\nThe stable, full type path of this type.\nA representation of the type path of this type.\nA representation of the type path of this type.\nA representation of the type path of this type.\nA representation of the type path of this type.\nA representation of the type path of this type.\nA representation of the type path of this type.\nA representation of the type path of this type.\nA representation of the type path of this type.\nA representation of the type path of this type.\nA representation of the type path of the underlying type.\nA representation of the type path of this.\nA representation of the type path of this type.\nA representation of the type path of this type.\nA representation of the type path of this type.\nA representation of the type path of this type.\nA representation of the type path of this type.\nHelpers for working with Bevy reflection.\nThe <code>TypeInfo</code> of the value type.\nThe type of the value type.\nThe type of the value.\nGet a variant with the given name.\nGet a variant at the given index.\nThe index of the current variant.\nThe number of variants in this enum.\nThe name of the current variant.\nA slice containing the names of all variants in order.\nReturns the full path to the current variant.\nReturns the full path to the given variant.\nThe type of the current variant.\nReturns the type of this variant.\nAdds the given generic parameter to the set.\nSets the custom attributes for this field.\nSets the custom attributes for this field.\nSets the custom attributes for this struct.\nSets the custom attributes for this struct.\nSets the custom attributes for this enum.\nSets the custom attributes for this variant.\nSets the custom attributes for this variant.\nSets the custom attributes for this variant.\nSets the default type for the parameter.\nSets the default value for the parameter.\nSets the docstring for this array.\nSets the docstring for this field.\nSets the docstring for this field.\nSets the docstring for this list.\nSets the docstring for this map.\nSets the docstring for this set.\nSets the docstring for this struct.\nSets the docstring for this tuple.\nSets the docstring for this struct.\nSets the docstring for this type.\nSets the docstring for this enum.\nSets the docstring for this variant.\nSets the docstring for this variant.\nSets the docstring for this variant.\nSets the generic parameters for this type.\nSets the generic parameters for this type.\nSets the generic parameters for this type.\nSets the generic parameters for this type.\nSets the generic parameters for this type.\nSets the generic parameters for this type.\nSets the generic parameters for this type.\nSets the generic parameters for this type.\nSets the generic parameters for this type.\nTakes a write lock on the underlying <code>TypeRegistry</code>.\nThe actual <code>ReflectKind</code> that was found.\nThe actual <code>VariantType</code> that was found.\nThe <code>ReflectKind</code> that was expected based on the <code>Access</code>.\nThe <code>VariantType</code> that was expected based on the <code>Access</code>.\nThe underlying error.\nPosition in <code>path</code>.\nThe path that the error occurred in.\nA singular element access within a path. Multiple accesses …\nA name-based field access on a struct.\nA index-based field access on a struct.\nAn index-based access on a list.\nAn index-based access on a tuple.\nA collection of custom attributes for a type, field, or …\nReturns <code>true</code> if this collection contains a custom …\nReturns <code>true</code> if this collection contains a custom …\nReturns the argument unchanged.\nCreates <code>Self</code> using <code>default()</code>.\nGets a custom attribute by type.\nGets a custom attribute by its <code>TypeId</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if this collection is empty.\nReturns an iterator over all custom attributes.\nReturns the number of custom attributes in this collection.\nInserts a custom attribute into the collection.\nAn object-safe equivalent of Serde’s <code>Deserializer</code> trait.\nContains the error value\nError when a <code>Serializer</code> or <code>Deserializer</code> trait object fails.\nContains the success value\nResult type alias where the error is <code>erased_serde::Error</code>.\nAn object-safe equivalent of Serde’s <code>Serialize</code> trait.\nAn object-safe equivalent of Serde’s <code>Serializer</code> trait.\nDeserialize a value of type <code>T</code> from the given trait object.\nConvert any Serde <code>Deserializer</code> to a trait object.\nConvert any Serde <code>Serializer</code> to a trait object.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nSerialize the given type-erased serializable value.\nImplement <code>serde::Serialize</code> for a trait object that has …\nA trait that enables types to be dynamically constructed …\nDerives the <code>FromReflect</code> trait.\nA convenience trait which combines fetching and …\nA trait which allows nested <code>Reflect</code> values to be retrieved …\nA convenience trait which combines fetching and …\nThe foundational trait of <code>bevy_reflect</code>, used for accessing …\nA core trait of <code>bevy_reflect</code>, used for downcasting to …\nThe main derive macro used by <code>bevy_reflect</code> for deriving …\nA struct used to provide the default value of a type.\nA struct used to deserialize reflected instances of a type.\nType data that represents the <code>FromReflect</code> trait and allows …\nSomething that can be interpreted as a reflection path in …\nA struct used to serialize reflected instances of a type.\nA trait used to power struct-like operations via reflection…\nA trait used to power tuple struct-like operations via …\nA static accessor to type paths and names.\nDerives the <code>TypePath</code> trait, providing a stable alternative …\nApplies a reflected value to this value.\nReturns the value as a <code>&amp;dyn Any</code>.\nReturns the value as a <code>&amp;mut dyn Any</code>.\nCasts this type to a reflected value.\nCasts this type to a mutable, reflected value.\nCasts this type to a fully-reflected value.\nCasts this type to a mutable, fully-reflected value.\nClones the struct into a <code>DynamicStruct</code>.\nClones the struct into a <code>DynamicTupleStruct</code>.\nClones the value as a <code>Reflect</code> trait object.\nReturns the name of the crate the type is in, or <code>None</code> if …\nDebug formatter for the value.\nGets a <code>&amp;T</code> to the specified element on the given <code>Reflect</code> …\nGets a <code>&amp;mut T</code> to the specified element on the given <code>Reflect</code>…\nReturns a reference to the value of the field named <code>name</code> …\nReturns a reference to the value of the field with index …\nReturns a reference to the value of the field with index …\nReturns a mutable reference to the value of the field with …\nReturns the number of fields in the struct.\nReturns the number of fields in the tuple struct.\nReturns a mutable reference to the value of the field …\nReturns a mutable reference to the value of the field with …\nReturns the argument unchanged.\nConstructs a concrete instance of <code>Self</code> from a reflected …\nReturns a reference to the value of the field named <code>name</code>, …\nReturns a reference to the value of the field with index …\nReturns a mutable reference to the value of the field …\nReturns a mutable reference to the value of the field with …\nWill return <code>None</code> if <code>TypeInfo</code> is not available.\nWill return <code>None</code> if <code>TypeInfo</code> is not available.\nReturns the <code>TypeInfo</code> of the type <em>represented</em> by this value.\nCalls <code>U::from(self)</code>.\nReturns the value as a <code>Box&lt;dyn Any&gt;</code>.\nCasts this type to a boxed, reflected value.\nCasts this type to a boxed, fully-reflected value.\nIndicates whether or not this type is a <em>dynamic</em> type.\nReturns an iterator over the values of the reflectable …\nReturns an iterator over the values of the tuple struct’…\nReturns the path to the module the type is in, or <code>None</code> if …\nReturns the name of the field with index <code>index</code>.\nReturns a statically typed reference to the value …\nReturns a statically typed mutable reference to the value …\nGets a reference to the specified element on the given …\nGets a mutable reference to the specified element on the …\nReturns a hash of the value (which includes the type).\nReturns a zero-sized enumeration of “kinds” of type.\nReturns a mutable enumeration of “kinds” of type.\nReturns an owned enumeration of “kinds” of type.\nReturns a “partial equality” comparison result.\nReturns a reference to the value specified by <code>path</code>.\nReturns a mutable reference to the value specified by <code>path</code>.\nReturns an immutable enumeration of “kinds” of type.\nA macro that automatically generates type data for traits, …\nReturns a serializable version of the value.\nPerforms a type-checked assignment of a reflected value to …\nReturns a short, pretty-print enabled path to the type.\nAttempts to downcast the given value to <code>Self</code> using, …\nTries to <code>apply</code> a reflected value to this value.\nAttempts to cast this type to a fully-reflected value.\nAttempts to cast this type to a mutable, fully-reflected …\nAttempts to cast this type to a boxed, fully-reflected …\nReturns the name of the type, or <code>None</code> if it is anonymous.\nReturns the fully qualified path of the underlying type.\nTrait used to provide finer control when deserializing a …\nType data used to deserialize a <code>PartialReflect</code> type with a …\nA general purpose deserializer for reflected types.\nAllows overriding the default deserialization behavior of …\nType data used to serialize a <code>Reflect</code> type with a custom …\nA general purpose serializer for reflected types.\nAllows overriding the default serialization behavior of …\nA type-erased serializable value.\nContains data relevant to the automatic reflect powered …\nTrait used to provide finer control when serializing a …\nData needed for (de)serialization of a skipped field.\nA deserializer for type registrations.\nA deserializer for reflected types whose <code>TypeRegistration</code> …\nA serializer for reflected types whose type will be known …\nDeserialize a <code>PartialReflect</code> type with this type data’s …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGenerates a default instance of the skipped field at the …\nGenerates a default instance of the field.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns true if there are no skipped fields.\nReturns true if the given index corresponds to a field …\nReturns an iterator over the skipped fields.\nReturns the number of skipped fields.\nCreates a deserializer with no processor.\nCreates a typed deserializer with no processor.\nCreates a serializer with no processor.\nCreates a serializer with no processor.\nCreates a new <code>SerializationData</code> instance with the given …\nCreate a new <code>SkippedField</code>.\nCreates a new <code>TypedReflectDeserializer</code> for the given type <code>T</code>\nSerialize a <code>Reflect</code> type with this type data’s custom …\nAttempts to deserialize the value which a …\nAttempts to serialize the value which a …\nCreates a deserializer with a processor.\nCreates a typed deserializer with a processor.\nCreates a serializer with a processor.\nCreates a serializer with a processor.\nA struct used to provide the default value of a type.\nA container for <code>TypedProperty</code> over generic types, allowing …\nSee <code>GenericTypeCell</code>.\nSee <code>GenericTypeCell</code>.\nA container for <code>TypeInfo</code> over non-generic types, allowing …\nSee <code>NonGenericTypeCell</code>.\nUsed to store a <code>String</code> in a <code>GenericTypePathCell</code> as part of …\nA type that can be stored in a (<code>Non</code>)<code>GenericTypeCell</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nReturns a reference to the <code>TypedProperty</code> stored in the …\nReturns a reference to the <code>TypedProperty</code> stored in the …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nInitialize a <code>NonGenericTypeCell</code> for non-generic types.\nInitialize a <code>GenericTypeCell</code> for generic types.\nDeterministic fixed state hasher to be used by …\nCleanup render resources here.\nA helper for accessing <code>MainWorld</code> content using a system …\nThis is used for applying the commands from the …\nSchedule which extract data from the main world and …\nThe simulation <code>World</code> of the application, stored as a …\nCreate any additional views such as those used for shadow …\nSort the <code>SortedRenderPhase</code>s and <code>BinKey</code>s here.\nFinal cleanup occurs: all entities will be despawned.\nPrepare render resources from extracted data for the GPU …\nPrepare assets that have been created/modified/removed …\nA sub-set within <code>Prepare</code> for constructing bind groups, or …\nA sub-set within <code>Prepare</code> for initializing buffers, …\nFlush buffers after <code>PrepareResources</code>, but before …\nQueue drawable entities as phase items in render phases …\nA sub-set within <code>Queue</code> where mesh entity queue systems are …\nThe main render schedule.\nActual rendering happens here. In most cases, only the …\nA label for the rendering sub-app.\nContains the default Bevy rendering backend based on wgpu.\nThe systems sets of the default <code>App</code> rendering schedule.\nSets up the base structure of the rendering <code>Schedule</code>.\nInitializes the renderer, sets up the <code>RenderSet</code> and …\nInfrastructure for recording render diagnostics.\nConvenience logic for turning components from the main …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe render prelude.\nThe modular rendering abstraction responsible for queuing, …\nIf <code>true</code>, disables asynchronous pipeline compilation. This …\nCombines the color of the fragments with the colors behind …\nSets how a material’s base color alpha channel is used …\nSpreads the fragment out over a hardware-dependent number …\nThe base color alpha value defines the opacity of the …\nReduce transparency to fully opaque or fully transparent …\nCombines the color of the fragments with the colors behind …\nBase color alpha values are overridden to be fully opaque …\nSimilar to <code>AlphaMode::Blend</code>, however assumes RGB channel …\nThe per-instance data to be inserted into the …\nThe per-instance data that was inserted into the …\nData used for comparison between phase items. If the …\nA trait to support getting data used for batching draw …\nA trait to support getting data used for batching draw …\nAdd this component to mesh entities to disable automatic …\nThe system parameters <code>GetBatchData::get_batch_data</code> needs in\nReturns the argument unchanged.\nGet the per-instance data to be inserted into the …\nPushes <code>gpu_preprocessing::IndirectParameters</code> necessary to …\nGet the per-instance data to be inserted into the …\nReturns the index of the <code>GetFullBatchData::BufferInputData</code> …\nReturns the index of the <code>GetFullBatchData::BufferInputData</code> …\nBatching functionality when GPU preprocessing is in use.\nCalls <code>U::from(self)</code>.\nBatching functionality when GPU preprocessing isn’t in …\nSorts a render phase that uses bins.\nThe GPU buffers holding the data needed to render batches.\nBoth GPU preprocessing and GPU culling are available.\nRecords whether GPU preprocessing and/or GPU culling are …\nThe <code>wgpu</code> indirect parameters structure.\nThe buffer containing the list of <code>IndirectParameters</code>, for …\nNo GPU preprocessing support is available at all.\nOne invocation of the preprocessing shader: i.e. one mesh …\nThe buffer of GPU preprocessing work items for a single …\nGPU preprocessing is available, but GPU culling isn’t.\nFor <code>ArrayIndirectParameters</code>, <code>first_instance</code>; for …\nCreates batches for a render phase that uses bins.\nBatch the items in a sorted render phase, when GPU …\nThe buffer of work items.\nClears out the buffers in preparation for a new frame.\nA system that runs early in extraction and clears out all …\nThe uniform data inputs for the current frame.\nA storage area for the buffer data that the GPU compute …\nA system that removes GPU preprocessing work item buffers …\nFor <code>ArrayIndirectParameters</code>, this is padding; for …\nFor <code>ArrayIndirectParameters</code>, <code>first_vertex</code>; for …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nTrue if we’re using GPU culling.\nThe index of the batch input data in the input buffer that …\nThe number of instances we’re going to draw.\nReturns the binding of the buffer that contains the …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates new buffers.\nCreates the indirect parameters buffer.\nIn direct mode, this is the index of the <code>MeshUniform</code> in …\nThe uniform data inputs for the previous frame.\nFor <code>ArrayIndirectParameters</code>, <code>vertex_count</code>; for …\nThe index of the buffer data in the current input buffer …\nA system that writes all instance buffers to the GPU.\nThe GPU buffers holding the data needed to render batches.\nCreates batches for a render phase that uses bins, when …\nBatch the items in a sorted render phase, when GPU …\nA system that clears out the <code>BatchedInstanceBuffer</code> for the …\nReturns the argument unchanged.\nReturns the binding of the buffer that contains the …\nCalls <code>U::from(self)</code>.\nCreates a new buffer.\nWrites the instance buffer data to the GPU.\nKeeping the aspect ratio while the axes can’t be bigger …\nKeeping the aspect ratio while the axes can’t be smaller …\nThis value was calibrated to match Blender’s …\nThe defining <code>Component</code> for camera entities, storing …\nThis component lets you control the <code>TextureUsages</code> field of …\nControl how this camera outputs once rendering is …\nTrait to control the projection matrix of a camera.\nAdds <code>Camera</code> driver systems for a given projection type.\nConfigures the <code>RenderGraph</code> name assigned to be run for a …\nLabel for <code>camera_system&lt;T&gt;</code>, shared across all <code>T</code>.\nA <code>Resource</code> that stores the color that is used to clear the …\nFor a camera, specifies the color used to clear the …\nHolds internally computed <code>Camera</code> values.\nThe given clear color is used, overriding the <code>ClearColor</code> …\nThe clear color is taken from the world’s <code>ClearColor</code> …\nThis value was calibrated to match Blender’s …\nHow much energy a <code>Camera3d</code> absorbs from incoming light.\nManually specify the projection’s size, ignoring window …\nKeep the projection’s width constant; height will be …\nKeep the projection’s height constant; width will be …\nImage to which the camera’s view is rendered.\nImage to which the camera’s view is rendered.\nThe Normalized Device Coordinates could not be computed …\nA manually managed <code>TextureView</code> for use as a …\nA unique id that corresponds to a specific …\nStores manually managed <code>ManualTextureView</code>s for use as a …\nCamera component specifying a mip bias to apply when …\nThe pre-computed size of the viewport was not available.\nNo clear color is used: the camera will simply draw on top …\nNormalized version of the render target.\nProject a 3D space onto a 2D surface using parallel lines, …\nThe computed coordinate was beyond the <code>Camera</code>’s far …\nThe computed coordinate was beyond the <code>Camera</code>’s near …\nA 3D camera projection in which distant objects appear …\nParameters based on physical camera characteristics for …\nA configurable <code>CameraProjection</code> that can select its …\nThe “target” that a <code>Camera</code> will render to. For …\nInformation about the current <code>RenderTarget</code>.\nScaling mode for <code>OrthographicProjection</code>.\nSkips writing the camera output to the configured render …\nCameras sorted by their order field. This is updated in …\nSettings to define a camera sub view.\nA subpixel offset to jitter a perspective camera’s …\nTexture View to which the camera’s view is rendered. …\nTexture View to which the camera’s view is rendered. …\nRender viewport configuration for the <code>Camera</code> component.\nError returned when a conversion between world-space and …\nWindow to which the camera’s view is rendered.\nWindow to which the camera’s view is rendered.\nMatch the viewport size.\nWrites the camera output to configured render target.\nhttps://en.wikipedia.org/wiki/F-number\nThe area that the projection covers relative to …\nGet a handle to the render target’s image, or <code>None</code> if …\nThe aspect ratio (width divided by height) of the viewing …\nSystem in charge of updating a <code>Camera</code> when its window or …\nThe clear color operation to perform on the render target.\nCompute camera frustum for camera with given projection …\nComputed values for this camera, such as the projection …\nThe minimum and maximum depth to render (on a scale from …\nCalculate the EV100.\n…\nConverts EV100 values to exposure values. …\nThe distance from the camera in world units of the viewing …\nThe distance of the far clipping plane in world units.\nThe vertical field of view (FOV) in radians.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nSize of the entire camera view\nRetrieves the <code>TextureFormat</code> of this render target, if it …\nIf this is set to <code>true</code>, the camera will use an …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIf this is set to <code>true</code>, this camera will be rendered to …\nIf this is enabled, a previous camera exists that shares …\nThe distance from the camera in world units of the viewing …\nThe distance of the near clipping plane in world units.\nCreates a new <code>CameraRenderGraph</code> from any string-like type.\nNormalize the render target down to a more concrete value, …\nOffset of the sub camera\nOffset is in range [-0.5, 0.5].\nCameras with a higher order are rendered later, and thus …\nThe <code>CameraOutputMode</code> for this camera.\nThe physical position to render this viewport to within …\nThe physical size of the viewport rectangle to render to …\nThe physical size of this render target (in physical …\nScales the projection.\nThe scale factor of this render target.\nHow the projection will scale to the viewport.\nhttps://en.wikipedia.org/wiki/Film_speed\nThe height of the image sensor format in meters.\nSets the graph name.\nhttps://en.wikipedia.org/wiki/Shutter_speed\nSize of the sub camera\nIf set, this camera will be a sub camera of a large view, …\nThe “target” that this camera will render to.\nIf set, this camera will render to the given <code>Viewport</code> …\nSpecifies the origin of the viewport as a normalized …\nThe blend state that will be used by the pipeline that …\nThe clear color operation to perform on the final render …\nGuard returned by <code>RecordDiagnostics::pass_span</code>.\nAllows recording diagnostic spans.\nEnables collecting render diagnostics, such as CPU/GPU …\nGuard returned by <code>RecordDiagnostics::time_span</code>.\nEnd the span. You have to provide the same encoder which …\nEnd the span. You have to provide the same encoder which …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates <code>Self</code> using <code>default()</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nBegin a pass span, which will record elapsed CPU and GPU …\nBegin a time span, which will record elapsed CPU and GPU …\nStores all uniforms of the component type.\nStores the index of a uniform inside of <code>ComponentUniforms</code>.\nDescribes how a component gets extracted for rendering.\nImplements <code>ExtractComponent</code> trait for a component.\nThis plugin extracts the components into the render world …\nThe output from extraction.\nECS <code>ReadOnlyQueryData</code> to fetch the components to extract.\nFilters the entities with additional constraints.\nThis plugin prepares the components of the corresponding …\nDefines how the component is transferred into the “…\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nDescribes how to extract data needed for rendering from a …\nThis plugin extracts one or more components into the “…\nStores all extract instances of a type in the render world.\nECS <code>ReadOnlyQueryData</code> to fetch the components to extract.\nFilters the entities with additional constraints.\nDefines how the component is transferred into the “…\nCreates a new <code>ExtractInstancesPlugin</code> that extracts to the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new <code>ExtractInstancesPlugin</code> that unconditionally …\nDescribes how a resource gets extracted for rendering.\nThis plugin extracts the resources into the “render world…\nThis system extracts the resource of the corresponding …\nDefines how the resource is transferred into the “render …\nReturns the argument unchanged.\nCreates <code>Self</code> using <code>default()</code>.\nCalls <code>U::from(self)</code>.\nThe buffer containing the <code>GlobalsUniform</code>\nContains global values useful when writing shaders. …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThis plugin prepares the components of the corresponding …\nReturns the argument unchanged.\nCreates <code>Self</code> using <code>default()</code>.\nCalls <code>U::from(self)</code>.\nA plugin that enables reading back gpu buffers and …\nA component that registers the wrapped handle for gpu …\nAn event that is triggered when a gpu readback is complete.\nCreate a readback component for a buffer using the given …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates <code>Self</code> using <code>default()</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a readback component for a texture using the given …\nConvert the raw bytes of the event to a shader type.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThis error occurs when you try to invert the winding for a …\nA builder for creating a <code>Mesh</code> with an <code>Annulus</code> shape.\nUV space is distributed by how much of the capsule …\nThe center of the base circle\nOur base mesh pipeline key bits start from the highest bit …\nThe center of the bottom circle cap\nA builder used for creating a <code>Mesh</code> with a <code>Capsule2d</code> shape.\nA builder used for creating a <code>Mesh</code> with a <code>Capsule3d</code> shape.\nManner in which UV coordinates are distributed vertically.\nA builder used for creating a <code>Mesh</code> with a <code>Circle</code> shape.\nSpecifies how to generate UV-mappings for the …\nA builder used for creating a <code>Mesh</code> with a <code>CircularSector</code> …\nA builder used for creating a <code>Mesh</code> with a <code>CircularSegment</code> …\nAnchoring options for <code>ConeMeshBuilder</code>\nA builder used for creating a <code>Mesh</code> with a <code>Cone</code> shape.\nA builder used for creating a <code>Mesh</code> with a <code>ConicalFrustum</code> …\nA builder used for creating a <code>Mesh</code> with a <code>ConvexPolygon</code> …\nAnchoring options for <code>CylinderMeshBuilder</code>\nA builder used for creating a <code>Mesh</code> with a <code>Cylinder</code> shape.\nA builder used for creating a <code>Mesh</code> with an <code>Ellipse</code> shape.\nA trait required for implementing <code>Meshable</code> for <code>Extrusion&lt;T&gt;</code>…\nA builder used for creating a <code>Mesh</code> with an <code>Extrusion</code> shape.\nUpper third of the texture goes to the northern …\nThis segment of the perimeter will be shaded flat.\nFailed to generate tangents for the mesh.\nAn icosphere, a spherical mesh that consists of similar …\nAn error when creating an icosphere <code>Mesh</code> from a …\nAn array of indices into the <code>VertexAttributeValues</code> for a …\nVertex data is a list of lines. Each pair of vertices …\nVertex data is a strip of lines. Each set of two adjacent …\nTreats the shape as a mask over a circle of equal size and …\nA 3D object made out of vertices representing triangles, …\nA component for 2D meshes. Requires a <code>MeshMaterial2d</code> to be …\nA component for 3D meshes. Requires a <code>MeshMaterial3d</code> to be …\nA trait used to build <code>Mesh</code>es from a configuration\nAdds the <code>Mesh</code> as an asset and makes sure that they are …\nAn error that occurred while trying to extract a …\nDescribes the layout of the mesh vertices in GPU memory.\nStores the single copy of each mesh vertex buffer layout.\nAn error that occurred while trying to invert the winding …\nA trait for shapes that can be turned into a <code>Mesh</code>.\nMidpoint between the tip of the cone and the center of its …\nMidpoint between the top and bottom caps of the cylinder\nInherit weights from glTF mesh parent entity to direct …\nThe output of <code>Self::mesh</code>. This will be a <code>MeshBuilder</code> used …\nA type representing a segment of the perimeter of an …\nA builder used for creating a <code>Mesh</code> with a <code>Plane3d</code> shape.\nVertex data is a list of points. Each vertex is a new …\nPrimitive type the input mesh is composed of.\nA builder used for creating a <code>Mesh</code> with a <code>Rectangle</code> shape.\nA builder used for creating a <code>Mesh</code> with a <code>RegularPolygon</code> …\nThe render world representation of a <code>Mesh</code>.\nThe index/vertex buffer info of a <code>RenderMesh</code>.\nThis segment of the perimeter will be shaded smooth.\nA type of sphere mesh.\nA builder used for creating a <code>Mesh</code> with an <code>Sphere</code> shape.\nThe Tip of the triangle\nThe icosphere has too many vertices.\nThe center of the top circle cap\nA builder used for creating a <code>Mesh</code> with a <code>Torus</code> shape.\nA builder used for creating a <code>Mesh</code> with a <code>Triangle2d</code> shape.\nVertex data is a list of triangles. Each set of 3 vertices …\nVertex data is a triangle strip. Each set of three …\nHemispheres get UV space according to the ratio of …\nA UV sphere, a spherical mesh that consists of …\nContains an array where each entry describes a property of …\nDescribes how the vertex buffer is interpreted.\nThis error occurs when you try to invert the winding for a …\nGet a flags value with all known bits set.\nManages mesh vertex and index buffers.\nSets a custom anchor point for the mesh\nSets a custom anchor point for the mesh\nThe anchor point for the cone mesh, defaults to the …\nThe anchor point for the cylinder mesh, defaults to the …\nSets a custom angle range in radians instead of a full …\nOptional angle range in radians, defaults to a full circle …\nThe <code>Annulus</code> shape.\nThe stride, in bytes, between elements of this buffer.\nReturns the values as float triples if possible.\nThe list of attributes which comprise a single vertex.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nGet the underlying bits value.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nInformation about the mesh data buffers, including whether …\nBuilds a <code>Mesh</code> based on the configuration in <code>self</code>.\nBuilds a <code>Mesh</code> according to the configuration in <code>self</code>.\nIf set to <code>true</code>, the cylinder caps (flat circle faces) are …\nThe <code>Capsule2d</code> shape.\nThe <code>Capsule3d</code> shape.\nThe <code>Circle</code> shape.\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nCompute the Axis-Aligned Bounding Box of the mesh vertices …\nThe <code>Cone</code> shape.\nWhether all set bits in a source flags value are also set …\nThe <code>Cylinder</code> shape.\nThe intersection of a source flags value with the …\nThe <code>Ellipse</code> shape.\nGet a flags value with all bits unset.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe format of the vertex attribute.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from a bits value.\nConvert from a bits value exactly.\nConvert from a bits value, unsetting any unknown bits.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nCreates a new <code>PlaneMeshBuilder</code> from the given length, with …\nGet a flags value with the bits of a flag with the given …\nCreates a new <code>PlaneMeshBuilder</code> from the given size, with …\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nThe <code>ConicalFrustum</code> shape.\nFlattens the <code>VertexAttributeValues</code> into a sequence of …\nCreates an icosphere mesh with the given number of …\nThe <em>unique</em> id of the vertex attribute. This will also …\nBevy meshes are gltf primitives, <code>MorphWeights</code> on the bevy …\nInserts a new mesh vertex buffer layout in the store and …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nWhether any set bits in a source flags value are also set …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether all known bits in this flags value are set.\nReturns <code>true</code> if there are no indices.\nReturns <code>true</code> if there are no vertices in this …\nWhether all bits in this flags value are unset.\nReturns an iterator over the indices.\nYield a set of contained flags values.\nYield a set of contained named flags values.\nPrecomputed pipeline key bits for this mesh.\nSets the <code>SphereKind</code> that will be used for building the …\nThe type of sphere mesh that will be built.\nSets the number of horizontal lines subdividing the …\nThe number of horizontal lines subdividing the hemispheres …\nA reference to the vertex buffer layout.\nReturns the number of indices.\nReturns the number of vertices in this …\nSets the number of vertical lines subdividing the …\nThe number of vertical lines subdividing the hemispheres …\nSets the number of segments used for the main ring of the …\nThe number of segments used for the main ring of the torus.\nCreates a <code>Mesh</code> for a shape.\nSets the number of vertices used for each circular segment …\nThe number of vertices used for each circular segment in …\nMorph targets for the mesh, if present.\nThe friendly name of the vertex attribute\nCreate an <code>AnnulusMeshBuilder</code> with the given inner radius, …\nCreate a new <code>ExtrusionBuilder&lt;P&gt;</code> from a given <code>base_shape</code> …\nCreates a new <code>CircleMeshBuilder</code> from a given radius and …\nCreates a new <code>CircularSectorMeshBuilder</code> from a given sector\nCreates a new <code>CircularSegmentMeshBuilder</code> from a given …\nCreates a new <code>EllipseMeshBuilder</code> from a given half width …\nCreates a new <code>Capsule2dMeshBuilder</code> from a given radius, …\nCreates a new <code>Capsule3dMeshBuilder</code> from a given radius, …\nCreates a new <code>ConeMeshBuilder</code> from a given radius, height, …\nCreates a new <code>ConicalFrustumMeshBuilder</code> from the given top …\nCreates a new <code>CylinderMeshBuilder</code> from the given radius, a …\nCreates a new <code>PlaneMeshBuilder</code> from a given normal and …\nCreates a new <code>SphereMeshBuilder</code> from a radius and …\nCreates a new <code>TorusMeshBuilder</code> from an inner and outer …\nSets the normal of the plane, aka the direction the plane …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nA list of the indices each representing a part of the …\nThe <code>Plane3d</code> shape.\nConverts the extracted mesh into a <code>RenderMesh</code>.\nReturns the primitive topology of this mesh (triangles, …\nMesh generation for primitive shapes.\nAdd an index. If the index is greater than <code>u16::MAX</code>, the …\nThe intersection of a source flags value with the …\nSets the number of vertices used in constructing the …\nSets the number of vertices used in constructing the …\nSets the number of vertices used for the circle mesh at …\nSets the number of vertices used for the ellipse mesh at …\nSets the number of vertices used for each hemicircle at …\nSets the number of vertices used for the circle mesh.\nSets the number of vertices used for the sector mesh.\nSets the number of vertices used for the segment mesh.\nSets the number of vertices used for the ellipse mesh.\nSets the number of vertices used for one hemicircle. The …\nSets the number of vertices used for the base of the cone.\nSets the number of vertices used for the top and bottom of …\nSets the number of vertices used for the top and bottom of …\nThe number of vertices used in constructing each …\nThe number of vertices used for the circle mesh. The …\nThe number of vertices used for the arc portion of the …\nThe number of vertices used for the arc portion of the …\nThe number of vertices used for the ellipse mesh. The …\nThe number of vertices used for one hemicircle. The total …\nThe number of vertices used for the base of the cone.\nThe number of vertices used for the top and bottom of the …\nThe number of vertices used for the top and bottom of the …\nSets the number of horizontal lines subdividing the …\nThe number of horizontal lines subdividing the cylindrical …\nThe sector shape.\nThe segment shape.\nSets the number of segments along the depth of the …\nSets the number of horizontal lines subdividing the …\nSets the number of segments along the height of the …\nThe number of horizontal lines subdividing the lateral …\nThe number of segments along the height of the cylinder. …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nSets the size of the plane mesh.\nThe <code>Sphere</code> shape.\nHow often this vertex buffer is “stepped” forward.\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nSets the subdivisions of the plane mesh.\nThe number of subdivisions in the mesh.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe <code>Torus</code> shape.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nCreates a UV sphere <code>Mesh</code> with the given number of …\nSets the uv mode used for the sector mesh\nSets the uv mode used for the segment mesh\nThe UV mapping mode\nThe UV mapping mode\nSets the manner in which UV coordinates are distributed …\nThe manner in which UV coordinates are distributed …\nThe number of vertices in the mesh.\nIgnore the cylinder caps, making the mesh a shallow tube …\nAngle by which to rotate the shape when generating the UV …\nThe number of vertices generated. 65535 is the largest …\nThe number of subdivisions used. 79 is the largest allowed …\nThe normal of the first vertex.\nA list of indices representing this segment of the …\nA list of indices representing this segment of the …\nThe normal of the last vertex.\nThe number of longitudinal sectors, aka the horizontal …\nThe number of latitudinal stacks, aka the vertical …\nThe number of subdivisions applied. The number of faces …\nManages the assignment of mesh data to GPU buffers.\nA plugin that manages GPU memory for mesh data.\nTunable parameters that customize the behavior of the …\nThe hardware buffer that mesh data lives in, as well as …\nA system that processes newly-extracted or newly-removed …\nThe buffer that the mesh data resides in.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates <code>Self</code> using <code>default()</code>.\nThe factor by which we scale a slab when growing it.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe maximum size of vertex or index data that can be …\nThe maximum size of a slab (hardware buffer), in bytes.\nReturns the buffer and range within that buffer of the …\nReturns the buffer and range within that buffer of the …\nThe minimum size of a slab (hardware buffer), in bytes.\nThe range of elements within this buffer that the mesh …\nHow many components <code>MorphAttributes</code> has.\nMax target count available for morph targets.\nControl a specific <code>Mesh</code> instance’s morph targets. These …\nAttributes <strong>differences</strong> used for morph targets.\nAn image formatted for use with <code>MorphWeights</code> for rendering …\nControls the morph targets for all child <code>Mesh3d</code> entities. …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGenerate textures for each morph target.\nThe vertex normal difference between base mesh and this …\nThe vertex position difference between base mesh and this …\nThe vertex tangent difference between base mesh and this …\nA builder for creating a <code>Mesh</code> with an <code>Annulus</code> shape.\nUV space is distributed by how much of the capsule …\nThe center of the base circle\nThe center of the bottom circle cap\nA builder used for creating a <code>Mesh</code> with a <code>Capsule2d</code> shape.\nA builder used for creating a <code>Mesh</code> with a <code>Capsule3d</code> shape.\nManner in which UV coordinates are distributed vertically.\nA builder used for creating a <code>Mesh</code> with a <code>Circle</code> shape.\nSpecifies how to generate UV-mappings for the …\nA builder used for creating a <code>Mesh</code> with a <code>CircularSector</code> …\nA builder used for creating a <code>Mesh</code> with a <code>CircularSegment</code> …\nAnchoring options for <code>ConeMeshBuilder</code>\nA builder used for creating a <code>Mesh</code> with a <code>Cone</code> shape.\nA builder used for creating a <code>Mesh</code> with a <code>ConicalFrustum</code> …\nA builder used for creating a <code>Mesh</code> with a <code>ConvexPolygon</code> …\nAnchoring options for <code>CylinderMeshBuilder</code>\nA builder used for creating a <code>Mesh</code> with a <code>Cylinder</code> shape.\nA builder used for creating a <code>Mesh</code> with an <code>Ellipse</code> shape.\nA trait required for implementing <code>Meshable</code> for <code>Extrusion&lt;T&gt;</code>…\nA builder used for creating a <code>Mesh</code> with an <code>Extrusion</code> shape.\nUpper third of the texture goes to the northern …\nThis segment of the perimeter will be shaded flat.\nAn icosphere, a spherical mesh that consists of similar …\nAn error when creating an icosphere <code>Mesh</code> from a …\nTreats the shape as a mask over a circle of equal size and …\nA trait used to build <code>Mesh</code>es from a configuration\nA trait for shapes that can be turned into a <code>Mesh</code>.\nMidpoint between the tip of the cone and the center of its …\nMidpoint between the top and bottom caps of the cylinder\nThe output of <code>Self::mesh</code>. This will be a <code>MeshBuilder</code> used …\nA type representing a segment of the perimeter of an …\nA builder used for creating a <code>Mesh</code> with a <code>Plane3d</code> shape.\nA builder used for creating a <code>Mesh</code> with a <code>Rectangle</code> shape.\nA builder used for creating a <code>Mesh</code> with a <code>RegularPolygon</code> …\nThis segment of the perimeter will be shaded smooth.\nA type of sphere mesh.\nA builder used for creating a <code>Mesh</code> with an <code>Sphere</code> shape.\nThe Tip of the triangle\nThe icosphere has too many vertices.\nThe center of the top circle cap\nA builder used for creating a <code>Mesh</code> with a <code>Torus</code> shape.\nA builder used for creating a <code>Mesh</code> with a <code>Triangle2d</code> shape.\nHemispheres get UV space according to the ratio of …\nA UV sphere, a spherical mesh that consists of …\nThe anchor point for the cone mesh, defaults to the …\nThe anchor point for the cylinder mesh, defaults to the …\nOptional angle range in radians, defaults to a full circle …\nThe <code>Annulus</code> shape.\nBuilds a <code>Mesh</code> based on the configuration in <code>self</code>.\nIf set to <code>true</code>, the cylinder caps (flat circle faces) are …\nThe <code>Capsule2d</code> shape.\nThe <code>Capsule3d</code> shape.\nThe <code>Circle</code> shape.\nThe <code>Cone</code> shape.\nThe <code>Cylinder</code> shape.\nThe <code>Ellipse</code> shape.\nThe <code>ConicalFrustum</code> shape.\nThe type of sphere mesh that will be built.\nThe number of horizontal lines subdividing the hemispheres …\nThe number of vertical lines subdividing the hemispheres …\nThe number of segments used for the main ring of the torus.\nCreates a <code>Mesh</code> for a shape.\nThe number of vertices used for each circular segment in …\nA list of the indices each representing a part of the …\nThe <code>Plane3d</code> shape.\nThe number of vertices used in constructing each …\nThe number of vertices used for the circle mesh. The …\nThe number of vertices used for the arc portion of the …\nThe number of vertices used for the arc portion of the …\nThe number of vertices used for the ellipse mesh. The …\nThe number of vertices used for one hemicircle. The total …\nThe number of vertices used for the base of the cone.\nThe number of vertices used for the top and bottom of the …\nThe number of vertices used for the top and bottom of the …\nThe number of horizontal lines subdividing the cylindrical …\nThe sector shape.\nThe segment shape.\nThe number of horizontal lines subdividing the lateral …\nThe number of segments along the height of the cylinder. …\nThe <code>Sphere</code> shape.\nThe number of subdivisions in the mesh.\nThe <code>Torus</code> shape.\nThe UV mapping mode\nThe UV mapping mode\nThe manner in which UV coordinates are distributed …\nAngle by which to rotate the shape when generating the UV …\nThe number of vertices generated. 65535 is the largest …\nThe number of subdivisions used. 79 is the largest allowed …\nThe normal of the first vertex.\nA list of indices representing this segment of the …\nA list of indices representing this segment of the …\nThe normal of the last vertex.\nThe number of longitudinal sectors, aka the horizontal …\nThe number of latitudinal stacks, aka the vertical …\nThe number of subdivisions applied. The number of faces …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates <code>Self</code> using <code>default()</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe <code>PipelinedRenderingPlugin</code> can be added to your …\nChannels used by the main app to send and receive the …\nA Label for the sub app that runs the parts of pipelined …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates <code>Self</code> using <code>default()</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a <code>RenderAppChannels</code> from a <code>async_channel::Receiver</code> …\nReceive the <code>render_app</code> from the rendering thread. Return …\nSend the <code>render_app</code> to the rendering thread.\nPer vertex coloring. Use in conjunction with …\nPer vertex joint transform matrix index. Use in …\nPer vertex joint transform matrix weight. Use in …\nThe direction the vertex normal is facing in. Use in …\nWhere the vertex is located in space. Use in conjunction …\nThe direction of the vertex tangent. Used for normal …\nTexture coordinates for the vertex. Use in conjunction …\nAlternate texture coordinates for the vertex. Use in …\nCombines the color of the fragments with the colors behind …\nSets how a material’s base color alpha channel is used …\nSpreads the fragment out over a hardware-dependent number …\nThe base color alpha value defines the opacity of the …\nThe defining <code>Component</code> for camera entities, storing …\nA <code>Resource</code> that stores the color that is used to clear the …\nFor a camera, specifies the color used to clear the …\nThe given clear color is used, overriding the <code>ClearColor</code> …\nThe clear color is taken from the world’s <code>ClearColor</code> …\nSchedule which extract data from the main world and …\nAn entity that is invisible in the hierarchy.\nAn entity that cannot be seen from any views.\nAn invisible <code>SpatialBundle</code> with identity transform.\nAn entity with <code>Visibility::Hidden</code> will be unconditionally …\nA <code>SpatialBundle</code> with inherited visibility and identity …\nAdds the <code>Image</code> as an asset and makes sure that they are …\nAn entity with <code>Visibility::Inherited</code> will inherit the …\nWhether or not an entity is visible in the hierarchy. This …\nReduce transparency to fully opaque or fully transparent …\nA 3D object made out of vertices representing triangles, …\nA component for 2D meshes. Requires a <code>MeshMaterial2d</code> to be …\nA component for 3D meshes. Requires a <code>MeshMaterial3d</code> to be …\nA trait used to build <code>Mesh</code>es from a configuration\nA trait for shapes that can be turned into a <code>Mesh</code>.\nControls the morph targets for all child <code>Mesh3d</code> entities. …\nComponent for configuring the number of samples for …\nCombines the color of the fragments with the colors behind …\nNo clear color is used: the camera will simply draw on top …\nBase color alpha values are overridden to be fully opaque …\nProject a 3D space onto a 2D surface using parallel lines, …\nThe output of <code>Self::mesh</code>. This will be a <code>MeshBuilder</code> used …\nA 3D camera projection in which distant objects appear …\nSimilar to <code>AlphaMode::Blend</code>, however assumes RGB channel …\nA configurable <code>CameraProjection</code> that can select its …\nA shader, as defined by its <code>ShaderSource</code> and <code>ShaderStage</code> …\nA <code>Bundle</code> that allows the correct positional rendering of …\nAn entity that is visible in the hierarchy.\nAlgorithmically-computed indication of whether an entity …\nUser indication of whether an entity is visible. …\nA <code>Bundle</code> of the <code>Visibility</code>, <code>InheritedVisibility</code>, and …\nAn entity with <code>Visibility::Visible</code> will be unconditionally …\nThe area that the projection covers relative to …\nThe aspect ratio (width divided by height) of the viewing …\nRetrieves the data currently set to the vertex attribute …\nRetrieves the data currently set to the vertex attribute …\nReturns an iterator that yields references to the data of …\nReturns an iterator that yields mutable references to the …\nBuilds a <code>Mesh</code> based on the configuration in <code>self</code>.\nThe clear color operation to perform on the render target.\nThe projection matrix computed using this camera’s …\nCalculates the <code>Mesh::ATTRIBUTE_NORMAL</code> of a mesh.\nCalculates the <code>Mesh::ATTRIBUTE_NORMAL</code> of a mesh. If the …\nCalculates the <code>Mesh::ATTRIBUTE_NORMAL</code> of an indexed mesh, …\nComputed values for this camera, such as the projection …\nCounts all vertices of the mesh.\nComputes and returns the vertex data of the mesh as bytes. …\nReturns the default orthographic projection for a 2D …\nReturns the default orthographic projection for a 3D …\nCreates image settings with linear sampling by default.\nCreates image settings with nearest sampling by default.\nThe default image sampler to use when …\nConverts the depth in Normalized Device Coordinates to …\nConverts the depth in Normalized Device Coordinates to …\nDuplicates the vertex attributes so that no vertices are …\nThe distance from the camera in world units of the viewing …\nThe distance of the far clipping plane in world units.\nThe first child <code>Mesh3d</code> primitive controlled by these …\nThe vertical field of view (FOV) in radians.\nConverts this sector into a <code>Mesh</code> using a default …\nConverts this sector into a <code>Mesh</code> using a default …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a new <code>SpatialBundle</code> from a <code>Transform</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nGenerate tangents for the mesh using the <code>mikktspace</code> …\nReturns <code>true</code> if the entity is visible in the hierarchy. …\nReturns <code>true</code> if the entity is visible in any view. …\nComputes and returns the index data of the mesh as bytes. …\nGet this <code>Mesh</code>’s <code>MeshVertexBufferLayout</code>, used in …\nReturns the size required for the vertex buffer in bytes.\nReturns the size of a vertex in bytes.\nThe global transform of the entity.\nWhether this mesh has morph targets.\nIf this is set to <code>true</code>, the camera will use an …\nRetrieves the vertex <code>indices</code> of the mesh.\nRetrieves the vertex <code>indices</code> of the mesh mutably.\nThe inherited visibility of the entity.\nSets the data for a vertex attribute (position, normal, …\nSets the vertex indices of the mesh. They describe how …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nInverts the winding of the indices such that all …\nIf this is set to <code>true</code>, this camera will be rendered to …\nThe full logical size of this camera’s <code>RenderTarget</code>, …\nThe rendered logical bounds <code>Rect</code> of the camera. If the …\nThe logical size of this camera’s viewport. If the …\nMerges the <code>Mesh</code> data of <code>other</code> with <code>self</code>. The attributes …\nCreates a <code>Mesh</code> for a shape.\nGets a list of all morph target names, if they exist.\nIf this is enabled, a previous camera exists that shares …\nGiven a position in Normalized Device Coordinates, use the …\nThe distance from the camera in world units of the viewing …\nThe distance of the near clipping plane in world units.\nConstruct a new mesh. You need to provide a …\nNormalize joint weights so they sum to 1.\nCameras with a higher order are rendered later, and thus …\nThe <code>CameraOutputMode</code> for this camera.\nThe full physical size of this camera’s <code>RenderTarget</code> (in …\nThe rendered physical bounds <code>URect</code> of the camera. If the …\nThe physical size of this camera’s viewport (in physical …\nReturns the topology of the mesh.\nRemoves the data for a vertex attribute\nRemoves the vertex <code>indices</code> from the mesh and returns them.\nRotates the vertex positions, normals, and tangents of the …\nRotates the vertex positions, normals, and tangents of the …\nScales the projection.\nScales the vertex positions, normals, and tangents of the …\nScales the vertex positions, normals, and tangents of the …\nHow the projection will scale to the viewport.\nSets the visibility to <code>true</code>. This should not be considered …\nSets the names of each morph target. This should …\nSet morph targets image for this mesh. This requires a “…\nIf set, this camera will be a sub camera of a large view, …\nThe “target” that this camera will render to.\nConverts a physical size in this <code>Camera</code> to a logical size.\nToggles between <code>Visibility::Inherited</code> and …\nToggles between <code>Visibility::Inherited</code> and …\nToggles between <code>Visibility::Visible</code> and <code>Visibility::Hidden</code>.\nThe transform of the entity.\nTransforms the vertex positions, normals, and tangents of …\nTransforms the vertex positions, normals, and tangents of …\nTranslates the vertex positions of the mesh in place by …\nTranslates the vertex positions of the mesh by the given …\nGet a list of this Mesh’s triangles as an iterator if …\nThe view visibility of the entity.\nIf set, this camera will render to the given <code>Viewport</code> …\nSpecifies the origin of the viewport as a normalized …\nReturns a ray originating from the camera, that passes …\nReturns a 2D world position computed from a position on …\nThe visibility of the entity.\nThe visibility of the entity.\nConsumes the mesh and returns a mesh with calculated …\nConsumes the mesh and returns a mesh with calculated …\nConsumes the mesh and returns a mesh with calculated …\nConsumes the mesh and returns a mesh with no shared …\nConsumes the mesh and returns a mesh with tangents …\nConsumes the mesh and returns a mesh with data set for a …\nConsumes the mesh and returns a mesh with the given vertex …\nConsumes the mesh and returns a mesh with inverted winding …\nConsumes the mesh and returns a mesh with morph target …\nConsumes the mesh and returns a mesh with the given morph …\nConsumes the mesh and returns a mesh without the data for …\nConsumes the mesh and returns a mesh without the vertex …\nGiven a position in world space, use the camera’s …\nGiven a position in world space, use the camera to compute …\nGiven a position in world space, use the camera to compute …\nComputes and write the vertex data of the mesh into a …\nAn axis-aligned bounding box, defined by:\nA region of 3D space defined by the intersection of 6 …\nA region of 3D space, specifically an open set whose …\nReturns the signed distance from the bisecting plane to …\nReturns a bounding box enclosing the specified set of …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns a frustum derived from <code>clip_from_world</code>.\nReturns a frustum derived from <code>clip_from_world</code>, but with a …\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nChecks if an Oriented Bounding Box (obb) intersects the …\nChecks if a sphere intersects the frustum.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConstructs a <code>HalfSpace</code> from a 4D vector whose first 3 …\nReturns the unit normal vector of the bisecting plane that …\nReturns the bisecting plane’s unit normal vector and the …\nCalculate the relative radius of the AABB with respect to …\nTemporarily stores the extracted and removed assets of the …\nSpecifies all ECS data required by …\nAll assets that should be prepared next frame.\nDescribes how an asset gets extracted and prepared for …\nA resource that attempts to limit the amount of data …\nThis plugin extracts the changed assets from the “app …\nDefines where the asset will be used.\nStores all GPU representations (<code>RenderAsset</code>) of …\nThe representation of the asset in the “main world”.\nIDs of the assets added this frame.\nGet a flags value with all known bits set.\nWhether or not to unload the asset after extracting it to …\ncheck how many bytes are available since the last reset\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nGet the underlying bits value.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nSize of the data the asset will upload to the gpu. …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nWhether all set bits in a source flags value are also set …\nReturns the default render asset usage flags: …\nThe intersection of a source flags value with the …\nGet a flags value with all bits unset.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe assets extracted this frame.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from a bits value.\nConvert from a bits value exactly.\nConvert from a bits value, unsetting any unknown bits.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nGet a flags value with the bits of a flag with the given …\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nWhether any set bits in a source flags value are also set …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether all known bits in this flags value are set.\nWhether all bits in this flags value are unset.\nYield a set of contained flags values.\nYield a set of contained named flags values.\n<code>max_bytes</code>: the number of bytes to write per frame. this is …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nPrepares the <code>RenderAsset::SourceAsset</code> for the GPU by …\nThis system prepares all assets of the corresponding …\nThe intersection of a source flags value with the …\nIDs of the assets removed this frame.\nReset the available bytes. Called once per frame by the …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nA GPU-accessible <code>Buffer</code>.\nA GPU-accessible <code>Buffer</code>.\nAn object safe version of <code>Eq</code>. This trait is automatically …\nAn edge, which connects two <code>Nodes</code> in a <code>RenderGraph</code>.\nA collection of input and output <code>Edges</code> for a <code>Node</code>.\nA <code>Node</code> without any inputs, outputs and subgraphs, which …\nAn entity from the ECS.\nAn entity from the ECS.\nThe label for the input node of a graph. Used to connect …\nA <code>Node</code> which acts as an entry point for a <code>RenderGraph</code> with …\nA shorthand for <code>Interned&lt;dyn RenderLabel&gt;</code>.\nA shorthand for <code>Interned&lt;dyn RenderSubGraph&gt;</code>.\nA render node that can be added to a <code>RenderGraph</code>.\nAn edge describing to ordering of both nodes (<code>output_node</code> …\nThe internal representation of a <code>Node</code>, with all data …\nThe render graph configures the modular and re-usable …\nAdds common <code>RenderGraph</code> operations to <code>SubApp</code> (and <code>App</code>).\nThe context with all graph information required to run a …\nA strongly-typed class of labels used to identify a <code>Node</code> …\nDerive macro generating an impl of the trait <code>RenderLabel</code>.\nA strongly-typed class of labels used to identify a […\nDerive macro generating an impl of the trait <code>RenderSubGraph</code>…\nA <code>RenderGraph</code> <code>Node</code> that runs the configured subgraph once. …\nA command that signals the graph runner to run the sub …\nA texture <code>Sampler</code> defines how a pipeline will sample from …\nA texture <code>Sampler</code> defines how a pipeline will sample from …\nAn edge describing to ordering of both nodes (<code>output_node</code> …\nThe internal representation of a slot, which specifies its …\nA collection of input or output <code>SlotInfos</code> for a <code>NodeState</code>.\nA <code>SlotLabel</code> is used to reference a slot by either its name …\nDescribes the render resources created (output) or used …\nA value passed between render <code>Nodes</code>. Corresponds to the …\nA <code>TextureView</code> describes a texture used in a pipeline.\nA <code>TextureView</code> describes a texture used in a pipeline.\nThis trait should be used instead of the <code>Node</code> trait when …\nThis <code>Node</code> can be used to run any <code>ViewNode</code>. It will take …\nThe query that will be used on the view entity. It is …\nAdds the <code>node</code> with the <code>label</code> to the graph. If the label is …\nAdds the <code>Edge::NodeEdge</code> to the graph. This guarantees that …\nAdd <code>node_edge</code>s based on the order of the given <code>edges</code> array.\nAdd node edge to the specified graph\nAutomatically add the required node edges based on the …\nAdd a <code>Node</code> to the <code>RenderGraph</code>:\nAdds the <code>Edge::SlotEdge</code> to the graph. This guarantees that …\nAdds the <code>sub_graph</code> with the <code>label</code> to the graph. If the …\nCasts the type to <code>dyn Any</code>.\nCasts this value to a form where it can be compared with …\nCasts this value to a form where it can be compared with …\nReturns a boxed object from a boxed trait object if the …\nReturns a mutable reference to the object within the trait …\nReturns an <code>Rc</code>-ed object from an <code>Rc</code>-ed trait object if the …\nReturns a reference to the object within the trait object …\nClones this <code>RenderSubGraph</code>.\nClones this <code>RenderLabel</code>.\nThis method tests for <code>self</code> and <code>other</code> values to be equal.\nFeeds this value into the given [<code>Hasher</code>].\nFeeds this value into the given [<code>Hasher</code>].\nFinishes the context for this <code>Node</code> by returning the sub …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nRetrieves the input slot value referenced by the <code>label</code>.\nRetrieves the input slot value referenced by the <code>label</code> as …\nRetrieves the input slot value referenced by the <code>label</code> as …\nReturns the id of the <code>input_node</code>.\nReturns the <code>NodeState</code> of the input node of this graph.\nRetrieves the input slot value referenced by the <code>label</code> as …\nSearches the <code>input_edges</code> for a <code>Edge::SlotEdge</code>, which …\nRetrieves the input slot value referenced by the <code>label</code> as …\nRetrieves the <code>Node</code> referenced by the <code>label</code>.\nRetrieves the <code>Node</code> referenced by the <code>label</code> mutably.\nRetrieves the <code>NodeState</code> referenced by the <code>label</code>.\nRetrieves the <code>NodeState</code> referenced by the <code>label</code> mutably.\nReturns the id of the <code>output_node</code>.\nSearches the <code>output_edges</code> for a <code>Edge::SlotEdge</code>, which …\nRetrieves the <code>SlotInfo</code> for the provided label.\nRetrieves the index (inside input or output slots) of the …\nRetrieves the <code>SlotInfo</code> for the provided label mutably.\nRetrieves the sub graph corresponding to the <code>label</code>.\nRetrieves the sub graph corresponding to the <code>label</code> mutably.\nChecks whether the <code>edge</code> already exists in the graph.\nChecks whether the input edge already exists.\nChecks whether the output edge already exists.\nSpecifies the required input slots for this node. They …\nReturns all “input edges” (edges going “in”) for …\nReturns the <code>SlotInfos</code> of the inputs.\nReturns the <code>NodeState</code> of the input node of this graph.\nReturns the input slot values for the node.\nReturns an <code>Interned</code> value corresponding to <code>self</code>.\nReturns an <code>Interned</code> value corresponding to <code>self</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns true if the trait object wraps an object of type …\nReturns true if there are no slots.\nReturns an iterator over the slot infos.\nReturns an iterator over a tuple of the input edges and …\nReturns an iterator over a tuple of the output edges and …\nReturns an iterator over the <code>NodeStates</code>.\nReturns an iterator over the <code>NodeStates</code>, that allows …\nReturns an iterator over the sub graphs.\nReturns an iterator over the sub graphs, that allows …\nReturns this node’s label.\nReturns the count of slots.\nCreates a new render graph context for the <code>node</code>.\nCreates an <code>NodeState</code> without edges, but the <code>input_slots</code> …\nRetrieves the <code>Node</code>.\nRetrieves the <code>Node</code> mutably.\nSpecifies the produced output slots for this node. They …\nReturns all “output edges” (edges going “out”) for …\nReturns the <code>SlotInfos</code> of the outputs.\nRemoves the <code>node</code> with the <code>label</code> from the graph. If the …\nRemoves the <code>Edge::NodeEdge</code> from the graph. If either node …\nRemoves the <code>Edge::SlotEdge</code> from the graph. If any nodes or …\nRemoves the <code>sub_graph</code> with the <code>label</code> from the graph. If …\nRuns the graph node logic, issues draw calls, updates the …\nRuns the graph node logic, issues draw calls, updates the …\nQueues up a sub graph for execution after the node has …\nCreates an <code>GraphInputNode</code> with the specified slots if not …\nSets the output slot value referenced by the <code>label</code>.\nReturns the <code>SlotType</code> of this value.\nRetrieves the sub graph corresponding to the <code>label</code>.\nRetrieves the sub graph corresponding to the <code>label</code> mutably.\nAdds the <code>Edge::NodeEdge</code> to the graph. This guarantees that …\nAdds the <code>Edge::SlotEdge</code> to the graph. This guarantees that …")