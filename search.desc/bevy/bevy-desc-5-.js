searchState.loadedDescShard("bevy", 5, "Returns a vector containing the saturating subtraction of …\nReturns a vector containing the saturating subtraction of …\nCreates a vector from the elements in <code>if_true</code> and <code>if_false</code>…\nCreates a vector from the elements in <code>if_true</code> and <code>if_false</code>…\nCreates a vector from the elements in <code>if_true</code> and <code>if_false</code>…\nReturns a vector with elements representing the sign of …\nReturns a vector with elements representing the sign of …\nReturns a vector with elements representing the sign of …\nCreates a vector with all elements set to <code>v</code>.\nCreates a vector with all elements set to <code>v</code>.\nCreates a vector with all elements set to <code>v</code>.\n<code>[x, y]</code>\n<code>[x, y, z]</code>\n<code>[x, y, z, w]</code>\nCreates a 2D vector from the <code>x</code> and <code>y</code> elements of <code>self</code>, …\nCreates a 3D vector from the <code>x</code>, <code>y</code> and <code>z</code> elements of <code>self</code>, …\nCreates a 4D vector from <code>self</code> with the given value of <code>w</code>.\nCreates a 2D vector from <code>self</code> with the given value of <code>x</code>.\nCreates a 3D vector from <code>self</code> with the given value of <code>x</code>.\nCreates a 4D vector from <code>self</code> with the given value of <code>x</code>.\nCreates a 2D vector from <code>self</code> with the given value of <code>y</code>.\nCreates a 3D vector from <code>self</code> with the given value of <code>y</code>.\nCreates a 4D vector from <code>self</code> with the given value of <code>y</code>.\nCreates a 3D vector from <code>self</code> with the given value of <code>z</code>.\nCreates a 4D vector from <code>self</code> with the given value of <code>z</code>.\nReturns a vector containing the wrapping addition of <code>self</code> …\nReturns a vector containing the wrapping addition of <code>self</code> …\nReturns a vector containing the wrapping addition of <code>self</code> …\nReturns a vector containing the wrapping addition of <code>self</code> …\nReturns a vector containing the wrapping addition of <code>self</code> …\nReturns a vector containing the wrapping addition of <code>self</code> …\nReturns a vector containing the wrapping division of <code>self</code> …\nReturns a vector containing the wrapping division of <code>self</code> …\nReturns a vector containing the wrapping division of <code>self</code> …\nReturns a vector containing the wrapping multiplication of …\nReturns a vector containing the wrapping multiplication of …\nReturns a vector containing the wrapping multiplication of …\nReturns a vector containing the wrapping subtraction of …\nReturns a vector containing the wrapping subtraction of …\nReturns a vector containing the wrapping subtraction of …\nReturns a vector containing the wrapping subtraction of …\nReturns a vector containing the wrapping subtraction of …\nReturns a vector containing the wrapping subtraction of …\nWrites the elements of <code>self</code> to the first 2 elements in …\nWrites the elements of <code>self</code> to the first 3 elements in …\nWrites the elements of <code>self</code> to the first 4 elements in …\nA 2-dimensional vector.\nA 3-dimensional vector.\nA 4-dimensional vector.\nCreates a 2-dimensional vector.\nCreates a 3-dimensional vector.\nCreates a 4-dimensional vector.\nA 2-dimensional vector.\nA 3-dimensional vector.\nA 4-dimensional vector.\nCreates a 2-dimensional vector.\nCreates a 3-dimensional vector.\nCreates a 4-dimensional vector.\nA primitive shape formed by the region between two …\nA primitive representing an arc between two points on a …\nA 2-dimensional <code>bool</code> vector mask.\nA 3-dimensional <code>bool</code> vector mask.\nA 4-dimensional <code>bool</code> vector mask.\n<code>f(t) = 2.70158 * t³ - 1.70158 * t²</code>\nBehaves as <code>EaseFunction::BackIn</code> for t &lt; 0.5 and as …\n<code>f(t) = 1.0 +  2.70158 * (t - 1.0)³ - 1.70158 * (t - 1.0)²</code>\nbouncy at the start!\nBehaves as <code>EaseFunction::BounceIn</code> for t &lt; 0.5 and as …\nbouncy at the end!\nA polygon with a variable number of vertices, allocated on …\nA series of connected line segments in 2D space, allocated …\nA series of connected line segments in 3D space, allocated …\nA 2D capsule primitive, also known as a stadium or pill …\nA 3D capsule primitive centered on the origin A …\nThe curve that results from chaining one curve with …\nAn error indicating that an end-to-end composition couldn…\nA circle primitive, representing the set of points some …\n<code>f(t) = 1.0 - sqrt(1.0 - t²)</code>\nBehaves as <code>EaseFunction::CircularIn</code> for t &lt; 0.5 and as …\n<code>f(t) = sqrt((2.0 - t) * t)</code>\nA primitive representing a circular sector: a pie slice of …\nA primitive representing a circular segment: the area …\nA clockwise winding order\nThe created polygon is not convex.\nA cone primitive centered on the midpoint between the tip …\nA conical frustum primitive. A conical frustum can be …\nA curve with a constant value over its domain.\nThe provided knots were all equal. Knots must contain at …\nThe curve that results from chaining two curves.\nA convex polygon with <code>N</code> vertices.\nAn error that happens when creating a <code>ConvexPolygon</code>.\nA counterclockwise winding order\nA spline interpolated continuously across the nearest four …\nA spline composed of a single cubic Bezier curve.\nA spline interpolated continuously across the nearest four …\nA collection of <code>CubicSegment</code>s chained into a single …\nImplement this on cubic splines that can generate a cubic …\nA spline interpolated continuously between the nearest two …\n<code>f(t) = t³</code>\nBehaves as <code>EaseFunction::CubicIn</code> for t &lt; 0.5 and as …\nNon-uniform Rational B-Splines (NURBS) are a powerful …\nError during construction of <code>CubicNurbs</code>\n<code>f(t) = (t - 1.0)³ + 1.0</code>\nA segment of a cubic curve, used to hold precomputed …\nA cuboid primitive, which is like a cube, except that the …\nA trait for a type that can represent values of type <code>T</code> …\nA curve that has been reparametrized by another curve, …\nImplement this on cubic splines that can generate a cyclic …\nA cylinder primitive centered on the origin\nThe provided knots had a descending knot pair. Subsequent …\nA normalized vector pointing in a direction in 2D space\nA normalized vector pointing in a direction in 3D space\nA normalized SIMD vector pointing in a direction in 3D …\nAn interval which stretches across the entire real line …\nA type whose values can be eased between.\nCurve functions over the unit interval, commonly used for …\nA <code>Curve</code> that is defined by\n…\n…\nBehaves as <code>EaseFunction::ElasticIn</code> for t &lt; 0.5 and as …\n…\nAn ellipse primitive, which is like a circle, but the …\nAn error type indicating why construction might fail.\nAn error type indicating why construction might fail.\nAn error type indicating why construction might fail.\nEuler rotation sequences.\n<code>f(t) = 2.0^(10.0 * (t - 1.0))</code>\nBehaves as <code>EaseFunction::ExponentialIn</code> for t &lt; 0.5 and as …\n<code>f(t) = 1.0 - 2.0^(-10.0 * t)</code>\nA 3D shape representing an extruded 2D <code>base_shape</code>.\nThe right endpoint of the first curve was infinite.\nA trait for extending <code>f32</code> and <code>f64</code> with extra methods.\nThe curve that results from repeating a curve forever.\nErgonomics trait for a type with a <code>Standard</code> distribution, …\nA curve defined by a function together with a fixed domain.\nA curve that is the graph of another curve over its …\nA torus that has no hole but also doesn’t intersect …\nA rectangle defined by two opposite corners.\nA 2-dimensional vector.\nA 3-dimensional vector.\nA 4-dimensional vector.\nAn unbounded plane in 3D space. It forms a separating …\nA nonempty closed interval, possibly unbounded in either …\nA torus with non-geometric properties like a minor or …\nAn invalid winding order indicating that it could not be …\nAn isometry in two dimensions, representing a rotation …\nAn isometry in three dimensions, representing a rotation …\nProvided the wrong number of knots.\nAn infinite line going through the origin along a …\nAn infinite line going through the origin along a …\n<code>f(t) = t</code>\nA curve that has had its domain changed by a linear …\nAn error indicating that a linear reparametrization couldn…\nA curve whose samples are defined by mapping samples from …\nA 2x2 column major matrix.\nA 3x3 column major matrix.\nA 4x4 column major matrix.\nA trait for getting measurements of 2D shapes\nA trait for getting measurements of 3D shapes\nThe number of control points provided is less than 4.\nThis resampling operation was not provided with enough …\nThe type of vector returned by the sample methods, <code>Vec2</code> …\nThe curve that results from chaining a curve with its …\nAn error indicating that a ping ponging of a curve couldn…\nAn unbounded plane in 2D space. It forms a separating …\nA bounded plane in 3D space. It forms a surface starting …\nA polygon with N vertices.\nA series of connected line segments in 2D space.\nA series of connected line segments in 3D space.\nA marker trait for 2D primitives\nA marker trait for 3D primitives\n<code>f(t) = t²</code>\nBehaves as <code>EaseFunction::QuadraticIn</code> for t &lt; 0.5 and as …\n<code>f(t) = -(t * (t - 2.0))</code>\n<code>f(t) = t⁴</code>\nBehaves as <code>EaseFunction::QuarticIn</code> for t &lt; 0.5 and as …\n<code>f(t) = (t - 1.0)³ * (1.0 - t) + 1.0</code>\nA quaternion representing an orientation.\n<code>f(t) = t⁵</code>\nBehaves as <code>EaseFunction::QuinticIn</code> for t &lt; 0.5 and as …\n<code>f(t) = (t - 1.0)⁵ + 1.0</code>\nA collection of <code>RationalSegment</code>s chained into a single …\nImplement this on cubic splines that can generate a …\nA segment of a rational cubic curve, used to hold …\nAn infinite half-line starting at <code>origin</code> and going in …\nAn infinite half-line starting at <code>origin</code> and going in …\nA rectangle defined by two opposite corners.\nA rectangle primitive, which is like a square, except that …\nA polygon centered on the origin where all vertices lie on …\nA curve whose sample space is mapped onto that of some …\nThe curve that results from repeating a curve <code>N</code> times.\nAn error indicating that a repetition of a curve couldn’…\nAn error indicating that a resampling operation could not …\nThe curve that results from reversing another.\nAn error indicating that a reversion of a curve couldn’t …\nA rhombus primitive, also known as a diamond shape. A four …\nA torus that has a ring. The major radius is greater than …\nA counterclockwise 2D rotation.\nA curve that is defined by neighbor interpolation over a …\nA curve that is defined by explicit neighbor interpolation …\nThe left endpoint of the second curve was infinite.\nA segment of a line going through the origin along a …\nA segment of a line going through the origin along a …\nExposes methods to uniformly sample a variety of primitive …\n<code>f(t) = 1.0 - cos(t * π / 2.0)</code>\nBehaves as <code>EaseFunction::SineIn</code> for t &lt; 0.5 and as …\n<code>f(t) = sin(t * π / 2.0)</code>\nThe source curve that was to be reparametrized had …\nThe source curve that was to be reversed had unbounded …\nThe source curve that was to be ping ponged had unbounded …\nThe source curve that was to be repeated had unbounded …\nA sphere primitive, representing the set of all points …\nA self-intersecting torus. The major radius is less than …\nA type with a natural interpolation that provides strong …\n<code>n</code> steps connecting the start and the end\nThe target interval for reparametrization was unbounded.\nA tetrahedron primitive.\nA torus primitive, often representing a ring or donut shape\nThe type of torus determined by the minor and major radii\nA triangle in 2D space\nA 3D triangle primitive.\nAn interval of length 1.0, starting at 0.0 and ending at …\nA rectangle defined by two opposite corners.\nA 2-dimensional vector.\nA 3-dimensional vector.\nA 4-dimensional vector.\nThis resampling operation failed because of an unbounded …\nA curve that is defined by interpolation over unevenly …\nA curve that is defined by interpolation over unevenly …\nA 2-dimensional vector.\nA 3-dimensional vector.\nA 4-dimensional vector.\nProvided a different number of weights and control points.\nThe winding order for a set of points\nIntrinsic two-axis rotation XYX\nExtrinsic two-axis rotation XYX\nIntrinsic three-axis rotation XYZ\nExtrinsic three-axis rotation XYZ\nIntrinsic two-axis rotation XZX\nExtrinsic two-axis rotation XZX\nIntrinsic three-axis rotation XZY\nExtrinsic three-axis rotation XZY\nIntrinsic two-axis rotation YXY\nExtrinsic two-axis rotation YXY\nIntrinsic three-axis rotation YXZ\nExtrinsic three-axis rotation YXZ\nIntrinsic three-axis rotation YZX\nExtrinsic three-axis rotation YZX\nIntrinsic two-axis rotation YZY\nExtrinsic two-axis rotation YZY\nIntrinsic three-axis rotation ZXY\nExtrinsic three-axis rotation ZXY\nIntrinsic two-axis rotation ZXZ\nExtrinsic two-axis rotation ZXZ\nIntrinsic three-axis rotation ZYX\nExtrinsic three-axis rotation ZYX\nIntrinsic two-axis rotation ZYZ\nExtrinsic two-axis rotation ZYZ\nA curve that combines the output data from two constituent …\nGet the bounding box of the triangle.\nInstantaneous acceleration of a point at parametric value <code>t</code>…\nCompute the second derivative with respect to t at <code>t</code>. This …\nInstantaneous acceleration of a point at parametric value <code>t</code>…\nCompute the second derivative with respect to t at <code>t</code>. This …\nGet the angle of the arc\nGet the angle of the sector\nGet the angle of the segment\nGet the length of the apothem of this arc, that is, the …\nGet the length of the apothem of this sector\nGet the length of the apothem of this segment, which is …\nThe arc defining the sector\nThe arc defining the segment\nGet the length of the arc defining the sector\nGet the length of the arc defining the segment\nGet the area of the shape\nGet the surface area of the shape\nGet the area of the circle\nGet the area of the ellipse\nGet the area of the annulus\nGet the area of the rhombus\nGet the area of the triangle\nGet the area of the rectangle\nGet the area of the regular polygon\nGet the area of the capsule\nGet the surface area of the sphere\nGet the surface area of the cuboid\nGet the total surface area of the cylinder\nGet the surface area of the capsule\nGet the total surface area of the cone\nGet the surface area of the torus. Note that this only …\nGet the area of the triangle.\nGet the surface area of the tetrahedron.\nGet the surface area of the extrusion\nGet the base of the cylinder as a <code>Circle</code>\nGet the base of the cone as a <code>Circle</code>\nGet the surface area of one base of the cylinder\nGet the surface area of the base of the cone\nThe base shape of the extrusion\nExtract a <code>Distribution</code> whose samples are points of this …\nGet the bounding sphere of the triangle.\nBorrow this curve rather than taking ownership of it. This …\nGet the centroid of the triangle.\nGet the centroid of the tetrahedron.\nCreate a new <code>Curve</code> by composing this curve end-to-start …\nCreate a new <code>Curve</code> by composing this curve end-to-start …\nGet the distance between the endpoints (the length of the …\nGet the length of the chord defined by the sector\nGet the length of the segment’s base, also known as its …\nGet the midpoint of the two endpoints (the midpoint of the …\nGet the midpoint of the chord defined by the sector\nGet the midpoint of the segment’s base, also known as …\nGet the circumcenter of the triangle.\nCompute the circle passing through all three vertices of …\nThe circumcircle on which all vertices lie\nGet the radius of the circumcircle on which all vertices …\nGet the radius of the circumcircle on which all vertices …\nClamp the given <code>value</code> to lie within this interval.\nFinds the point on the circle that is closest to the given …\nFinds the point on the annulus that is closest to the …\nFinds the point on the rhombus that is closest to the …\nFinds the point on the rectangle that is closest to the …\nFinds the point on the sphere that is closest to the given …\nFinds the point on the cuboid that is closest to the given …\nPolynomial coefficients for the segment.\nThe coefficients matrix of the cubic curve.\nReturns <code>true</code> if <code>item</code> is contained in this interval.\nReturns <code>true</code> if the other interval is contained in this …\nThe control points of the Bezier curve.\nThe control points of the Hermite curve.\nThe control points of the Cardinal spline\nThe control points of the spline\nThe control points of the NURBS\nThe cosine of the rotation angle in radians.\nReturns the default <code>Circle</code> with a radius of <code>0.5</code>.\nReturns the default <code>Arc2d</code> with radius <code>0.5</code>, covering one …\nReturns the default <code>CircularSector</code> with radius <code>0.5</code> and …\nReturns the default <code>CircularSegment</code> with radius <code>0.5</code> and …\nReturns the default <code>Ellipse</code> with a half-width of <code>1.0</code> and a …\nReturns the default <code>Annulus</code> with radii of <code>0.5</code> and <code>1.0</code>.\nReturns the default <code>Rhombus</code> with a half-horizontal and …\nReturns the default <code>Plane2d</code> with a normal pointing in the …\nReturns the default <code>Triangle2d</code> with the vertices <code>[0.0, 0.5]</code>…\nReturns the default <code>Rectangle</code> with a half-width and …\nReturns the default <code>RegularPolygon</code> with six sides (a …\nReturns the default <code>Capsule2d</code> with a radius of <code>0.5</code> and a …\nReturns the default <code>Sphere</code> with a radius of <code>0.5</code>.\nReturns the default <code>Plane3d</code> with a normal pointing in the …\nReturns the default <code>InfinitePlane3d</code> with a normal pointing …\nReturns the default <code>Cuboid</code> with a width, height, and depth …\nReturns the default <code>Cylinder</code> with a radius of <code>0.5</code> and a …\nReturns the default <code>Capsule3d</code> with a radius of <code>0.5</code> and a …\nReturns the default <code>Cone</code> with a base radius of <code>0.5</code> and a …\nReturns the default <code>ConicalFrustum</code> with a top radius of …\nReturns the default <code>Torus</code> with a minor radius of <code>0.25</code> and …\nReturns the default <code>Triangle3d</code> with the vertices …\nReturns the default <code>Tetrahedron</code> with the vertices …\nGet the diameter of the circle\nGet the diameter of the annulus\nGet the diameter of the sphere\nThe direction of the line. The line extends infinitely in …\nThe direction of the line segment\nThe direction of the line\nThe direction of the line\nThe direction of the ray.\nThe direction of the ray.\nThe interval over which this curve is parametrized.\nGiven a <code>time</code> within <code>0..=1</code>, returns an eased value that …\nReturns the eccentricity of the ellipse. It can be thought …\nGet the end of this interval.\nGet the endpoints of the arc\nGet the external angle of the regular polygon in degrees.\nGet the external angle of the regular polygon in radians.\nGet the triangles that form the faces of this tetrahedron.\nFlip this curve so that its tuple output is arranged the …\nGet the focal length of the ellipse. This corresponds to …\nCreate a new <code>Curve</code> repeating this curve forever, producing …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate a new <code>Rectangle</code> from two corner points\nCreate a new <code>Cuboid</code> from two corner points\nCreate a new <code>Arc2d</code> from a <code>radius</code> and an <code>angle</code> in degrees.\nCreate a new <code>CircularSector</code> from a <code>radius</code> and an <code>angle</code> in …\nCreate a new <code>CircularSegment</code> from a <code>radius</code> and an <code>angle</code> in …\nCreate a new <code>Rhombus</code> from a given inradius with all inner …\nCreate a <code>Rectangle</code> from a single length. The resulting …\nCreate a <code>Cuboid</code> from a single length. The resulting <code>Cuboid</code> …\nCreate a new <code>Segment2d</code> from its endpoints and compute its …\nCreate a new <code>Plane3d</code> based on three points and compute the …\nCreate a new <code>InfinitePlane3d</code> based on three points and …\nCreate a new <code>Segment3d</code> from its endpoints and compute its …\nCreate a new <code>Arc2d</code> from a <code>radius</code> and an <code>angle</code> in radians\nCreate a new <code>CircularSector</code> from a <code>radius</code> and an <code>angle</code> in …\nCreate a new <code>CircularSegment</code> from a <code>radius</code> and an <code>angle</code> in …\nConstruct a value of this type uniformly at random using …\nCreate a new curve from a collection of segments. If the …\nCreate a new curve from a collection of segments. If the …\nCreate a new <code>Rhombus</code> from a side length with all inner …\nCreate a new <code>Ellipse</code> from a given full size.\nCreate a new <code>Rectangle</code> from a given full size\nCreate a new <code>Cuboid</code> from a given full size\nCreate a new <code>Arc2d</code> from a <code>radius</code> and a <code>fraction</code> of a …\nCreate a new <code>CircularSector</code> from a <code>radius</code> and a number of …\nCreate a new <code>CircularSegment</code> from a <code>radius</code> and a number of …\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreate a new <code>Curve</code> which is the graph of this one; that …\nGet half the angle of the sector\nGet the half-angle of the segment\nHalf the angle defining the arc\nGet half the distance between the endpoints (half the …\nGet half the length of the chord defined by the sector\nGet half the length of the segment’s base, also known as …\nHalf of the depth of the extrusion\nSize of the horizontal and vertical diagonals of the …\nThe half height of the cylinder\nHalf the length of the line segment. The segment extends …\nHalf the height of the capsule, excluding the hemicircles\nHalf the length of the line segment. The segment extends …\nHalf the height of the capsule, excluding the hemispheres\nHalf of the width and height of the ellipse.\nHalf of the width and height of the rectangle\nHalf of the width and height of the plane\nHalf of the width, height and depth of the cuboid\nReturns <code>true</code> if this interval has a finite end.\nReturns <code>true</code> if this interval has a finite start.\nThe height of the cone\nThe height of the frustum\nThe inner circle of the annulus\nGet the inner radius of the torus. For a ring torus, this …\nGet the radius of the largest circle that can be drawn …\nGet the inradius or apothem of the regular polygon. This …\nExtract a <code>Distribution</code> whose samples are points of this …\nGet the internal angle of the regular polygon in degrees.\nGet the internal angle of the regular polygon in radians.\nInterpolate between this value and the <code>other</code> given value …\nA version of <code>interpolate_stable</code> that assigns the result to …\nGiven <code>start</code> and <code>end</code> values, produce a curve with unlimited …\nCreate an <code>Interval</code> by intersecting this interval with …\nCreate an <code>Interval</code> with a given <code>start</code> and <code>end</code>. Alias of …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>v</code> normalized to the range <code>[a, b]</code>.\nChecks if the triangle is acute, meaning all angles are …\nChecks if the triangle is acute, meaning all angles are …\nReturns <code>true</code> if this interval is bounded — that is, if …\nChecks if the triangle is degenerate, meaning it has zero …\nChecks if the triangle is degenerate, meaning it has zero …\nProduces true if the arc is at least half a circle.\nProduces true if the arc is at most half a circle.\nChecks if the triangle is obtuse, meaning one angle is …\nChecks if the triangle is obtuse, meaning one angle is …\nComputes both isometries which transforms points from the …\nComputes an <code>Isometry3d</code> which transforms points from the …\nComputes an <code>Isometry3d</code> which transforms points from the …\nIterate over the curve split into <code>subdivisions</code>, sampling …\nIterate over the curve split into <code>subdivisions</code>, sampling …\nIterate over the curve split into <code>subdivisions</code>, sampling …\nIterate over the curve split into <code>subdivisions</code>, sampling …\nA flexible iterator used to sample curves with arbitrary …\nA flexible iterator used to sample curves with arbitrary …\nIterate over the curve split into <code>subdivisions</code>, sampling …\nIterate over the curve split into <code>subdivisions</code>, sampling …\nGet the <code>TorusKind</code> determined by the minor and major radii.\nThe width of the domain of this segment.\nKnots\nGet the largest side of the triangle.\nGet the surface area of the side of the cylinder, also …\nGet the surface area of the side of the cone, also known …\nGet the left-hand end point of the arc\nReturns the length of the domain of the parametric curve.\nGet the length of the arc\nGet the length of this interval. Note that the result may …\nPerforms a linear interpolation between <code>self</code> and <code>rhs</code> based …\nThe distance from the center of the torus to the center of …\nCreate a new curve by mapping the values of this curve via …\nThis <code>UnevenSampleAutoCurve</code>, but with the sample times …\nThis <code>UnevenSampleAutoCurve</code>, but with the sample times …\nThe maximum corner point of the rect.\nThe maximum corner point of the rect.\nThe maximum corner point of the rect.\nGet the midpoint of the arc\nThe minimum corner point of the rect.\nThe minimum corner point of the rect.\nThe minimum corner point of the rect.\nThe radius of the tube of the torus\nCreate a new cubic Bezier curve from sets of control …\nCreate a new Hermite curve from sets of control points.\nBuild a new Cardinal spline.\nBuild a new B-Spline.\nBuild a Non-Uniform Rational B-Spline.\nCreate a new <code>Circle</code> from a <code>radius</code>\nCreate a new <code>Arc2d</code> from a <code>radius</code> and a <code>half_angle</code>\nCreate a new <code>CircularSector</code> from a <code>radius</code> and an <code>angle</code>\nCreate a new <code>CircularSegment</code> from a <code>radius</code>, and an <code>angle</code>\nCreate a new <code>Ellipse</code> from half of its width and height.\nCreate a new <code>Annulus</code> from the radii of the inner and outer …\nCreate a new <code>Rhombus</code> from a vertical and horizontal …\nCreate a new <code>Plane2d</code> from a normal\nCreate a new <code>Segment2d</code> from a direction and full length of …\nCreate a new <code>Polyline2d</code> from its vertices\nCreate a new <code>BoxedPolyline2d</code> from its vertices\nCreate a new <code>Triangle2d</code> from points <code>a</code>, <code>b</code>, and <code>c</code>\nCreate a new <code>Rectangle</code> from a full width and height\nCreate a new <code>Polygon</code> from its vertices\nCreate a <code>ConvexPolygon</code> from its <code>vertices</code>.\nCreate a new <code>BoxedPolygon</code> from its vertices\nCreate a new <code>RegularPolygon</code> from the radius of the …\nCreate a new <code>Capsule2d</code> from a radius and length\nCreate a new <code>Sphere</code> from a <code>radius</code>\nCreate a new <code>Plane3d</code> from a normal and a half size\nCreate a new <code>InfinitePlane3d</code> from a normal\nCreate a new <code>Segment3d</code> from a direction and full length of …\nCreate a new <code>Polyline3d</code> from its vertices\nCreate a new <code>BoxedPolyline3d</code> from its vertices\nCreate a new <code>Cuboid</code> from a full x, y, and z length\nCreate a new <code>Cylinder</code> from a radius and full height\nCreate a new <code>Capsule3d</code> from a radius and length\nCreate a new <code>Cone</code> from a radius and height.\nCreate a new <code>Torus</code> from an inner and outer radius.\nCreate a new <code>Triangle3d</code> from points <code>a</code>, <code>b</code>, and <code>c</code>.\nCreate a new <code>Tetrahedron</code> from points <code>a</code>, <code>b</code>, <code>c</code> and <code>d</code>.\nCreate a new <code>Extrusion&lt;T&gt;</code> from a given <code>base_shape</code> and <code>depth</code>\nCreate a constant curve, which has the given <code>domain</code> and …\nCreate a new curve with the given <code>domain</code> from the given …\nGiven a <code>start</code> and <code>end</code> value, create a curve parametrized …\nCreate a new <code>Interval</code> with the specified <code>start</code> and <code>end</code>. …\nCreate a new <code>SampleCurve</code> using the specified <code>interpolation</code> …\nCreate a new <code>SampleCurve</code> using type-inferred interpolation …\nCreate a new <code>UnevenSampleCurve</code> using the provided …\nCreate a new <code>UnevenSampleAutoCurve</code> from a given set of …\nConstruct a cubic Bezier curve for animation easing, with …\nBuild a new Catmull-Rom spline, the special case of a …\nCreate a <code>ConvexPolygon</code> from its <code>vertices</code>, without checks. …\nGet the normal of the triangle in the direction of the …\nThe normal of the plane. The plane will be placed …\nThe normal of the plane. The plane will be placed …\nThe normal of the plane. The plane will be placed …\nGenerates open uniform knots, which makes the ends of the …\nThe origin of the ray.\nThe origin of the ray.\nThe outer circle of the annulus\nGet the outer radius of the torus. This corresponds to the …\nGet the perimeter of the shape\nGet the perimeter or circumference of the circle\nGet an approximation for the perimeter or circumference of …\nGet the perimeter or circumference of the annulus, which …\nGet the perimeter of the rhombus\nGet the perimeter of the triangle\nGet the perimeter of the rectangle\nGet the perimeter of the regular polygon. This is the sum …\nGet the perimeter of the capsule\nGet the perimeter of the triangle.\nCreate a new <code>Curve</code> chaining the original curve with its …\nGet the position of the first point on the line segment\nGet the position of the first point on the line segment\nGet the position of the second point on the line segment\nGet the position of the second point on the line segment\nInstantaneous position of a point at parametric value <code>t</code>.\nCompute the position of a point on the cubic curve at the …\nInstantaneous position of a point at parametric value <code>t</code> in …\nCompute the position of a point on the curve at the …\nInjects the <code>point</code> into this plane transformed with the …\nAdds a segment to the curve\nAdds a segment to the curve.\nGet the radius of the sector\nGet the radius of the segment\nThe radius of the circle\nThe radius of the circle\nThe radius of the capsule\nThe radius of the sphere\nThe radius of the cylinder\nThe radius of the capsule\nThe radius of the base\nThe radius of the base of the frustum\nThe radius of the top of the frustum\nRemap <code>self</code> from the input range to the output range.\nCreate a new <code>Curve</code> whose parameter space is related to the …\nReparametrize this <code>Curve</code> by sampling from another curve.\nLinearly reparametrize this <code>Curve</code>, producing a new curve …\nCreate a new <code>Curve</code> repeating this curve <code>N</code> times, producing …\nResample this <code>Curve</code> to produce a new one that is defined …\nResample this <code>Curve</code> to produce a new one that is defined …\nResample this <code>Curve</code> to produce a new one that is defined …\nResample this <code>Curve</code> to produce a new one that is defined …\nCreate a new <code>Curve</code> inverting this curve on the x-axis, …\nReverse the <code>WindingOrder</code> of the triangle by swapping the …\nReverse the triangle by swapping the first and last …\nThis triangle but reversed.\nThis triangle but reversed.\nGet the right-hand end point of the arc\nThe rotational part of a two-dimensional isometry.\nThe rotational part of a three-dimensional isometry.\nGet the length of the sagitta of this arc, that is, the …\nGet the length of the sagitta of this sector\nGet the length of the sagitta of this segment, also known …\nSample a point on this curve at the parameter value <code>t</code>, …\nUniformly sample a point from the surface of this shape, …\nSample a point on this curve at the parameter value <code>t</code>, …\nUniformly sample a point from inside the area/volume of …\nSample a collection of <code>n &gt;= 0</code> points on this curve at the …\nSample a collection of <code>n &gt;= 0</code> points on this curve at the …\nSample a collection of <code>n &gt;= 0</code> points on this curve at the …\nSample a point on this curve at the parameter value <code>t</code>, …\nExtract an iterator over evenly-spaced samples from this …\nThe list of segments contained in this <code>CubicCurve</code>.\nThe list of segments contained in this <code>RationalCurve</code>.\nReturns the length of the semi-major axis. This …\nReturns the length of the semi-minor axis. This …\nGet the length of each side of the rhombus\nGet the length of one side of the regular polygon\nThe number of sides\nComputes the shortest distance between a plane transformed …\nGet the signed volume of the tetrahedron.\nThe sine of the rotation angle in radians.\nGet the size of the rectangle\nGet the size of the cuboid\nGet the slant height of the cone, the length of the line …\nSmoothly nudge this value towards the <code>target</code> at a given …\nGet an iterator over equally-spaced points from this …\nGet the start of this interval.\nTension\nGet the thickness of the annulus\nBuild a <code>CubicCurve</code> by computing the interpolation …\nBuild a <code>RationalCurve</code> by computing the interpolation …\nBuild a cyclic <code>CubicCurve</code> by computing the interpolation …\nGet the part connecting the hemispherical ends of the …\nGet the part connecting the semicircular ends of the …\nThe translational part of a two-dimensional isometry.\nThe translational part of a three-dimensional isometry.\nGenerates uniform knots that will generate the same curve …\nInstantaneous velocity of a point at parametric value <code>t</code>.\nCompute the first derivative with respect to t at <code>t</code>. This …\nInstantaneous velocity of a point at parametric value <code>t</code> in …\nCompute the first derivative with respect to t at <code>t</code>. This …\nGet the vertices of this polygon\nReturns an iterator over the vertices of the regular …\nThe vertices of the polyline\nThe vertices of the polyline\nThe vertices of the triangle\nThe vertices of the <code>Polygon</code>\nThe vertices of the <code>BoxedPolygon</code>\nThe vertices of the polyline\nThe vertices of the polyline\nThe vertices of the triangle.\nThe vertices of the tetrahedron.\nGet the volume of the shape\nGet the volume of the sphere\nGet the volume of the cuboid\nGet the volume of the cylinder\nGet the volume of the capsule\nGet the volume of the cone\nGet the volume of the torus. Note that this only produces …\nGet the volume of the tetrahedron.\nGet the volume of the extrusion\nThe homogeneous weight coefficients.\nWeights\nGet the <code>WindingOrder</code> of the triangle\nCreate a new <code>Curve</code> by zipping this curve together with …\nExpected number of knots\nExpected number of weights\nProvided number of knots\nProvided number of weights\nThe number of control points provided\nA primitive shape formed by the region between two …\nA primitive representing an arc between two points on a …\nA polygon with a variable number of vertices, allocated on …\nA series of connected line segments in 2D space, allocated …\nA series of connected line segments in 3D space, allocated …\nA 2D capsule primitive, also known as a stadium or pill …\nA 3D capsule primitive centered on the origin A …\nA circle primitive, representing the set of points some …\nA primitive representing a circular sector: a pie slice of …\nA primitive representing a circular segment: the area …\nA clockwise winding order\nThe created polygon is not convex.\nA cone primitive centered on the midpoint between the tip …\nA conical frustum primitive. A conical frustum can be …\nA convex polygon with <code>N</code> vertices.\nAn error that happens when creating a <code>ConvexPolygon</code>.\nA counterclockwise winding order\nA cuboid primitive, which is like a cube, except that the …\nA cylinder primitive centered on the origin\nAn ellipse primitive, which is like a circle, but the …\nA 3D shape representing an extruded 2D <code>base_shape</code>.\nA torus that has no hole but also doesn’t intersect …\nAn unbounded plane in 3D space. It forms a separating …\nA torus with non-geometric properties like a minor or …\nAn invalid winding order indicating that it could not be …\nAn infinite line going through the origin along a …\nAn infinite line going through the origin along a …\nA trait for getting measurements of 2D shapes\nA trait for getting measurements of 3D shapes\nAn unbounded plane in 2D space. It forms a separating …\nA bounded plane in 3D space. It forms a surface starting …\nA polygon with N vertices.\nA series of connected line segments in 2D space.\nA series of connected line segments in 3D space.\nA marker trait for 2D primitives\nA marker trait for 3D primitives\nA rectangle primitive, which is like a square, except that …\nA polygon centered on the origin where all vertices lie on …\nA rhombus primitive, also known as a diamond shape. A four …\nA torus that has a ring. The major radius is greater than …\nA segment of a line going through the origin along a …\nA segment of a line going through the origin along a …\nA sphere primitive, representing the set of all points …\nA self-intersecting torus. The major radius is less than …\nA tetrahedron primitive.\nA torus primitive, often representing a ring or donut shape\nThe type of torus determined by the minor and major radii\nA triangle in 2D space\nA 3D triangle primitive.\nThe winding order for a set of points\nThe arc defining the sector\nThe arc defining the segment\nGet the area of the shape\nGet the surface area of the shape\nThe base shape of the extrusion\nThe circumcircle on which all vertices lie\nThe direction of the line. The line extends infinitely in …\nThe direction of the line segment\nThe direction of the line\nThe direction of the line\nHalf the angle defining the arc\nHalf of the depth of the extrusion\nSize of the horizontal and vertical diagonals of the …\nThe half height of the cylinder\nHalf the length of the line segment. The segment extends …\nHalf the height of the capsule, excluding the hemicircles\nHalf the length of the line segment. The segment extends …\nHalf the height of the capsule, excluding the hemispheres\nHalf of the width and height of the ellipse.\nHalf of the width and height of the rectangle\nHalf of the width and height of the plane\nHalf of the width, height and depth of the cuboid\nThe height of the cone\nThe height of the frustum\nThe inner circle of the annulus\nThe distance from the center of the torus to the center of …\nThe radius of the tube of the torus\nThe normal of the plane. The plane will be placed …\nThe normal of the plane. The plane will be placed …\nThe normal of the plane. The plane will be placed …\nThe outer circle of the annulus\nGet the perimeter of the shape\nThe radius of the circle\nThe radius of the circle\nThe radius of the capsule\nThe radius of the sphere\nThe radius of the cylinder\nThe radius of the capsule\nThe radius of the base\nThe radius of the base of the frustum\nThe radius of the top of the frustum\nThe number of sides\nThe vertices of the polyline\nThe vertices of the polyline\nThe vertices of the triangle\nThe vertices of the <code>Polygon</code>\nThe vertices of the <code>BoxedPolygon</code>\nThe vertices of the polyline\nThe vertices of the polyline\nThe vertices of the triangle.\nThe vertices of the tetrahedron.\nGet the volume of the shape\nA wrapper struct that allows boundary sampling from a …\nErgonomics trait for a type with a <code>Standard</code> distribution, …\nA wrapper struct that allows interior sampling from a …\nThe type of vector returned by the sample methods, <code>Vec2</code> …\nExposes methods to uniformly sample a variety of primitive …\nA distribution that caches data to allow fast sampling …\nExtract a <code>Distribution</code> whose samples are points of this …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConstruct a value of this type uniformly at random using …\nExtract a <code>Distribution</code> whose samples are points of this …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nFunctionality related to random sampling from triangle …\nUniformly sample a point from the surface of this shape, …\nUniformly sample a point from inside the area/volume of …\nThe <code>ShapeSample</code> trait, allowing random sampling from …\nThis module holds local implementations of the <code>Distribution</code>…\nConstruct a new <code>UniformMeshSampler</code> from a list of triangles…\nA distribution that caches data to allow fast sampling …\nA wrapper struct that allows boundary sampling from a …\nA wrapper struct that allows interior sampling from a …\nThe type of vector returned by the sample methods, <code>Vec2</code> …\nExposes methods to uniformly sample a variety of primitive …\nExtract a <code>Distribution</code> whose samples are points of this …\nExtract a <code>Distribution</code> whose samples are points of this …\nUniformly sample a point from the surface of this shape, …\nUniformly sample a point from inside the area/volume of …\nErgonomics trait for a type with a <code>Standard</code> distribution, …\nConstruct a value of this type uniformly at random using …\nA 2-dimensional vector.\nA 3-dimensional vector.\nA 4-dimensional vector.\nCreates a 2-dimensional vector.\nCreates a 3-dimensional vector.\nCreates a 4-dimensional vector.\nThe unit axes.\nThe unit axes.\nThe unit axes.\nAll <code>u32::MAX</code>.\nAll <code>u32::MAX</code>.\nAll <code>u32::MAX</code>.\nAll <code>u32::MIN</code>.\nAll <code>u32::MIN</code>.\nAll <code>u32::MIN</code>.\nAll ones.\nAll ones.\nAll ones.\nA 2-dimensional vector.\nA 3-dimensional vector.\nA 4-dimensional vector.\nA unit vector pointing along the positive W axis.\nA unit vector pointing along the positive X axis.\nA unit vector pointing along the positive X axis.\nA unit vector pointing along the positive X axis.\nA unit vector pointing along the positive Y axis.\nA unit vector pointing along the positive Y axis.\nA unit vector pointing along the positive Y axis.\nA unit vector pointing along the positive Z axis.\nA unit vector pointing along the positive Z axis.\nAll zeroes.\nAll zeroes.\nAll zeroes.\nCasts all elements of <code>self</code> to <code>f64</code>.\nCasts all elements of <code>self</code> to <code>f64</code>.\nCasts all elements of <code>self</code> to <code>f64</code>.\nCasts all elements of <code>self</code> to <code>i16</code>.\nCasts all elements of <code>self</code> to <code>i16</code>.\nCasts all elements of <code>self</code> to <code>i16</code>.\nCasts all elements of <code>self</code> to <code>i64</code>.\nCasts all elements of <code>self</code> to <code>i64</code>.\nCasts all elements of <code>self</code> to <code>i64</code>.\nCasts all elements of <code>self</code> to <code>i8</code>.\nCasts all elements of <code>self</code> to <code>i8</code>.\nCasts all elements of <code>self</code> to <code>i8</code>.\nCasts all elements of <code>self</code> to <code>i32</code>.\nCasts all elements of <code>self</code> to <code>i32</code>.\nCasts all elements of <code>self</code> to <code>i32</code>.\nCasts all elements of <code>self</code> to <code>u16</code>.\nCasts all elements of <code>self</code> to <code>u16</code>.\nCasts all elements of <code>self</code> to <code>u16</code>.\nCasts all elements of <code>self</code> to <code>u64</code>.\nCasts all elements of <code>self</code> to <code>u64</code>.\nCasts all elements of <code>self</code> to <code>u64</code>.\nCasts all elements of <code>self</code> to <code>u8</code>.\nCasts all elements of <code>self</code> to <code>u8</code>.\nCasts all elements of <code>self</code> to <code>u8</code>.\nCasts all elements of <code>self</code> to <code>f32</code>.\nCasts all elements of <code>self</code> to <code>f32</code>.\nCasts all elements of <code>self</code> to <code>f32</code>.\nCasts all elements of <code>self</code> to <code>f32</code>.\nComponent-wise clamping of values, similar to <code>u32::clamp</code>.\nComponent-wise clamping of values, similar to <code>u32::clamp</code>.\nComponent-wise clamping of values, similar to <code>u32::clamp</code>.\nReturns a vector mask containing the result of a <code>==</code> …\nReturns a vector mask containing the result of a <code>==</code> …\nReturns a vector mask containing the result of a <code>==</code> …\nReturns a vector mask containing the result of a <code>&gt;=</code> …\nReturns a vector mask containing the result of a <code>&gt;=</code> …\nReturns a vector mask containing the result of a <code>&gt;=</code> …\nReturns a vector mask containing the result of a <code>&gt;</code> …\nReturns a vector mask containing the result of a <code>&gt;</code> …\nReturns a vector mask containing the result of a <code>&gt;</code> …\nReturns a vector mask containing the result of a <code>&lt;=</code> …\nReturns a vector mask containing the result of a <code>&lt;=</code> …\nReturns a vector mask containing the result of a <code>&lt;=</code> …\nReturns a vector mask containing the result of a <code>&lt;</code> …\nReturns a vector mask containing the result of a <code>&lt;</code> …\nReturns a vector mask containing the result of a <code>&lt;</code> …\nReturns a vector mask containing the result of a <code>!=</code> …\nReturns a vector mask containing the result of a <code>!=</code> …\nReturns a vector mask containing the result of a <code>!=</code> …\nComputes the cross product of <code>self</code> and <code>rhs</code>.\nComputes the dot product of <code>self</code> and <code>rhs</code>.\nComputes the dot product of <code>self</code> and <code>rhs</code>.\nComputes the dot product of <code>self</code> and <code>rhs</code>.\nReturns a vector where every component is the dot product …\nReturns a vector where every component is the dot product …\nReturns a vector where every component is the dot product …\nReturns the product of all elements of <code>self</code>.\nReturns the product of all elements of <code>self</code>.\nReturns the product of all elements of <code>self</code>.\nReturns the sum of all elements of <code>self</code>.\nReturns the sum of all elements of <code>self</code>.\nReturns the sum of all elements of <code>self</code>.\nCreates a 3D vector from <code>self</code> and the given <code>z</code> value.\nCreates a 4D vector from <code>self</code> and the given <code>w</code> value.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a new vector from an array.\nCreates a new vector from an array.\nCreates a new vector from an array.\nCreates a vector from the first 2 values in <code>slice</code>.\nCreates a vector from the first 3 values in <code>slice</code>.\nCreates a vector from the first 4 values in <code>slice</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nComputes the squared length of <code>self</code>.\nComputes the squared length of <code>self</code>.\nComputes the squared length of <code>self</code>.\nReturns a vector containing each element of <code>self</code> modified …\nReturns a vector containing each element of <code>self</code> modified …\nReturns a vector containing each element of <code>self</code> modified …\nReturns a vector containing the maximum values for each …\nReturns a vector containing the maximum values for each …\nReturns a vector containing the maximum values for each …\nReturns the horizontal maximum of <code>self</code>.\nReturns the horizontal maximum of <code>self</code>.\nReturns the horizontal maximum of <code>self</code>.\nReturns a vector containing the minimum values for each …\nReturns a vector containing the minimum values for each …\nReturns a vector containing the minimum values for each …\nReturns the horizontal minimum of <code>self</code>.\nReturns the horizontal minimum of <code>self</code>.\nReturns the horizontal minimum of <code>self</code>.\nCreates a new vector.\nCreates a new vector.\nCreates a new vector.\nReturns a vector containing the saturating addition of <code>self</code>…\nReturns a vector containing the saturating addition of <code>self</code>…\nReturns a vector containing the saturating addition of <code>self</code>…\nReturns a vector containing the saturating addition of <code>self</code>…\nReturns a vector containing the saturating addition of <code>self</code>…\nReturns a vector containing the saturating addition of <code>self</code>…\nReturns a vector containing the saturating division of <code>self</code>…\nReturns a vector containing the saturating division of <code>self</code>…\nReturns a vector containing the saturating division of <code>self</code>…\nReturns a vector containing the saturating multiplication …\nReturns a vector containing the saturating multiplication …\nReturns a vector containing the saturating multiplication …\nReturns a vector containing the saturating subtraction of …\nReturns a vector containing the saturating subtraction of …\nReturns a vector containing the saturating subtraction of …\nCreates a vector from the elements in <code>if_true</code> and <code>if_false</code>…\nCreates a vector from the elements in <code>if_true</code> and <code>if_false</code>…\nCreates a vector from the elements in <code>if_true</code> and <code>if_false</code>…\nCreates a vector with all elements set to <code>v</code>.\nCreates a vector with all elements set to <code>v</code>.\nCreates a vector with all elements set to <code>v</code>.\n<code>[x, y]</code>\n<code>[x, y, z]</code>\n<code>[x, y, z, w]</code>\nCreates a 2D vector from the <code>x</code> and <code>y</code> elements of <code>self</code>, …\nCreates a 3D vector from the <code>x</code>, <code>y</code> and <code>z</code> elements of <code>self</code>, …\nCreates a 2-dimensional vector.\nCreates a 3-dimensional vector.\nCreates a 4-dimensional vector.\nCreates a 4D vector from <code>self</code> with the given value of <code>w</code>.\nCreates a 2D vector from <code>self</code> with the given value of <code>x</code>.\nCreates a 3D vector from <code>self</code> with the given value of <code>x</code>.\nCreates a 4D vector from <code>self</code> with the given value of <code>x</code>.\nCreates a 2D vector from <code>self</code> with the given value of <code>y</code>.\nCreates a 3D vector from <code>self</code> with the given value of <code>y</code>.\nCreates a 4D vector from <code>self</code> with the given value of <code>y</code>.\nCreates a 3D vector from <code>self</code> with the given value of <code>z</code>.\nCreates a 4D vector from <code>self</code> with the given value of <code>z</code>.\nReturns a vector containing the wrapping addition of <code>self</code> …\nReturns a vector containing the wrapping addition of <code>self</code> …\nReturns a vector containing the wrapping addition of <code>self</code> …\nReturns a vector containing the wrapping addition of <code>self</code> …\nReturns a vector containing the wrapping addition of <code>self</code> …\nReturns a vector containing the wrapping addition of <code>self</code> …\nReturns a vector containing the wrapping division of <code>self</code> …\nReturns a vector containing the wrapping division of <code>self</code> …\nReturns a vector containing the wrapping division of <code>self</code> …\nReturns a vector containing the wrapping multiplication of …\nReturns a vector containing the wrapping multiplication of …\nReturns a vector containing the wrapping multiplication of …\nReturns a vector containing the wrapping subtraction of …\nReturns a vector containing the wrapping subtraction of …\nReturns a vector containing the wrapping subtraction of …\nWrites the elements of <code>self</code> to the first 2 elements in …\nWrites the elements of <code>self</code> to the first 3 elements in …\nWrites the elements of <code>self</code> to the first 4 elements in …\nA 2-dimensional vector.\nA 3-dimensional vector.\nA 4-dimensional vector.\nCreates a 2-dimensional vector.\nCreates a 3-dimensional vector.\nCreates a 4-dimensional vector.\nA 2-dimensional vector.\nA 3-dimensional vector.\nA 4-dimensional vector.\nCreates a 2-dimensional vector.\nCreates a 3-dimensional vector.\nCreates a 4-dimensional vector.\nThe mesh can participate in automatic batching.\nAn ambient light, which lights the entire scene equally.\nHolds <code>AssetId</code>s of the texture or textures that this light …\nA more general form of the <code>FogFalloff::Exponential</code> mode. …\nAn atomic version of <code>MaterialBindGroupId</code> that can be read …\nControls how cascaded shadow mapping works. Prefer using …\nBuilder for <code>CascadeShadowConfig</code>.\nSystem order ambiguities between systems in this set are …\nConfiguration of the clustering strategy for clustered …\nConfigure the far z-plane mode used for the furthest depth …\nConfigure the depth-slicing strategy for clustered forward …\nConstant max z-depth\nInformation needed when using CPU mesh instance data …\nThe version of <code>RenderMeshInstanceGpuQueue</code> that omits the …\n<code>ParallaxMappingMethod::Relief</code> with a 5 steps, a reasonable …\nDefault render method used for opaque materials.\nA Directional light.\nA component bundle for <code>DirectionalLight</code> entities.\nControls the resolution of <code>DirectionalLight</code> shadow maps.\nConfigures the “classic” computer graphics distance fog…\nThe uniform struct extracted from <code>EnvironmentMapLight</code>. …\nA GPU buffer that stores the environment map settings for …\nAn exponential fog falloff with a given <code>density</code>.\nA squared exponential fog falloff with a given <code>density</code>.\nA material that extends a base <code>Material</code> with additional …\nA <code>SystemSet</code> that encompasses both …\nHorizontal flipping transform\nVertical flipping transform\nFlipping X 3D transform\nFlipping Y 3D transform\nFlipping Z 3D transform\nHandle for the fog WGSL Shader internal asset\nFixed number of <code>Z</code> slices, <code>X</code> and <code>Y</code> calculated to give …\nAllows switching between different fog falloff modes, and …\nMetadata for fog\nA plugin that consolidates fog extraction, preparation and …\nA convenient <code>Bundle</code> that contains all components necessary …\nWhether GPU culling is in use.\nApproximates a fixed Gaussian blur, good when TAA isn’t …\nInformation needed when using GPU mesh instance data …\nThe version of <code>RenderMeshInstanceGpuQueue</code> that contains the\nThe GPU-side representation of the fog configuration that…\nA plugin that builds mesh uniforms on GPU.\nThe render node for the mesh uniform building pass.\nThe mesh had morph targets last frame and so they should …\nThe mesh had a skin last frame and so that skin should be …\nThe mesh had a transform last frame and so is eligible for …\nHardware 2x2.\nThe ID of the lightmap shader.\nBitmask for the 16-bit index into the LOD array.\nThe first bit of the LOD index.\nA marker component for a light probe, which is a cuboid …\nA trait implemented by all components that represent light …\nAdds support for light probes: cuboid bounding regions …\nA GPU buffer that stores information about all light …\nA per-view shader uniform that specifies all the light …\nComponent automatically attached to a light entity to …\nA component that applies baked indirect diffuse global …\nA plugin that provides an implementation of lightmaps.\nA linear fog falloff that grows in intensity between <code>start</code> …\nMaximum number of joints supported for skinned meshes.\nThe maximum number of each type of light probe that each …\nHow many textures are allowed in the view bind group …\nThe handle to the <code>mesh_preprocess.wgsl</code> compute shader.\nMaterials are used alongside <code>MaterialPlugin</code>, <code>Mesh3d</code>, and …\nA subset of the <code>Material</code> trait for defining extensions to …\nA component bundle for entities with a <code>Mesh3d</code> and a …\nRender pipeline data for a given <code>Material</code>.\nA key uniquely identifying a specialized <code>MaterialPipeline</code>.\nAdds the necessary ECS resources and render logic to …\nCommon <code>Material</code> properties, calculated for a specific …\nCalculate the required maximum z-depth based on currently …\nBind groups for meshes currently loaded.\nInformation about each mesh instance needed to cull it on …\nA GPU buffer that holds the information needed to cull …\nVarious flags and tightly-packed values on a mesh.\nInformation that has to be transferred from CPU to GPU in …\nAll possible <code>BindGroupLayout</code>s in bevy’s default mesh …\nA material used for rendering a <code>Mesh3d</code>.\nAll data needed to construct a pipeline for rendering 3D …\nMSAA uses the highest 3 bits for the MSAA log2(sample …\nA key that uniquely identifies a <code>MeshPipelineViewLayout</code>.\nStores the view layouts for every combination of pipeline …\nProvides support for rendering 3D meshes.\nDisable cluster calculations for this view\nThe default value.\nAdd this component to make a <code>Mesh3d</code> not cast shadows.\nAdd this component to make a <code>Mesh3d</code> not receive shadows.\nA simple linear interpolation, using a single texture …\nRender method used for opaque materials.\nThe parallax mapping method to use to compute depth based …\nA component bundle for PBR entities with a <code>Mesh3d</code> and a …\nSets up the entire PBR infrastructure of bevy.\n<code>CameraProjection</code> specific PBR functionality.\nA light that emits light in all directions from a central …\nA component bundle for <code>PointLight</code> entities.\nData prepared for a <code>Material</code> instance.\nSets up everything required to use the prepass pipeline.\nSets up the prepasses for a <code>Material</code>.\nThe compute shader bind group for the mesh uniform …\nThe pipeline for the GPU mesh preprocessing shader.\nSpecifies variants of the mesh preprocessing shader.\nThe compute shader pipelines for the mesh uniform building …\nA 2% contrast threshold was originally proposed by …\nDiscovers the best depth value based on binary search.\nStores data for all lightmaps in the render world.\nStores all extracted instances of a <code>Material</code> in the render …\nCPU data that the render world keeps for each entity, when …\nVarious useful flags for [<code>RenderMeshInstance</code>]s.\nCPU data that the render world needs to keep for each …\nInformation that is gathered during the parallel portion …\nThe per-thread queues used during …\nThe per-thread queues containing mesh instances, populated …\nCPU data that the render world needs to keep about each …\nInformation that the render world keeps about each entity …\nInformation that the render world keeps about each entity …\nInformation that the render world keeps about each entity …\nData that <code>crate::material::queue_material_meshes</code> and …\nA component, part of the render world, that stores the …\nThe mesh casts shadows.\nComponent to apply screen space ambient occlusion to a 3d …\nBundle to apply screen space ambient occlusion.\nPlugin for screen space ambient occlusion.\nAdd this component to a camera to enable <em>screen-space </em>…\nA GPU buffer that stores the screen space reflection …\nA convenient bundle to add screen space reflections to a …\nThe node in the render graph that traces screen space …\nInformation relating to the render pipeline for the screen …\nIdentifies which screen space reflections render pipeline …\nIdentifies a specific configuration of the SSR pipeline …\nEnables screen-space reflections for a camera.\nA version of <code>ScreenSpaceReflections</code> for upload to the GPU.\nSets the bind group for a given <code>Material</code> at the configured …\nData used to bin each object in the shadow map phase.\nAdd this component to a <code>Camera3d</code> to control how to …\nSystem sets used to run light-related systems.\nOne single cluster. Optimal for low-light complexity …\nMaps each skinned mesh to the applicable offset within the …\nThe GPU buffers containing joint matrices for all skinned …\nStops the <code>GpuPreprocessNode</code> attempting to generate the …\nA light that emits light in a given direction from a …\nA component bundle for spot light entities\nA material with “standard” properties used in PBR …\nBitflags info about the material a shader is currently …\nThe pipeline key for <code>StandardMaterial</code>, packed into 64 bits.\nThe GPU representation of the uniform data of a …\nA randomized filter that varies over time, good when TAA …\nAdd this component to make a <code>Mesh3d</code> using a PBR material …\nSystem order ambiguities between systems in this set are …\nAn enum to define which UV attribute to use for a texture.\nA component that stores the offset within the …\nInserted on each <code>Entity</code> with an <code>ExtractedView</code> to keep …\nIf the light probe can be attached to the view itself (as …\nA component attached to each camera in the render world …\nA component that stores the offset within the …\nCollection of mesh entities visible for 3D lighting.\nWhen placed on a <code>bevy_core_pipeline::core_3d::Camera3d</code>, …\nA plugin that implements volumetric fog.\nAdd this component to a <code>DirectionalLight</code> with a shadow map …\nA convenient alias for …\nExplicit <code>X</code>, <code>Y</code> and <code>Z</code> counts (may yield non-square <code>X/Y</code> …\nThe 3D center of the AABB in model space, padded with an …\nThe 3D extents of the AABB in model space, divided by two, …\nThe absorption coefficient, which measures what fraction …\nControls if <code>DeferredPbrLightingPlugin</code> is added.\nGet a flags value with all known bits set.\nGet a flags value with all known bits set.\nGet a flags value with all known bits set.\nGet a flags value with all known bits set.\nGet a flags value with all known bits set.\nGet a flags value with all known bits set.\nGet a flags value with all known bits set.\nWhen the alpha mode mask flag is set, any base color alpha …\nReturns this material’s <code>AlphaMode</code>. Defaults to …\nThe <code>AlphaMode</code> of this material.\nHow to apply the alpha channel of the <code>base_color_texture</code>.\nColor of the ambient light.\nColor of the ambient light.\nThe brightness of the ambient light.\nThe brightness of the ambient light.\nThe direction of increased roughness, in radians relative …\nIncreases the roughness along a specific direction, so …\nThe object.\nThe resulting (non-absorbed) color after white light …\nColor white light takes after traveling through the …\nHow far, on average, light travels through the volume …\nHow far light travels through the volume underneath the …\nThe color of the surface of the material before lighting.\nDoubles as diffuse albedo for non-metallic, specular for …\nThe UV channel to use for the …\nThe texture component of the material’s color before …\nThe bind group layout for the compute shader.\nWhether binding arrays (a.k.a. bindless textures) are …\nNumber of steps in a bisection (binary search) to perform …\nNumber of steps in a bisection (binary search) to perform …\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nGet the underlying bits value.\nGet the underlying bits value.\nGet the underlying bits value.\nGet the underlying bits value.\nGet the underlying bits value.\nGet the underlying bits value.\nGet the underlying bits value.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe (positive) distance to the far boundary of each …\nA direct scale factor multiplied with <code>color</code> before being …\nReturns the cascade config as specified by this builder.\nAn extra thin translucent layer on top of the main PBR …\nThe roughness of the clearcoat material. This is specified …\nCreates the <code>RenderMeshInstanceGpu</code>s and <code>MeshInputUniform</code>s …\nThe color of the fog effect.\nThe color of the fog effect.\nThe color of this light source.\nThe color of the light.\nThe color of the light.\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nA constant estimated thickness of objects.\nA constant estimated thickness of objects.\nWhether all set bits in a source flags value are also set …\nWhether all set bits in a source flags value are also set …\nWhether all set bits in a source flags value are also set …\nWhether all set bits in a source flags value are also set …\nWhether all set bits in a source flags value are also set …\nWhether all set bits in a source flags value are also set …\nWhether all set bits in a source flags value are also set …\nCreates an instance of <code>RenderViewLightProbes</code> containing …\nWhether to cull the “front”, “back” or neither …\nMaps each skinned mesh to the applicable offset within …\nStores all the joint matrices for skinned meshes in the …\nThe index of the <code>MeshInputUniform</code> in the buffer.\nReturns this material’s prepass fragment shader. If …\nReturns this material’s deferred fragment shader. If …\nUsed for selecting the deferred lighting pass for deferred …\nID for specifying which deferred lighting pass should be …\nThe deferred prepass, needed for SSR.\nReturns this material’s deferred vertex shader. If …\nReturns this material’s deferred vertex shader. If …\nThe density of fog, which measures how dark the fog is.\nOptional 3D voxel density texture for the fog.\nConfigurable offset of the density texture in UVW …\nAdd a bias to the view depth of the mesh which can be used …\nAdd a bias to the view depth of the mesh which can be used …\nAdjust rendered depth.\nThe depth map used for parallax mapping.\nThe depth prepass, needed for SSR.\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe amount of light transmitted <em>diffusely</em> through the …\nAmount of diffuse light transmitted through the material\nThe pipeline used for CPU culling. This pipeline doesn’t …\nColor used to modulate the influence of directional light …\nColor used to modulate the influence of directional light …\nThe exponent applied to the directional light alignment …\nThe exponent applied to the directional light alignment …\nSupport two-sided lighting by automatically flipping the …\nThe function used to draw.\nColor the material “emits” to the camera.\nThe UV channel to use for the …\nThe weight in which the camera exposure influences the …\nThe emissive map, multiplies pixels with <code>emissive</code> to get …\nGet a flags value with all bits unset.\nGet a flags value with all bits unset.\nGet a flags value with all bits unset.\nGet a flags value with all bits unset.\nGet a flags value with all bits unset.\nGet a flags value with all bits unset.\nGet a flags value with all bits unset.\nMap of view entity to the visible entities for each …\nMap of view entity to the visible entities for each …\nEnvironment maps and reflection probes.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nExtracts clusters from the main world from the render …\nExtracts meshes from the main world into the render world, …\nExtracts meshes from the main world into the render world …\nDetermines which falloff mode to use, and its parameters.\nDetermines which falloff mode to use, and its parameters.\nStrategy for how to evaluate the far <code>Z</code> plane of the …\nSets the far bound of the first cascade, relative to the …\nFar <code>Z</code> plane of the first depth slice\nThe index of this mesh’s first vertex in the vertex …\nThe index of this mesh’s first vertex in the vertex …\nVarious flags.\nThe <code>StandardMaterialFlags</code> accessible in the <code>wgsl</code> shader.\nVarious <code>MeshFlags</code>.\nFlip the texture coordinates of the material.\nNormal map textures authored for DirectX have their …\nConsumes the material and returns a material with flipped …\nThe color of the fog.\nWhether to enable fog for this material.\nThe actual fog volume.\nReturns this material’s fragment shader. If …\nReturns this material’s fragment shader. If …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from a bits value.\nConvert from a bits value.\nConvert from a bits value.\nConvert from a bits value.\nConvert from a bits value.\nConvert from a bits value.\nConvert from a bits value.\nConvert from a bits value exactly.\nConvert from a bits value exactly.\nConvert from a bits value exactly.\nConvert from a bits value exactly.\nConvert from a bits value exactly.\nConvert from a bits value exactly.\nConvert from a bits value exactly.\nConvert from a bits value, unsetting any unknown bits.\nConvert from a bits value, unsetting any unknown bits.\nConvert from a bits value, unsetting any unknown bits.\nConvert from a bits value, unsetting any unknown bits.\nConvert from a bits value, unsetting any unknown bits.\nConvert from a bits value, unsetting any unknown bits.\nConvert from a bits value, unsetting any unknown bits.\nCreates a new material from a given color\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nGet a flags value with the bits of a flag with the given …\nGet a flags value with the bits of a flag with the given …\nGet a flags value with the bits of a flag with the given …\nGet a flags value with the bits of a flag with the given …\nGet a flags value with the bits of a flag with the given …\nGet a flags value with the bits of a flag with the given …\nGet a flags value with the bits of a flag with the given …\nCreates a <code>FogFalloff::Exponential</code> value from the given …\nCreates a <code>FogFalloff::Atmospheric</code> value from the given …\nCreates a <code>FogFalloff::Atmospheric</code> value from the given …\nCreates a <code>FogFalloff::Exponential</code> value from the given …\nCreates a <code>FogFalloff::Atmospheric</code> value from the given …\nCreates a <code>FogFalloff::Atmospheric</code> value from the given …\nCreates a <code>FogFalloff::ExponentialSquared</code> value from the …\nCreates a <code>FogFalloff::ExponentialSquared</code> value from the …\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nGenerates all possible view layouts for the mesh pipeline, …\nLoads a value atomically. Uses <code>Ordering::Relaxed</code> so there …\nGet the <code>BindGroup</code> for <code>RenderMesh</code> with given <code>handle_id</code> and …\nThe global transform.\nThe pipeline used for GPU culling. This pipeline populates …\nReturns the asset ID or asset IDs of the texture or …\nIlluminance in lux (lumens per square meter), representing …\nThe lightmap texture.\nInherited visibility of an entity.\nInherited visibility of an entity.\nInherited visibility of an entity.\nInherited visibility of an entity.\nInherited visibility of an entity.\nInherited visibility.\nAngle defining the distance from the spot light direction …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nReturns the intensity of this light probe.\nLuminous power in lumens, representing the amount of light …\nLuminous power in lumens, representing the amount of light …\nluminous intensity in lumens per steradian\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nWhether any set bits in a source flags value are also set …\nWhether any set bits in a source flags value are also set …\nWhether any set bits in a source flags value are also set …\nWhether any set bits in a source flags value are also set …\nWhether any set bits in a source flags value are also set …\nWhether any set bits in a source flags value are also set …\nWhether any set bits in a source flags value are also set …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe index of refraction of the material.\nIndex of Refraction\nIrradiance volumes, also known as voxel global …\nWhether all known bits in this flags value are set.\nWhether all known bits in this flags value are set.\nWhether all known bits in this flags value are set.\nWhether all known bits in this flags value are set.\nWhether all known bits in this flags value are set.\nWhether all known bits in this flags value are set.\nWhether all known bits in this flags value are set.\nWhether all bits in this flags value are unset.\nWhether all bits in this flags value are unset.\nWhether all bits in this flags value are unset.\nWhether all bits in this flags value are unset.\nWhether all bits in this flags value are unset.\nWhether all bits in this flags value are unset.\nWhether all bits in this flags value are unset.\nYield a set of contained flags values.\nYield a set of contained flags values.\nYield a set of contained flags values.\nYield a set of contained flags values.\nYield a set of contained flags values.\nYield a set of contained flags values.\nYield a set of contained flags values.\nYield a set of contained named flags values.\nYield a set of contained named flags values.\nYield a set of contained named flags values.\nYield a set of contained named flags values.\nYield a set of contained named flags values.\nYield a set of contained named flags values.\nYield a set of contained named flags values.\nThe maximum distance to offset the ray origin randomly by, …\nThe maximum distance to offset the ray origin randomly by, …\nCalculates the extinction coefficient β, from V and Cₜ, …\nBuilds a unique label for each layout based on the flags\nScales the light by a fixed fraction.\nApplies a nonphysical color to the light.\nThe exposure (brightness) level of the lightmap, if …\nThe exposure (brightness) level of the lightmap, if …\nFour 16-bit unsigned normalized UV values packed into a …\nFour 16-bit unsigned normalized UV values packed into a …\nIncludes the lightmap texture and uniform.\nExponent to be applied in the linear part of the march.\nExponent to be applied in the linear part of the march.\nThe number of steps to be taken at regular intervals to …\nThe number of steps to be taken at regular intervals to …\nA slot for the material bind group ID.\nIn how many layers to split the depth maps for parallax …\nIn how many layers to split the depth maps for Steep …\nUsing <code>ParallaxMappingMethod::Relief</code>, how many additional …\nThe maximum shadow distance. Areas further from the camera …\nThe <code>AssetId</code> of the mesh.\nVarious flags.\nThe bits in the <code>MeshPipelineKey</code> for this material.\nHow “metallic” the material appears, within <code>[0.0, 1.0]</code>.\nFrom [0.0, 1.0], dielectric to pure metallic\nThe UV channel to use for the …\nMetallic and roughness maps, stored as a single texture.\nThe minimum shadow distance, which can help improve the …\nThe (positive) distance to the near boundary of the first …\nThe mesh model uniform (transform) and nothing else.\nCreates the bind group for meshes with no skins but morph …\nAlso includes the uniform and <code>MorphAttributes</code> for morph …\nCreates the bind group for meshes with no skins but morph …\nLike <code>MeshLayouts::morphed</code>, but includes a slot for the …\nCreates the bind group for meshes with skins and morph …\nAlso includes both uniforms for skinning and morph …\nCreates the bind group for meshes with skins and morph …\nLike <code>MeshLayouts::morphed_skinned</code>, but includes slots for …\nCreates a new light probe component.\nPrepare the layouts used by the default bevy <code>Mesh</code>.\nThe UV channel to use for the …\nUsed to fake the lighting of bumps and dents on a material.\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe number of shadow cascades. More cascades increases …\nThe UV channel to use for the …\nSpecifies the level of exposure to ambient light.\nReturns if this material should be rendered by the …\nRender method used for opaque materials. (Where <code>alpha_mode</code> …\nAngle defining the distance from the spot light direction …\nSets the overlap proportion between cascades. The overlap …\nThe proportion of overlap each cascade has with the …\nPadding.\nPadding.\nPadding.\nPadding.\nPadding.\nPadding.\nHow deep the offset introduced by the depth map should be.\nThe depth of the <code>StandardMaterial::depth_map</code> to apply.\nWhich parallax mapping method to use.\n<code>MeshUniform</code>s are stored in arrays in buffers. If storage …\nLinear perceptual roughness, clamped to <code>[0.089, 1.0]</code> in …\nThe maximum PBR roughness level that will enable screen …\nThe maximum PBR roughness level that will enable screen …\nThe identifier of the render pipeline.\nThe pipeline ID for the compute shader.\nThe PBR prelude.\nGathers up environment map settings for each applicable …\nPrepares fog metadata and writes the fog-related uniform …\nA system that attaches the mesh uniform buffers to the …\nA system that specializes the <code>mesh_preprocess.wgsl</code> …\nSets up screen space reflection pipelines for each …\nGathers up screen space reflection settings for each …\nControls if the prepass is enabled for the Material. For …\nControls if the prepass is enabled for the <code>StandardMaterial</code>…\nReturns this material’s prepass fragment shader. If …\nReturns this material’s prepass fragment shader. If …\nReturns this material’s prepass vertex shader. If …\nReturns this material’s prepass vertex shader. If …\nMaps each skinned mesh to the applicable offset within …\nStores all the joint matrices for skinned meshes in the …\nThe index of the previous mesh input.\nThe index of this mesh’s <code>MeshInputUniform</code> in the …\nQuality of the SSAO effect.\nQuality of the SSAO effect.\nFor each view, iterates over all the meshes visible from …\nFor each shadow cascade, iterates over all the meshes “…\nSimulates a light source coming from a spherical volume …\nSimulates a light source coming from a spherical volume …\nCut-off for the light’s area-of-effect. Fragments …\nRange in meters that this light illuminates.\nReturns whether the material would like to read from …\nWhether the material would like to read from …\nSpecular intensity for non-metals on a linear scale of …\nSpecular intensity for non-metals on a linear scale of […\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nConstructs <code>RenderMeshQueueData</code> for the given entity, if it …\nIs this material should be rendered by the deferred …\nLinear perceptual roughness, clamped to [0.089, 1.0] in …\nThe scattering coefficient, which measures the fraction of …\nMeasures the fraction of light that’s scattered <em>toward</em> …\nStores a value atomically. Uses <code>Ordering::Relaxed</code> so there …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nThe component that enables SSR.\nA bias used when sampling shadow maps to avoid “…\nA value that adjusts the tradeoff between self-shadowing …\nA value that adjusts the tradeoff between self-shadowing …\nThe distance from the light to near Z plane in the shadow …\nThe distance from the light to the near Z plane in the …\nA bias applied along the direction of the fragment’s …\nA bias applied along the direction of the fragment’s …\nA bias applied along the direction of the fragment’s …\nControls if shadows are enabled for the Material.\nWhether this light casts shadows.\nWhether this light casts shadows.\nWhether this light casts shadows.\nData that will be placed on the <code>RenderMeshInstanceGpu</code>.\nData shared between both the CPU mesh uniform building and …\nData shared between both the CPU mesh uniform building and …\nGeneral information about the mesh instance.\nReturns true if this entity is eligible to participate in …\nCreates the bind group for skinned meshes with no morph …\nAlso includes the uniform for skinning\nCreates the bind group for skinned meshes with no morph …\nLike <code>MeshLayouts::skinned</code>, but includes slots for the …\nCustomizes the default <code>RenderPipelineDescriptor</code> for a …\nCustomizes the default <code>RenderPipelineDescriptor</code> for a …\nThe amount of light transmitted <em>specularly</em> through the …\nAmount of specular light transmitted through the material\nThe number of raymarching steps to perform.\nThe number of raymarching steps to perform.\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nMarker component that indicates that its entity needs to …\nMarker component that indicates that its entity needs to …\nMarker component that indicates that its entity needs to …\nWhen marching the depth buffer, we only have 2.5D …\nThickness of the volume beneath the material surface.\nThickness of the volume underneath the material surface\nWhen marching the depth buffer, we only have 2.5D …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe local transform. Set this to change the position, and …\nThe transform of the mesh.\nThe translation of the mesh.\nThe translation of the mesh instance.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nWhether to apply only the base color to this material.\nWhether we’re building <code>MeshUniform</code>s on GPU.\nControls if GPU <code>MeshUniform</code> building is enabled.\nWhether we’re building <code>MeshUniform</code>s on GPU.\nApproximate the root position using the secant method—by …\nApproximate the root position using the secant method—by …\nThe rectangle within the lightmap texture that the UVs are …\nThe transform applied to the UVs corresponding to …\nThe transform applied to the UVs corresponding to …\nReturns this material’s vertex shader. If …\nReturns this material’s vertex shader. If …\nA reference to all the mesh pipeline view layouts.\nAlgorithmically-computed indication of whether an entity …\nAlgorithmically-computed indication of whether an entity …\nAlgorithmically-computed indication of whether an entity …\nAlgorithmically-computed indication of whether an entity …\nAlgorithmically-computed indication of whether an entity …\nView visibility.\nUser indication of whether an entity is visible\nUser indication of whether an entity is visible\nEnables or disables the light\nEnables or disables the light\nEnables or disables the light\nVisibility.\nThe current transform.\nAffine 4x3 matrix transposed to 3x4.\nWrites the information needed to do GPU mesh culling to …\nSpecify if clusters should automatically resize in <code>X/Y</code> if …\nSpecify if clusters should automatically resize in <code>X/Y</code> if …\nMultiplier applied to the world distance (within the …\nMultiplier applied to the world distance (within the …\nDistance from the camera where fog is completely opaque, …\nControls how much light is removed due to atmospheric …\nControls how much light is added due to light scattering …\nDistance from the camera where fog is completely …\nHow many additional steps to use at most to find the depth …\nSamples per slice side is also tweakable, but recommended …\nHigher slice count means less noise, but worse performance.\nComponent with a <code>depth_id</code> for specifying which …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nA handle to the environment map helper shader.\nLike <code>EnvironmentMapLight</code>, but contains asset IDs instead …\nA pair of cubemap textures that represent the surroundings …\nInformation about the environment map attached to the …\nA bundle that contains everything needed to make an entity …\nThe blurry image that represents diffuse radiance …\nThe cubemaps that make up this environment map.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nScale factor applied to the diffuse and specular light …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMarks this environment map as a light probe.\nWorld space rotation applied to the environment light …\nContains a transform that specifies the position of this …\nThe typically-sharper, mipmapped image that represents …\nLabel for the compute shader instance data building pass.\nLabel for the screen space ambient occlusion render node.\nLabel for the screen space reflections pass.\nLabel for the shadow pass node.\nLabel for the volumetric lighting pass.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThe component that defines an irradiance volume.\nReturns the argument unchanged.\nCreates <code>Self</code> using <code>default()</code>.\nScale factor applied to the diffuse and specular light …\nCalls <code>U::from(self)</code>.\nThe 3D texture that represents the ambient cubes, encoded …\nAn ambient light, which lights the entire scene equally.\nA more general form of the <code>FogFalloff::Exponential</code> mode. …\nA Directional light.\nA component bundle for <code>DirectionalLight</code> entities.\nConfigures the “classic” computer graphics distance fog…\nA pair of cubemap textures that represent the surroundings …\nAn exponential fog falloff with a given <code>density</code>.\nA squared exponential fog falloff with a given <code>density</code>.\nAllows switching between different fog falloff modes, and …\nA marker component for a light probe, which is a cuboid …\nA linear fog falloff that grows in intensity between <code>start</code> …\nMaterials are used alongside <code>MaterialPlugin</code>, <code>Mesh3d</code>, and …\nA component bundle for entities with a <code>Mesh3d</code> and a …\nAdds the necessary ECS resources and render logic to …\nA material used for rendering a <code>Mesh3d</code>.\nA simple linear interpolation, using a single texture …\nThe parallax mapping method to use to compute depth based …\nA component bundle for PBR entities with a <code>Mesh3d</code> and a …\nA light that emits light in all directions from a central …\nA component bundle for <code>PointLight</code> entities.\nA bundle that contains everything needed to make an entity …\nDiscovers the best depth value based on binary search.\nPlugin for screen space ambient occlusion.\nA light that emits light in a given direction from a …\nA component bundle for spot light entities\nA material with “standard” properties used in PBR …\nReturns this material’s <code>AlphaMode</code>. Defaults to …\nHow to apply the alpha channel of the <code>base_color_texture</code>.\nThe direction of increased roughness, in radians relative …\nIncreases the roughness along a specific direction, so …\nThe resulting (non-absorbed) color after white light …\nHow far, on average, light travels through the volume …\nThe color of the surface of the material before lighting.\nThe UV channel to use for the …\nThe texture component of the material’s color before …\nA direct scale factor multiplied with <code>color</code> before being …\nAn extra thin translucent layer on top of the main PBR …\nThe roughness of the clearcoat material. This is specified …\nThe color of the fog effect.\nThe color of this light source.\nThe color of the light.\nThe color of the light.\nWhether to cull the “front”, “back” or neither …\nReturns this material’s deferred fragment shader. If …\nUsed for selecting the deferred lighting pass for deferred …\nReturns this material’s deferred vertex shader. If …\nAdd a bias to the view depth of the mesh which can be used …\nAdjust rendered depth.\nThe depth map used for parallax mapping.\nThe blurry image that represents diffuse radiance …\nThe amount of light transmitted <em>diffusely</em> through the …\nColor used to modulate the influence of directional light …\nThe exponent applied to the directional light alignment …\nSupport two-sided lighting by automatically flipping the …\nColor the material “emits” to the camera.\nThe UV channel to use for the …\nThe weight in which the camera exposure influences the …\nThe emissive map, multiplies pixels with <code>emissive</code> to get …\nThe cubemaps that make up this environment map.\nDetermines which falloff mode to use, and its parameters.\nNormal map textures authored for DirectX have their …\nWhether to enable fog for this material.\nReturns this material’s fragment shader. If …\nIlluminance in lux (lumens per square meter), representing …\nInherited visibility of an entity.\nInherited visibility of an entity.\nInherited visibility of an entity.\nInherited visibility of an entity.\nInherited visibility of an entity.\nAngle defining the distance from the spot light direction …\nLuminous power in lumens, representing the amount of light …\nLuminous power in lumens, representing the amount of light …\nScale factor applied to the diffuse and specular light …\nThe index of refraction of the material.\nMarks this environment map as a light probe.\nThe exposure (brightness) level of the lightmap, if …\nIn how many layers to split the depth maps for parallax …\nHow “metallic” the material appears, within <code>[0.0, 1.0]</code>.\nThe UV channel to use for the …\nMetallic and roughness maps, stored as a single texture.\nThe UV channel to use for the …\nUsed to fake the lighting of bumps and dents on a material.\nThe UV channel to use for the …\nSpecifies the level of exposure to ambient light.\nReturns if this material should be rendered by the …\nRender method used for opaque materials. (Where <code>alpha_mode</code> …\nAngle defining the distance from the spot light direction …\nHow deep the offset introduced by the depth map should be.\nWhich parallax mapping method to use.\nLinear perceptual roughness, clamped to <code>[0.089, 1.0]</code> in …\nControls if the prepass is enabled for the Material. For …\nReturns this material’s prepass fragment shader. If …\nReturns this material’s prepass vertex shader. If …\nSimulates a light source coming from a spherical volume …\nSimulates a light source coming from a spherical volume …\nCut-off for the light’s area-of-effect. Fragments …\nRange in meters that this light illuminates.\nReturns whether the material would like to read from …\nSpecular intensity for non-metals on a linear scale of …\nWorld space rotation applied to the environment light …\nA bias used when sampling shadow maps to avoid “…\nA value that adjusts the tradeoff between self-shadowing …\nA value that adjusts the tradeoff between self-shadowing …\nThe distance from the light to near Z plane in the shadow …\nThe distance from the light to the near Z plane in the …\nA bias applied along the direction of the fragment’s …\nA bias applied along the direction of the fragment’s …\nA bias applied along the direction of the fragment’s …\nControls if shadows are enabled for the Material.\nWhether this light casts shadows.\nWhether this light casts shadows.\nWhether this light casts shadows.\nContains a transform that specifies the position of this …\nCustomizes the default <code>RenderPipelineDescriptor</code> for a …\nThe typically-sharper, mipmapped image that represents …\nThe amount of light transmitted <em>specularly</em> through the …\nMarker component that indicates that its entity needs to …\nMarker component that indicates that its entity needs to …\nMarker component that indicates that its entity needs to …\nThickness of the volume beneath the material surface.\nWhether to apply only the base color to this material.\nThe transform applied to the UVs corresponding to …\nReturns this material’s vertex shader. If …\nAlgorithmically-computed indication of whether an entity …\nAlgorithmically-computed indication of whether an entity …\nAlgorithmically-computed indication of whether an entity …\nAlgorithmically-computed indication of whether an entity …\nAlgorithmically-computed indication of whether an entity …\nUser indication of whether an entity is visible\nUser indication of whether an entity is visible\nEnables or disables the light\nEnables or disables the light\nEnables or disables the light\nMultiplier applied to the world distance (within the …\nMultiplier applied to the world distance (within the …\nDistance from the camera where fog is completely opaque, …\nControls how much light is removed due to atmospheric …\nControls how much light is added due to light scattering …\nDistance from the camera where fog is completely …\nHow many additional steps to use at most to find the depth …\nDisables wireframe rendering for any entity it is attached …\nEnables wireframe rendering for any entity it is attached …\nSets the color of the <code>Wireframe</code> of the entity it is …\nA <code>Plugin</code> that draws wireframes.\nIf <code>Self::global</code> is set, any <code>Entity</code> that does not have a …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nWhether to show wireframes for all meshes. Can be …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReads inputs and produces <code>backend::PointerHits</code>s. In the …\nOne plugin that contains the <code>PointerInputPlugin</code>, …\nReads <code>backend::PointerHits</code>s, and updates focus, selection, …\nThis entity will not block entities beneath it, nor will …\nProduces pointer input events. In the <code>First</code> schedule.\nGenerates <code>Pointer</code> events and handles event bubbling.\nRuns after all other picking sets. In the <code>PreUpdate</code> …\nGroups the stages of the picking process under shared …\nAn optional component that overrides default picking …\nThis plugin sets up the core picking infrastructure. It …\nRuns after all the focus systems are done, before event …\nRuns after input events are generated but before commands …\nReceives and processes pointer input events. In the …\nThis module provides a simple interface for implementing a …\nThis module defines a stateful set of interaction events …\nDetermines which entities are being hovered by which …\nWhether or not systems updating entities’ …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nThis module provides unsurprising default inputs to …\nWhether or not input collection systems should be running.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nEnables and disables all picking features.\nEnables and disables updating interaction states of …\nIf this is set to <code>false</code> and <code>should_block_lower</code> is set to …\nEnables and disables input collection.\nA mesh ray casting backend for <code>bevy_picking</code>.\nTypes and systems for pointer inputs, such as position and …\nThe picking prelude.\nShould this entity block entities below it from being …\nHolds data from a successful pointer hit test. See …\nAn event produced by a picking backend after it has run …\nThe camera entity used to detect this hit. Useful when you …\n<code>depth</code> only needs to be self-consistent with other …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe normal vector of the hit test, if the data is …\nSet the order of this group of picks. Normally, this is the\nAn unordered collection of entities and their distance …\nThe pointer associated with this hit test.\nThe position of the intersection in the world, if the data …\nThe picking backend prelude.\nTypes and systems for constructing rays from cameras and …\nReads inputs and produces <code>backend::PointerHits</code>s. In the …\nA custom, uniquely identified pointer. Useful for mocking …\nReads <code>backend::PointerHits</code>s, and updates focus, selection, …\nHolds data from a successful pointer hit test. See …\nProduces pointer input events. In the <code>First</code> schedule.\nRuns after all other picking sets. In the <code>PreUpdate</code> …\nThe mouse pointer.\nGroups the stages of the picking process under shared …\nAn optional component that overrides default picking …\nAn event produced by a picking backend after it has run …\nIdentifies a unique pointer entity. <code>Mouse</code> and <code>Touch</code> …\nComponent that tracks a pointer’s current <code>Location</code>.\nRuns after all the focus systems are done, before event …\nRuns after input events are generated but before commands …\nReceives and processes pointer input events. In the …\nA map from <code>RayId</code> to <code>Ray3d</code>.\nA touch input, usually numbered by window touch events …\nThe camera entity used to detect this hit. Useful when you …\n<code>depth</code> only needs to be self-consistent with other …\nIf this is set to <code>false</code> and <code>should_block_lower</code> is set to …\nThe <code>Location</code> of the pointer. Note that a location is both …\nThe normal vector of the hit test, if the data is …\nSet the order of this group of picks. Normally, this is the\nAn unordered collection of entities and their distance …\nThe pointer associated with this hit test.\nThe position of the intersection in the world, if the data …\nShould this entity block entities below it from being …\nIdentifies a ray constructed from some (pointer, camera) …\nA map from <code>RayId</code> to <code>Ray3d</code>.\nThe camera whose projection was used to calculate the ray.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates <code>Self</code> using <code>default()</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIterates over all world space rays for every picking …\nThe hash map of all rays cast in the current frame.\nConstruct a <code>RayId</code>.\nThe pointer whose pixel coordinates were used to calculate …\nClears the <code>RayMap</code> and re-populates it with one ray for each\nFires when a pointer is canceled, and it’s current …\nFires when a pointer sends a pointer down event followed …\nFires when a pointer button is pressed over the <code>target</code> …\nFires while the <code>target</code> entity is being dragged.\nFires when a pointer drops the <code>dropped</code> entity onto the …\nFires when a pointer is dragging the <code>target</code> entity and a …\nFires when a pointer dragging the <code>dragged</code> entity enters …")