searchState.loadedDescShard("bevy", 1, "Creates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe mask to apply when metering. The mask will cover the …\nThe mask to apply when metering. The mask will cover the …\nThe range of exposure values for the histogram.\nThe range of exposure values for the histogram.\nThe speed at which the exposure adapts from dark to bright …\nThe speed at which the exposure adapts from dark to bright …\nThe speed at which the exposure adapts from bright to dark …\nThe speed at which the exposure adapts from bright to dark …\nAdds support for specialized “blit pipelines”, which …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nApplies a bloom effect to an HDR-enabled 2d or 3d camera.\nApplies a threshold filter to the input image to extract …\nThe default bloom preset.\nA preset that’s similar to how older games did bloom.\nA preset that applies a very strong bloom, and blurs the …\nControls whether bloom textures are blended between or …\nControls whether bloom textures are blended between or …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nTightens how much the light scatters (default: 1.0).\nTightens how much the light scatters (default: 1.0).\nControls the baseline of how much the image is scattered …\nControls the baseline of how much the image is scattered …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nLow frequency contribution boost. Controls how much more …\nLow frequency contribution boost. Controls how much more …\nLow frequency contribution boost curve. Controls the …\nLow frequency contribution boost curve. Controls the …\nMaximum size of each dimension for the largest mipchain …\nMaximum size of each dimension for the largest mipchain …\nControls the threshold filter used for extracting the …\nControls the threshold filter used for extracting the …\nBaseline of the quadratic threshold curve (default: 0.0).\nBaseline of the quadratic threshold curve (default: 0.0).\nControls how much to blend between the thresholded and …\nControls how much to blend between the thresholded and …\nUV offset for bloom shader. Ideally close to 2.0 / …\nUV offset for bloom shader. Ideally close to 2.0 / …\nAdds Support for Contrast Adaptive Sharpening (CAS).\nApplies a contrast adaptive sharpening (CAS) filter to the …\nWhether to try and avoid sharpening areas that are already …\nWhether to try and avoid sharpening areas that are already …\nEnable or disable sharpening.\nEnable or disable sharpening.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nAdjusts sharpening strength. Higher values increase the …\nAdjusts sharpening strength. Higher values increase the …\nAlpha mask 2D <code>BinnedPhaseItem</code>s.\nData that must be identical in order to batch phase items …\nA 2D camera component. Enables the 2D render graph for a …\nA <code>bevy_render::render_graph::Node</code> that runs the <code>Opaque2d</code> …\nOpaque 2D <code>BinnedPhaseItem</code>s.\nData that must be identical in order to batch phase items …\nTransparent 2D <code>SortedPhaseItem</code>s.\nThe asset that this phase item is associated with.\nThe asset that this phase item is associated with.\nThe ranges of instances.\nThe ranges of instances.\nThe function used to draw.\nThe function used to draw.\nAn extra index, which is either a dynamic offset or an …\nAn extra index, which is either a dynamic offset or an …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe key, which determines which can be batched.\nThe key, which determines which can be batched.\nThe ID of a bind group specific to the material.\nThe ID of a bind group specific to the material.\nThe identifier of the render pipeline.\nThe identifier of the render pipeline.\nAn entity from which data will be fetched, including the …\nAn entity from which data will be fetched, including the …\nMarker component that indicates that its entity needs to …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nA 3D camera component. Enables the main 3D render graph …\nThe camera coordinate space is right-handed x-right, y-up, …\nThe depth clear operation to perform for the main 3d pass.\nClear with a specified value. Note that 0.0 is the far …\nTrue if multisampled depth textures are supported on this …\nBetter quality. Suitable for high end GPUs. (e.g. Desktop)\nLoad from memory.\nBest performance at the cost of quality. Suitable for …\nA <code>bevy_render::render_graph::Node</code> that runs the <code>Opaque3d</code> …\nA <code>bevy_render::render_graph::Node</code> that runs the …\nA balanced option between quality and performance.\nOpaque 3D <code>BinnedPhaseItem</code>s.\nData that must be identical in order to batch phase items …\nThe quality of the screen space transmission blur effect, …\nThe highest quality, suitable for non-realtime rendering. …\nThe asset that this phase item is associated with.\nThe ranges of instances.\nThe depth clear operation to perform for the main 3d pass.\nThe texture usages for the depth texture created for the …\nThe function used to draw.\nAn extra index, which is either a dynamic offset or an …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe key, which determines which can be batched.\nThe lightmap, if present.\nThe ID of a bind group specific to the material.\nThe identifier of the render pipeline.\nAn entity from which data will be fetched, including the …\nThe quality of the screen space specular transmission blur …\nHow many individual steps should be performed in the …\nMarker component that indicates that its entity needs to …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nAlpha mask phase of the 3D Deferred pass.\nOpaque phase of the 3D Deferred pass.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates <code>Self</code> using <code>default()</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nRender node used by the prepass.\nReturns the argument unchanged.\nCreates <code>Self</code> using <code>default()</code>.\nCalls <code>U::from(self)</code>.\nThe extra texture used as the second render target for the …\nA more accurate simulation, in which circles of confusion …\nA component that enables a depth of field postprocessing …\nThe bind group shared among all invocations of the depth …\nThe layout for the bind group shared among all invocations …\nControls the appearance of the effect.\nThe node in the render graph for depth of field.\nInformation needed to specialize the pipeline …\nA key that uniquely identifies depth of field pipelines.\nA plugin that adds support for the depth of field effect …\nData about the depth of field effect that’s uploaded to …\nA faster simulation, in which out-of-focus areas are …\nBind group layouts for depth of field specific to a single …\nAlong with the focal length, controls how much objects not …\nAlong with the focal length, controls how much objects not …\nGiven the sensor height and the FOV, returns the focal …\nConfigures depth textures so that the depth of field …\nThe distance in meters to the location in focus.\nThe distance in meters to the location in focus.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nInitializes <code>DepthOfField</code> from a set of …\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe maximum diameter, in pixels, that we allow a circle of …\nThe maximum diameter, in pixels, that we allow a circle of …\nObjects are never considered to be farther away than this …\nObjects are never considered to be farther away than this …\nThe appearance of the effect.\nThe appearance of the effect.\nCreates the second render target texture that the first …\nCreates depth of field bind group 1, which is shared among …\nSpecializes the depth of field pipelines specific to a …\nCreates the bind group layouts for the depth of field …\nThe height of the image sensor format in meters.\nThe height of the image sensor format in meters.\nBundle to apply temporal anti-aliasing.\nRender <code>bevy_render::render_graph::Node</code> used by temporal …\nPlugin for temporal anti-aliasing.\nComponent to apply temporal anti-aliasing to a 3D …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSet to true to delete the saved temporal history (past …\nSet to true to delete the saved temporal history (past …\nuses the <code>FULLSCREEN_SHADER_HANDLE</code> to output a\nA component for enabling Fast Approximate Anti-Aliasing …\nAdds support for Fast Approximate Anti-Aliasing (FXAA)\nUse lower sensitivity for a sharper, faster, result. Use …\nTrims the algorithm from processing darks.\nEnable render passes for FXAA.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nA component that enables and configures motion blur when …\nAdds <code>MotionBlur</code> and the required depth and motion vector …\nAdds support for per-object motion blur to the app. See …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe quality of motion blur, corresponding to the number of …\nThe strength of motion blur from <code>0.0</code> to <code>1.0</code>.\nReturns the argument unchanged.\nCreates <code>Self</code> using <code>default()</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThis enables “msaa writeback” support for the <code>core_2d</code> …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates <code>Self</code> using <code>default()</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nShader handle for the shader that draws the transparent …\nHolds the buffers that contain the data of all OIT layers. …\nA plugin that adds support for Order Independent …\nUsed to identify which camera will use OIT to render …\nThreshold for which fragments will be added to the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates <code>Self</code> using <code>default()</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nControls how many layers will be used to compute the …\nBuffer containing the index of the last layer that was …\nThe OIT layers containing depth and color for each …\nThis creates or resizes the oit buffers for each camera. …\nModule that defines the necesasry systems to resolve the …\nShader handle for the shader that sorts the OIT layers, …\nBind group for the OIT resolve pass.\nBind group layouts used for the OIT resolve pass.\nThis key is used to cache the pipeline id and to …\nPlugin needed to resolve the Order Independent …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nContains the render node used to run the resolve pass.\nDepth bind group layout.\nView bind group layout.\nThe node that executes the OIT resolve pass.\nRender label for the OIT resolve pass.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates <code>Self</code> using <code>default()</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nAdds colored fringes to the edges of objects in the scene.\nThe on-GPU version of the <code>ChromaticAberration</code> settings.\nThe render node that runs the built-in postprocessing …\nGPU pipeline data for the built-in postprocessing stack.\nA component attached to cameras in the render world that …\nA key that uniquely identifies a built-in postprocessing …\nA plugin that implements a built-in postprocessing stack …\nA component, part of the render world, that stores the …\nA resource, part of the render world, that stores the …\nThe lookup texture that determines the color gradient.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nThe size of the streaks around the edges of objects, as a …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nA cap on the number of texture samples that will be …\nSpecializes the built-in postprocessing pipeline for each …\nGathers the built-in postprocessing settings for every …\nA 2D camera component. Enables the 2D render graph for a …\nA 3D camera component. Enables the main 3D render graph …\nThe camera coordinate space is right-handed x-right, y-up, …\nThe depth clear operation to perform for the main 3d pass.\nThe texture usages for the depth texture created for the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate an orthographic projection camera with a custom <code>Z</code> …\nThe quality of the screen space specular transmission blur …\nHow many individual steps should be performed in the …\nMarker component that indicates that its entity needs to …\nMarker component that indicates that its entity needs to …\nAlpha mask phase of the 3D prepass.\nIf added to a <code>crate::prelude::Camera3d</code> then deferred …\nIf added to a <code>crate::prelude::Camera3d</code> then depth values …\nIf added to a <code>crate::prelude::Camera3d</code> then screen space …\nIf added to a <code>crate::prelude::Camera3d</code> then vertex world …\nOpaque phase of the 3D prepass.\nThe data used to bin each opaque 3D object in the prepass …\nTextures that are written to by the prepass.\nThe ID of the asset.\nThe deferred gbuffer generated by the deferred pass. …\nA texture that specifies the deferred lighting pass id for …\nThe depth texture generated by the prepass. Exists only if …\nThe function used to draw the mesh.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nInformation that separates items into bins.\nThe ID of a bind group specific to the material.\nThe motion vectors texture generated by the prepass. …\nThe normals texture generated by the prepass. Exists only …\nThe ID of the GPU pipeline.\nAn entity from which Bevy fetches data common to all …\nThe size of the textures.\nRender node used by the prepass.\nReturns the argument unchanged.\nCreates <code>Self</code> using <code>default()</code>.\nCalls <code>U::from(self)</code>.\nSixteen search steps, 8 diagonal search steps, and corner …\nFour search steps; no diagonal or corner detection.\nEight search steps; no diagonal or corner detection.\nA component for enabling Subpixel Morphological …\nA render world component that stores the bind groups …\nValues supplied to the GPU for SMAA.\nThe GPU buffer that holds all <code>SmaaInfoUniform</code>s for all …\nA render world component that stores the offset of each …\nA unique identifier for a set of SMAA pipelines.\nThe render graph node that performs subpixel morphological …\nA render world resource that holds all render pipeline …\nAdds support for subpixel morphological antialiasing, or …\nA preset quality level for SMAA.\nStores the specialized render pipelines for SMAA.\nA render world component that holds the intermediate …\nThirty-two search steps, 8 diagonal search steps, and …\nA render world component that holds the pipeline IDs for …\nA four-channel RGBA texture that stores the output from …\nThe bind group for the second pass (blending weight …\nThe bind group for the first pass (edge detection).\nThe two-channel texture that stores the output from the …\nThe 8-bit stencil texture that records which pixels the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe bind group for the final pass (neighborhood blending).\nA predefined set of SMAA parameters: i.e. a quality level.\nA predefined set of SMAA parameters: i.e. a quality level.\nInformation about the width and height of the framebuffer.\nSame base implementation that Godot 4.0 uses for Tonemap …\nBy Troy Sobotka https://github.com/sobotka/AgX Very …\nDefault Filmic Display Transform from blender. Somewhat …\nEnables a debanding shader that applies dithering to …\nThe hue needs to be changed.\nBypass tonemapping.\nSuffers from lots hue shifting, brights don’t desaturate …\nSuffers from hue shifting. Brights don’t desaturate much …\nSaturation/contrast/gamma/gain/lift for one or more …\nBy Tomasz Stachowiak Has little hue shifting in the darks …\nOptionally enables a tonemapping shader that attempts to …\n3D LUT (look up table) textures used for tonemapping\nVarious flags describing what tonemapping needs to do.\nCurrent Bevy default. By Tomasz Stachowiak …\nThe white balance needs to be adjusted.\nGet a flags value with all known bits set.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nGet the underlying bits value.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nWhether all set bits in a source flags value are also set …\nThe intersection of a source flags value with the …\nGet a flags value with all bits unset.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from a bits value.\nConvert from a bits value exactly.\nConvert from a bits value, unsetting any unknown bits.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nGet a flags value with the bits of a flag with the given …\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nWhether any set bits in a source flags value are also set …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether all known bits in this flags value are set.\nWhether all bits in this flags value are unset.\nYield a set of contained flags values.\nYield a set of contained named flags values.\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe intersection of a source flags value with the …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates <code>Self</code> using <code>default()</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nTotal system cpu usage in %\nDefault max history length for new diagnostics.\nA timeline of <code>DiagnosticMeasurement</code>s of a specific type. …\nA single measurement of a <code>Diagnostic</code>.\nUnique diagnostic path, separated by <code>/</code>.\nRecord new <code>DiagnosticMeasurement</code>’s.\nAdds core diagnostics resources to an App.\nA collection of <code>Diagnostic</code>s.\nAdds “entity count” diagnostic to an App.\nAdds “frame time” diagnostic to an App, specifically …\nAn App Plugin that logs diagnostics to the console.\nTotal system memory usage in %\nExtend <code>App</code> with new <code>register_diagnostic</code> function.\nA resource that stores diagnostic information about the …\nAdds a System Information Diagnostic, specifically …\nAdd a new <code>Diagnostic</code>.\nAdd a new value as a <code>DiagnosticMeasurement</code>.\nAdd a measurement to an enabled <code>Diagnostic</code>. The …\nReturns full path, joined by <code>/</code>\nReturn the simple moving average of this diagnostic’s …\nClear the history of this diagnostic.\nReturns an iterator over path components.\nCreate a new <code>DiagnosticPath</code>. Usable in const contexts.\nReturn the duration between the oldest and most recent …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate a new <code>DiagnosticPath</code> from an iterator over …\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nReturn the maximum number of elements for this diagnostic.\nGet the latest <code>DiagnosticMeasurement</code> from an enabled …\nReturn the number of elements for this diagnostic.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturn an iterator over all <code>Diagnostic</code>s.\nReturn an iterator over all <code>Diagnostic</code>s, by mutable …\nGet the latest measurement from this diagnostic.\nCreate a new <code>DiagnosticPath</code> from the specified string.\nCreate a new diagnostic with the given path.\nRegister a new <code>Diagnostic</code> with an <code>App</code>.\nReturn the exponential moving average of this diagnostic.\nGet the latest value from this diagnostic.\nSet the maximum history length.\nThe smoothing factor used for the exponential smoothing …\nAdd a suffix to use when logging the value, can be used to …\nTypes for defining <code>Archetype</code>s, collections of entities …\nTypes for controlling batching behavior during parallel …\nTypes for handling <code>Bundle</code>s.\nTypes that detect when their internal data mutate.\nTypes for declaring and storing <code>Component</code>s.\nMacro to define a new label trait\nEntity handling types.\nEvent handling types.\nA module for the unified <code>Identifier</code> ID struct, for use as …\nProvides types used to statically intern immutable values.\nTraits used by label implementations\nTypes for creating and storing <code>Observer</code>s\nThe ECS prelude.\nContains APIs for retrieving component data from the world.\nTypes that enable reflection support.\nAlerting events when a component is removed from an entity.\nContains APIs for ordering systems and executing them on a …\nStorage layouts for ECS data.\nTools for controlling behavior in an ECS application.\nA trait for components that let you traverse the ECS.\nDefines the <code>World</code> and APIs for accessing it directly.\nMetadata for a single archetype within a <code>World</code>.\nAn opaque unique joint ID for a <code>Component</code> in an <code>Archetype</code> …\nMetadata about an <code>Entity</code> in a <code>Archetype</code>.\nThe next <code>ArchetypeId</code> in an <code>Archetypes</code> collection.\nAn opaque unique ID for a single <code>Archetype</code> within a <code>World</code>.\nMetadata about how a component is stored in an <code>Archetype</code>.\nAn opaque location within a <code>Archetype</code>.\nThe backing store of all <code>Archetype</code>s within a <code>World</code>.\nMaps a <code>ComponentId</code> to the list of <code>Archetypes</code> that contain …\nThe ID for the <code>Archetype</code> without any components.\nArchetypes and bundles form a graph. Adding or removing a …\nIndex indicating an invalid archetype row. This is meant …\nSafety:\nReturns the number of components that are stored in …\nReturns the total number of components in the archetype\nGets an iterator of all of the components in the archetype.\nChecks if the archetype contains a specific component. …\nFetches an immutable reference to the archetype’s <code>Edges</code>, …\nFetches an immutable reference to the archetype without …\nFetches the entities contained in this archetype.\nFetches the row in the <code>Table</code> where the components for the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates <code>Self</code> using <code>default()</code>.\nReturns the “generation”, a handle to the current …\nFetches an immutable reference to an <code>Archetype</code> using its …\nChecks the cache for the target archetype when adding a …\nFetches the corresponding <code>ArchetypeComponentId</code> for a …\nChecks the cache for the target archetype when removing a …\nGets the type of storage where a component in the …\nChecks the cache for the target archetype when removing a …\nReturns true if any of the components in this archetype …\nReturns true if any of the components in this archetype …\nReturns true if any of the components in this archetype …\nReturns true if any of the components in this archetype …\nReturns true if any of the components in this archetype …\nReturns true if any of the components in this archetype …\nReturns true if any of the components in this archetype …\nReturns true if any of the components in this archetype …\nThe ID of the entity.\nFetches the ID for the archetype.\nGets the index of the row.\nThe plain value of this <code>ArchetypeId</code>.\nThe first archetype.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks if the archetype has any entities.\nReturns a read-only iterator over all archetypes.\nGets the total number of entities that belong to the …\nFetches the total number of <code>Archetype</code>s within the world.\nCreates a <code>ArchetypeRow</code>.\nCreate an <code>ArchetypeId</code> from a plain value.\nGets an iterator of all of the components stored in …\nGets an iterator of all of the components stored in <code>Table</code>s.\nFetches the archetype’s <code>Table</code> ID.\nThe row in the <code>Table</code> where the entity’s components are …\nDictates how a parallel operation chunks up large …\nThe upper and lower limits for a batch of entities.\nConfigures the number of batches to assign to each thread …\nThe number of batches per thread in the <code>ComputeTaskPool</code>. …\nCalculate the batch size according to the given thread …\nDeclares a batching strategy with a fixed batch size.\nReturns the argument unchanged.\nCreates <code>Self</code> using <code>default()</code>.\nCalls <code>U::from(self)</code>.\nConfigures the maximum allowed batch size of this instance.\nConfigures the minimum allowed batch size of this instance.\nCreates a new unconstrained default batching strategy.\nThe <code>Bundle</code> trait enables insertion and removal of <code>Component</code>…\nFor a specific <code>World</code>, this stores a unique value …\nStores metadata associated with a specific type of <code>Bundle</code> …\nMetadata for bundles. Stores a <code>BundleInfo</code> for each type of …\nThe parts from <code>Bundle</code> that don’t require statically …\nReturns the ID of each component contributed by this …\nReturns the ID of each component explicitly defined in …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates <code>Self</code> using <code>default()</code>.\nGets the metadata associated with a specific type of …\nGets this <code>Bundle</code>’s component ids. This will be <code>None</code> if …\nGets the value identifying a specific type of bundle. …\nReturns a value identifying the associated <code>Bundle</code> type.\nReturns the index of the associated <code>Bundle</code> type.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns an iterator over the ID of each component …\nReturns an iterator over the ID of each component …\nReturns an iterator over the ID of each Required Component …\nRegisters components that are required by the components …\nReturns the ID of each Required Component needed by this …\nThe (arbitrarily chosen) minimum number of world tick …\nTypes that can read change detection information. This …\nTypes that implement reliable change detection.\nThe type contained within this smart pointer\nThe maximum change tick difference that won’t overflow …\nUnique mutable borrow of an entity’s component or of a …\nUnique mutable borrow of resources or an entity’s …\nUnique borrow of a non-<code>Send</code> resource.\nShared borrow of an entity’s component with access to …\nShared borrow of a <code>Resource</code>.\nUnique mutable borrow of a <code>Resource</code>.\nReturns a pointer to the value without taking ownership of …\nReturns an immutable pointer to the value without taking …\nManually bypasses change detection, allowing you to mutate …\nReturns the argument unchanged.\nReturns <code>true</code> if this value was changed or mutably …\nCalls <code>U::from(self)</code>.\nReturns the pointer to the value, marking it as changed.\nReturns <code>true</code> if this value was added after the system last …\nReturns <code>true</code> if this value was added or mutably …\nReturns the change tick recording the time this data was …\nTurn this <code>MutUntyped</code> into a <code>Mut</code> by mapping the inner <code>PtrMut</code>…\nReturns a <code>MutUntyped</code> with a smaller lifetime. This is …\nOverwrites this smart pointer with the given value, if and …\nFlags this value as having been changed.\nOverwrites this smart pointer with the given value, if and …\nManually sets the change tick recording the time when this …\nTransforms this <code>MutUntyped</code> into a <code>Mut&lt;T&gt;</code> with the same …\nAn archetype with the component that requires other …\nA data type that can be used to store data for an entity.\nA value describing a component or resource, which may or …\nThe type used for <code>Component</code> lifecycle hooks such as <code>on_add</code>…\n<code>World</code>-mutating functions that run as part of lifecycle …\nA value which uniquely identifies the type of a <code>Component</code> …\nA <code>SystemParam</code> that provides access to the <code>ComponentId</code> for …\nStores metadata for a type of component or resource stored …\nRecords when a component or resource was added and when it …\nStores metadata associated with each kind of <code>Component</code> in …\nThe component is already a directly required component for …\nThe maximum relative age for a change tick. The value of …\nMetadata associated with a required component. See …\nA Required Component constructor. See <code>Component</code> for …\nThe collection of metadata for components that are …\nAn error returned when the registration of a required …\nA constant indicating the storage type used for this …\nProvides fast addition and removal of components, but …\nThe storage used for a specific component type.\nProvides fast and cache-friendly iteration, but slower …\nA value that tracks when a system ran relative to other …\nInterior-mutable access to the <code>Tick</code>s for a single …\nThe tick indicating when the value was added to the world.\nTick recording the time this component or resource was …\nThe tick indicating the last time the value was modified.\nTick recording the time this component or resource was …\nReturns the <code>ComponentId</code> of the given <code>Component</code> type <code>T</code>.\nThe constructor used for the required component.\nGet the function which should be called to clean up values …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nGets the value of this change tick.\nGets the <code>ComponentId</code> for the type <code>T</code>.\nType-erased equivalent of <code>Components::component_id()</code>.\nGets the metadata associated with the given component.\nGets the metadata associated with the given component.\nReturns the name associated with the given component.\nType-erased equivalent of <code>Components::resource_id()</code>.\nProvides a reference to the collection of hooks associated …\nReturns a value uniquely identifying the current component.\nReturns the index of the current component.\nThe depth of the component requirement in the requirement …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if the component or resource was added after …\nReturns <code>true</code> if the component or resource was added or …\nReturns <code>true</code> if there are no components registered with …\nReturns <code>true</code> if this <code>Tick</code> occurred since the system’s …\nReturns <code>true</code> if the underlying component type can be …\nGets an iterator over all components registered with this …\nIterates the ids of all required components. This includes …\nReturns the layout used to store values of this component …\nReturns the number of components registered with this …\nReturns the name of the current component.\nReturns the name of the current component.\nCreates a new <code>ComponentId</code>.\nCreate a new <code>ComponentDescriptor</code> for the type <code>T</code>.\nCreates a new <code>Tick</code> wrapping the given value.\nCreates a new instance with the same change tick for <code>added</code> …\nCreate a new <code>ComponentDescriptor</code> for a resource.\nCreate a new <code>ComponentDescriptor</code>.\nRegister a <code>ComponentHook</code> that will be run when this …\nRegister a <code>ComponentHook</code> that will be run when this …\nRegister a <code>ComponentHook</code> that will be run when this …\nRegister a <code>ComponentHook</code> that will be run when this …\nRegisters a required component.\nRegisters the <code>Component</code> with the given ID as required if …\nRegisters a <code>Component</code> of type <code>T</code> with this instance. If a …\nCalled when registering this component, allowing mutable …\nRegisters a component described by <code>descriptor</code>.\nRegisters a required component.\nRegisters a non-send resource of type <code>T</code> with this instance.\nRegisters required components.\nRegisters a <code>Resource</code> of type <code>T</code> with this instance. If a …\nRegisters a <code>Resource</code> described by <code>descriptor</code>.\nRetrieves the <code>RequiredComponents</code> collection, which …\nReturns the <code>ComponentId</code> of the given <code>Resource</code> type <code>T</code>.\nSets the value of this change tick.\nManually sets the change tick.\nReturns a value indicating the storage strategy for the …\nReturns a value indicating the storage strategy for the …\nAttempt to register a <code>ComponentHook</code> that will be run when …\nAttempt to register a <code>ComponentHook</code> that will be run when …\nAttempt to register a <code>ComponentHook</code> that will be run when …\nAttempt to register a <code>ComponentHook</code> that will be run when …\nReturns the <code>TypeId</code> of the underlying component type. …\nReturns the <code>TypeId</code> of the underlying component type. …\nA <code>World</code>’s internal metadata store on all of its entities.\nLightweight identifier of an entity.\nA <code>BuildHasher</code> that results in a <code>EntityHasher</code>.\nA <code>HashMap</code> pre-configured to use <code>EntityHash</code> hashing.\nA <code>HashSet</code> pre-configured to use <code>EntityHash</code> hashing.\nA very fast hash that is only designed to work on …\nA location of an entity in an archetype.\nAn implementor of this trait knows how to map an <code>Entity</code> …\nOperation to map all contained <code>Entity</code> fields in a type to …\nAn <code>Iterator</code> returning a sequence of <code>Entity</code> values from\nA wrapper for <code>EntityHashMap&lt;Entity&gt;</code>, augmenting it with …\nApply an operation to all entities in a container.\nApply an operation to mutable references to all entities …\nAllocate an entity ID directly.\nAllocate a specific entity ID, overwriting its generation.\nThe ID of the <code>Archetype</code> the <code>Entity</code> belongs to.\nThe index of the <code>Entity</code> within its <code>Archetype</code>.\nClears all <code>Entity</code> from the World.\nReturns true if the <code>Entities</code> contains <code>entity</code>.\nReserves the allocated references to dead entities within …\nAllocates space for entities previously reserved with …\nSafety\nFlushes all reserved entities to an “invalid” state. …\nDestroy an entity, allowing it to be reused.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nReturns the location of an <code>Entity</code>. Note: for pending …\nGets a reference to the underlying <code>EntityHashMap&lt;Entity&gt;</code>.\nGets a mutable reference to the underlying …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks if any entity is currently active.\nThe count of currently allocated entities.\nUpdates all <code>Entity</code> references stored inside using …\nMap an entity to another entity\nReturns the corresponding mapped entity or reserves a new …\nCreates a new <code>SceneEntityMapper</code>, spawning a temporary base …\nEnsure at least <code>n</code> allocations can succeed without …\nReserve entity IDs concurrently.\nReserve one entity ID concurrently.\nGet the <code>Entity</code> with a given id, if it exists in this …\nThe ID of the <code>Table</code> the <code>Entity</code> belongs to.\nThe index of the <code>Entity</code> within its <code>Table</code>.\nThe count of all entities in the <code>World</code> that have ever been …\nApply an operation to all contained entities.\nApply an operation to mutable references to all contained …\nCreates an <code>SceneEntityMapper</code> from a provided <code>World</code> and …\nWhen true, this event will always attempt to propagate …\nWithout any fixed timestep, events should always be …\nSomething that “happens” and might be read / observed …\nStores the state for an <code>EventReader</code> or <code>EventMutator</code>.\nAn <code>EventId</code> uniquely identifies an event stored in a …\nAn iterator that yields any unread events from an …\nAn iterator that yields any unread events (and their IDs) …\nAn iterator that yields any unread events from an …\nAn iterator that yields any unread events (and their IDs) …\nA parallel iterator over <code>Event</code>s.\nMutably reads events of type <code>T</code> keeping track of which …\nA parallel iterator over <code>Event</code>s.\nReads events of type <code>T</code> in order and tracks which events …\nA registry of all of the <code>Events</code> in the <code>World</code>, used by …\nSends events of type <code>T</code>.\nAn event collection that represents the events that …\nAt least one pass of the fixed update schedules has …\n<code>Iterator</code> over sent <code>EventIds</code> from a batch.\nA command to send an arbitrary <code>Event</code>, used by …\nControls whether or not the events in an <code>EventRegistry</code> …\nThe component that describes which Entity to propagate …\nWe need to wait until at least one pass of the fixed …\nChanges the batching strategy used when iterating.\nChanges the batching strategy used when iterating.\nSee <code>EventReader::clear()</code>\nRemoves an event from the world and it’s associated …\nThe event to send.\nA run condition for <code>event_update_system</code>.\nA system that calls <code>Events::update</code> on all registered <code>Events</code>…\nRuns the provided closure for each unread event in …\nRuns the provided closure for each unread event in …\nRuns the provided closure for each unread event in …\nRuns the provided closure for each unread event in …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nUniquely identifies the event associated with this ID.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSee <code>EventReader::is_empty()</code>\nReturns <code>true</code> if there are no events remaining in this …\nReturns <code>true</code> if there are no events remaining in this …\nSee <code>EventReader::len</code>\nReturns the number of <code>Event</code>s to be iterated.\nReturns the number of <code>Event</code>s to be iterated.\nAmount of events we missed.\nCreates a new iterator that yields any <code>events</code> that have …\nCreates a new parallel iterator over <code>events</code> that have not …\nCreates a new iterator that yields any <code>events</code> that have …\nCreates a new parallel iterator over <code>events</code> that have not …\nSee <code>EventReader::par_read</code>\nSee <code>EventMutator::par_read</code>\nSee <code>EventReader::read</code>\nSee <code>EventMutator::read</code>\nSee <code>EventMutator::read_with_id</code>\nSee <code>EventReader::read_with_id</code>\nRegisters an event type to be updated in a given <code>World</code>\nUpdates all of the registered events in the World.\nShould the events be updated?\nSignals the <code>event_update_system</code> to run after <code>FixedUpdate</code> …\nIterate over only the events.\nIterate over only the events.\nA unified identifier for all entity and similar IDs.\nError types for <code>super::Identifier</code> conversions. An ID can …\nReturns the argument unchanged.\nConvert a <code>u64</code> into an <code>Identifier</code>.\nReturns the value of the high segment of the <code>Identifier</code>. …\nCalls <code>U::from(self)</code>.\nReturns the kind of <code>Identifier</code> from the high segment.\nReturns the value of the low segment of the <code>Identifier</code>.\nReturns the masked value of the high segment of the …\nConstruct a new <code>Identifier</code>. The <code>high</code> parameter is masked …\nConvert the <code>Identifier</code> into a <code>u64</code>.\nConvert a <code>u64</code> into an <code>Identifier</code>.\nAn  Error type for <code>super::Identifier</code>, mostly for providing …\nA given ID has an invalid configuration of bits for …\nA given ID has an invalid value for initializing to a …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nA trait for internable values.\nAn interned value. Will stay valid until the end of the …\nA thread-safe interner which can be used to create …\nCasts this value to a form where it can be compared with …\nCasts this value to a form where it can be compared with …\nCasts this value to a form where it can be compared with …\nCasts this value to a form where it can be compared with …\nCasts this value to a form where it can be compared with …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates <code>Self</code> using <code>default()</code>.\nReturn the <code>Interned&lt;T&gt;</code> corresponding to <code>value</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a static reference to <code>self</code>, possibly leaking …\nCreates a new empty interner\nReturns <code>true</code> if the two references point to the same value.\nFeeds the reference to the hasher.\nA pointer type that uniquely owns a heap allocation of …\nAn object safe version of <code>Eq</code>. This trait is automatically …\nAn object safe version of <code>Hash</code>. This trait is …\nReturns a reference to the underlying allocator.\nCasts the type to <code>dyn Any</code>.\nCasts the type to <code>dyn Any</code>.\nReturns a raw mutable pointer to the <code>Box</code>’s contents.\nReturns a raw pointer to the <code>Box</code>’s contents.\nConverts to <code>Box&lt;[T], A&gt;</code>.\nConverts to <code>Box&lt;T, A&gt;</code>.\nReturns a new box with a <code>clone()</code> of this box’s contents.\nCopies <code>source</code>’s contents into <code>self</code> without creating a …\nCopies <code>source</code>’s contents into <code>self</code> without creating a …\nCreates a <code>Box&lt;T&gt;</code>, with the <code>Default</code> value for T.\nAttempts to downcast the box to a concrete type.\nAttempts to downcast the box to a concrete type.\nAttempts to downcast the box to a concrete type.\nDowncasts the box to a concrete type.\nDowncasts the box to a concrete type.\nDowncasts the box to a concrete type.\nThis method tests for <code>self</code> and <code>other</code> values to be equal.\nFeeds this value into the given <code>Hasher</code>.\nReturns the argument unchanged.\nConverts a <code>&amp;mut str</code> into a <code>Box&lt;str&gt;</code>\nCreates a boxed <code>Path</code> from a clone-on-write pointer.\nConverts a <code>str</code> into a box of dyn <code>Error</code>.\nConverts a <code>str</code> into a box of dyn <code>Error</code> + <code>Send</code> + <code>Sync</code>.\nConverts a <code>String</code> into a box of dyn <code>Error</code>.\nConverts a <code>String</code> into a box of dyn <code>Error</code> + <code>Send</code> + <code>Sync</code>.\nCreates a boxed <code>Path</code> from a reference.\nCreates a boxed <code>Path</code> from a reference.\nConverts a type of <code>Error</code> + <code>Send</code> + <code>Sync</code> into a box of dyn …\nConverts an <code>OsString</code> into a Box&lt;OsStr&gt; without copying or …\nConverts a type of <code>Error</code> into a box of dyn <code>Error</code>.\nConverts a <code>Cow</code> into a box of dyn <code>Error</code>.\nConverts a <code>PathBuf</code> into a Box&lt;Path&gt;.\nConverts a <code>[T; N]</code> into a <code>Box&lt;[T]&gt;</code>\nConverts a <code>Cow&lt;&#39;a, OsStr&gt;</code> into a Box&lt;OsStr&gt;, by copying …\nConverts a <code>Box&lt;str&gt;</code> into a <code>Box&lt;[u8]&gt;</code>\nConverts a <code>&amp;CStr</code> into a <code>Box&lt;CStr&gt;</code>, by copying the contents …\nCopies the string into a newly allocated Box&lt;OsStr&gt;.\nConverts a vector into a boxed slice.\nConverts a <code>Cow</code> into a box of dyn <code>Error</code> + <code>Send</code> + <code>Sync</code>.\nConverts a <code>&amp;[T]</code> into a <code>Box&lt;[T]&gt;</code>\nConverts a <code>Cow&lt;&#39;_, str&gt;</code> into a <code>Box&lt;str&gt;</code>\nCopies the string into a newly allocated Box&lt;OsStr&gt;.\nConverts the given <code>String</code> to a boxed <code>str</code> slice that is …\nConverts a <code>CString</code> into a Box&lt;CStr&gt; without copying or …\nConverts a <code>Cow&lt;&#39;a, CStr&gt;</code> into a <code>Box&lt;CStr&gt;</code>, by copying the …\nConverts a <code>&amp;mut [T]</code> into a <code>Box&lt;[T]&gt;</code>\nConverts a <code>Cow&lt;&#39;_, [T]&gt;</code> into a <code>Box&lt;[T]&gt;</code>\nConverts a <code>&amp;str</code> into a <code>Box&lt;str&gt;</code>\nConverts a <code>&amp;mut CStr</code> into a <code>Box&lt;CStr&gt;</code>, by copying the …\nConverts a <code>T</code> into a <code>Box&lt;T&gt;</code>\nConstructs a box from a <code>NonNull</code> pointer.\nConstructs a box from a <code>NonNull</code> pointer in the given …\nConstructs a box from a raw pointer.\nConstructs a box from a raw pointer in the given allocator.\nCreates <code>Self</code> using <code>default()</code>.\nCalls <code>U::from(self)</code>.\nConverts a <code>Box&lt;T&gt;</code> into a <code>Box&lt;[T]&gt;</code>\nConsumes the <code>Box</code>, returning the wrapped value.\nConsumes the <code>Box</code>, returning a wrapped <code>NonNull</code> pointer.\nConsumes the <code>Box</code>, returning a wrapped <code>NonNull</code> pointer and …\nConverts a <code>Box&lt;T&gt;</code> into a <code>Pin&lt;Box&lt;T&gt;&gt;</code>. If <code>T</code> does not …\nConsumes the <code>Box</code>, returning a wrapped raw pointer.\nConsumes the <code>Box</code>, returning a wrapped raw pointer and the …\nConsumes and leaks the <code>Box</code>, returning a mutable reference, …\nAllocates memory on the heap and then places <code>x</code> into it.\nAllocates memory in the given allocator then places <code>x</code> into …\nConstructs a new box with uninitialized contents.\nConstructs a new box with uninitialized contents in the …\nConstructs a new boxed slice with uninitialized contents.\nConstructs a new boxed slice with uninitialized contents …\nConstructs a new <code>Box</code> with uninitialized contents, with the …\nConstructs a new <code>Box</code> with uninitialized contents, with the …\nConstructs a new boxed slice with uninitialized contents, …\nConstructs a new boxed slice with uninitialized contents …\nConstructs a new <code>Pin&lt;Box&lt;T&gt;&gt;</code>. If <code>T</code> does not implement <code>Unpin</code>…\nConstructs a new <code>Pin&lt;Box&lt;T, A&gt;&gt;</code>. If <code>T</code> does not implement …\nAttempts to convert a <code>Box&lt;[T]&gt;</code> into a <code>Box&lt;[T; N]&gt;</code>.\nAttempts to convert a <code>Vec&lt;T&gt;</code> into a <code>Box&lt;[T; N]&gt;</code>.\nAllocates memory on the heap then places <code>x</code> into it, …\nAllocates memory in the given allocator then places <code>x</code> into …\nConstructs a new box with uninitialized contents on the …\nConstructs a new box with uninitialized contents in the …\nConstructs a new boxed slice with uninitialized contents. …\nConstructs a new boxed slice with uninitialized contents …\nConstructs a new <code>Box</code> with uninitialized contents, with the …\nConstructs a new <code>Box</code> with uninitialized contents, with the …\nConstructs a new boxed slice with uninitialized contents, …\nConstructs a new boxed slice with uninitialized contents …\nWrites the value and converts to <code>Box&lt;T, A&gt;</code>.\nCollection of <code>ObserverRunner</code> for <code>Observer</code> registered to a …\nCollection of <code>ObserverRunner</code> for <code>Observer</code> registered to a …\nEmit a trigger for a dynamic component id. This is unsafe …\nAn <code>Observer</code> system. Add this <code>Component</code> to an <code>Entity</code> to …\nA description of what an <code>Observer</code> observes.\nType for function that is run when an observer is …\nContains <code>Observer</code> information. This defines how a given …\nEvent trigger metadata for a given <code>Observer</code>,\nMetadata for observers. Stores a cache mapping trigger ids …\nType containing triggered <code>Event</code> information for a given …\nA <code>Command</code> that emits a given trigger for a given set of …\nRepresents a collection of targets for a specific <code>Trigger</code> …\nThe components the trigger should target.\nReturns the components that the trigger targeted.\nThe entities the trigger should target.\nThe entity the trigger targeted.\nThe event to trigger.\nThe <code>Event</code> the trigger targeted.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSets the event type of the resulting trigger, used for …\nThe <code>Entity</code> of the observer handling the trigger.\nThe targets to trigger the event for.\nObserve the given <code>ComponentId</code> list. This will cause the …\nAdd the given <code>components</code> to the descriptor.\nObserve the given <code>Entity</code> list. This will cause the <code>Observer</code>…\nAdd the given <code>entities</code> to the descriptor.\nObserve the given <code>event</code>. This will cause the <code>Observer</code> to …\nObserve the given event list. This will cause the <code>Observer</code> …\nAdd the given <code>events</code> to the descriptor.\nWhen true, this event will always attempt to propagate …\nA filter on a component that only retains results the …\nThe <code>AnyOf</code> query parameter fetches entities with any of the …\nA <code>Resource</code> storing <code>TypeRegistry</code> for type registrations …\nThe <code>Bundle</code> trait enables insertion and removal of <code>Component</code>…\nA filter on a component that only retains results the …\nA <code>World</code> mutation.\nA <code>Command</code> queue to perform structural changes to the <code>World</code>.\nA data type that can be used to store data for an entity.\nA system that determines if one or more scheduled systems …\nA <code>SystemParam</code> that stores a buffer which gets applied to …\nTypes that can read change detection information. This …\nTypes that implement reliable change detection.\nLightweight identifier of an entity.\nA <code>Command</code> which gets executed for a given <code>Entity</code>.\nA list of commands that will be run to modify an entity.\nAn implementor of this trait knows how to map an <code>Entity</code> …\nProvides mutable access to a single entity and all of its …\nA read-only reference to a particular <code>Entity</code> and all of …\nA mutable reference to a particular <code>Entity</code>, and the entire …\nSomething that “happens” and might be read / observed …\nMutably reads events of type <code>T</code> keeping track of which …\nReads events of type <code>T</code> in order and tracks which events …\nSends events of type <code>T</code>.\nAn event collection that represents the events that …\nProvides read-only access to a set of <code>Resource</code>s defined by …\nProvides mutable access to a set of <code>Resource</code>s defined by …\nCreates an instance of the type this trait is implemented …\nReturns a bool that describes if an entity has the …\nA <code>SystemInput</code> type which denotes that a <code>System</code> receives an …\nThe input type of this system. See <code>System::In</code>.\nThe system’s input.\nA <code>SystemInput</code> type which denotes that a <code>System</code> receives a …\nA <code>SystemInput</code> type which denotes that a <code>System</code> receives a …\nThe type contained within this smart pointer\nThe inner input type that is passed to functions that run …\nConversion trait to turn something into a <code>System</code>.\nTypes that can convert into a <code>SystemConfigs</code>.\nTypes that can be converted into a <code>SystemSet</code>.\nTypes that can convert into a <code>SystemSetConfigs</code>.\nA system local <code>SystemParam</code>.\nUnique mutable borrow of an entity’s component or of a …\nShared borrow of a non-<code>Send</code> resource.\nUnique borrow of a non-<code>Send</code> resource.\nAn <code>Observer</code> system. Add this <code>Component</code> to an <code>Entity</code> to …\nTrigger emitted when a component is added to an entity. …\nTrigger emitted when a component is inserted onto an …\nTrigger emitted when a component is removed from an …\nTrigger emitted when a component is replaced on an entity. …\nA filter that tests if any of the given filters apply.\nThe return type of this system. See <code>System::Out</code>.\nThe system’s output.\nAn entity ID with a placeholder value. This may or may not …\nAn alternative to <code>Commands</code> that can be used in parallel …\nThe wrapper input type that is defined as the first …\nThe <code>SystemParam</code>/s used by this system to access the <code>World</code>.\nA collection of potentially conflicting <code>SystemParam</code>s …\nSystem parameter that works very much like <code>Query</code> except it …\nSystem parameter that provides selective access to the …\nBuilder struct to create <code>QueryState</code> instances at runtime.\nProvides scoped access to a <code>World</code> state according to a …\n<code>System</code> types that do not modify the <code>World</code> when run. This …\nShared borrow of an entity’s component with access to …\nA struct used to operate on reflected <code>Component</code> trait of a …\nA struct used to operate on the reflected <code>FromWorld</code> trait …\nA struct used to operate on reflected <code>Resource</code> of a type.\nA <code>SystemParam</code> that yields entities that had their <code>T</code> …\nShared borrow of a <code>Resource</code>.\nUnique mutable borrow of a <code>Resource</code>.\nA type that can be inserted into a <code>World</code> as a singleton.\nA constant indicating the storage type used for this …\nA collection of systems, and the metadata and executor …\nResource that stores <code>Schedule</code>s mapped to <code>ScheduleLabel</code>s …\nThe type of <code>SystemSet</code> this instance converts into.\nSystem parameter that provides access to single entity’s …\nAn ECS system that can be added to a <code>Schedule</code>\nThe type of <code>System</code> that this instance converts into.\nShorthand way to get the <code>System::In</code> for a <code>System</code> as a …\nTrait for types that can be used as input to <code>System</code>s.\nA builder that can create a <code>SystemParam</code>.\nA trait implemented for all functions that can be used as …\nTypes that identify logical groups of systems.\nDerive macro generating an impl of the trait <code>SystemSet</code>.\nThe component that describes which Entity to propagate …\nType containing triggered <code>Event</code> information for a given …\nFilter that selects entities with a component <code>T</code>.\nFilter that selects entities without a component <code>T</code>.\nStores and exposes operations on entities, components, …\nReturns a reference to the <code>FilteredAccess</code> that will be …\nReturns a reference to the underlying <code>Access</code>.\nReturns a reference to the underlying <code>Access</code>.\nInsert an asset similarly to <code>Assets::add</code>.\nSpawns an <code>Observer</code> and returns the <code>EntityCommands</code> …\nSpawns a “global” <code>Observer</code> which will watch for the …\nAdds the specified <code>Schedule</code> to the world. The schedule can …\nAdd a collection of systems to the schedule.\nAdds one or more systems to the <code>Schedule</code> matching the …\nRun after all systems in <code>set</code>. If <code>set</code> has any systems that …\nRuns before all systems in <code>set</code>. If <code>set</code> has any systems …\nRun after all systems in <code>set</code>.\nRun after all systems in <code>set</code>.\nIgnore system order ambiguities caused by conflicts on …\nIgnore system order ambiguities caused by conflicts on …\nIgnore system order ambiguities caused by conflicts on …\nIgnore system order ambiguities caused by conflicts on …\nSuppress warnings and errors that would result from these …\nSuppress warnings and errors that would result from …\nSuppress warnings and errors that would result from these …\nSuppress warnings and errors that would result from …\nTakes a function over mutable access to a <code>QueryBuilder</code>, …\nReturns a new run condition that only returns <code>true</code> if both …\nReturns a new run condition that only returns <code>true</code> if both …\nA <code>Condition</code>-satisfying system that returns <code>true</code> if there …\nA <code>Condition</code>-satisfying system that returns <code>true</code> if there …\nTake all commands from <code>other</code> and append them to <code>self</code>, …\nExecutes this command for the given <code>Entity</code>.\nApplies this command, causing it to mutate the provided …\nUses reflection to set the value of this <code>Component</code> type in …\nUses reflection to set the value of this <code>Resource</code> type in …\nInstructs the executor to call <code>System::apply_deferred</code> on …\nApplies any <code>Deferred</code> system parameters (or other system …\nDirectly applies any accumulated <code>Deferred</code> system …\nUses reflection to set the value of this <code>Component</code> type in …\nUses reflection to set the value of this <code>Resource</code> type in …\nReturns the archetype that the current entity belongs to.\nReturns the archetype that the current entity belongs to.\nReturns the archetype that the current entity belongs to.\nReturns the system’s archetype component <code>Access</code>.\nRetrieves this world’s <code>Archetypes</code> collection.\nAllows you access to the dereferenced value of this …\nAllows you access to the dereferenced value of this …\nAllows you access to the dereferenced value of this …\nCasts this value to a form where it can be compared with …\nGets a <code>QueryLens</code> with the same accesses as the existing …\nConverts this <code>QueryState</code> reference to a <code>QueryState</code> that …\nGets read-only access to all of the entity’s components.\nGets read-only access to all of the resources this …\nCreates a new <code>UnsafeWorldCell</code> view with complete …\nCreates a new <code>UnsafeWorldCell</code> view with only read access …\nRuns before all systems in <code>set</code>. If <code>self</code> has any systems …\nRuns before all systems in <code>set</code>. If <code>self</code> has any systems …\nRun before all systems in <code>set</code>.\nRun before all systems in <code>set</code>.\nRegisters any <code>World</code> access used by this <code>SystemParam</code> and …\nCreate a <code>QueryState</code> with the accesses of the builder.\nCreate a <code>SystemState</code> from a <code>SystemParamBuilder</code>. To create …\nRetrieves this world’s <code>Bundles</code> collection.\nManually bypasses change detection, allowing you to mutate …\nTreat this collection as a sequence of systems.\nTreat this collection as a sequence of system sets.\nTreat this collection as a sequence of systems.\nTreat this collection as a sequence of systems.\nReads the current change tick of this world.\nChecks any <code>Tick</code>s stored on this system and wraps their …\nIterates all component change ticks and clamps any older …\nRemoves all components associated with the entity.\nRemoves all components associated with the entity.\nRemoves all events.\nConsumes all available events.\nConsumes all available events.\nConsumes all available events.\nRuns both <code>clear_entities</code> and <code>clear_resources</code>, invalidating …\nDespawns all entities in this <code>World</code>.\nClears all resources in this <code>World</code>.\nClears the internal component tracker state.\nCopies a reference to a resource.\nTemporarily provides access to the <code>Commands</code> for the …\nReturns the underlying <code>Commands</code>.\nCreates a new <code>Commands</code> instance that writes to the world’…\nReturns a mutable reference to the underlying <code>Commands</code>.\nReturns the system’s component <code>Access</code>.\nReturns the components accessed by this query.\nReturns the <code>ComponentId</code> of the given <code>Component</code> type <code>T</code>.\nReturns the components that triggered the observer, out of …\nReturns read-only components for the current entity that …\nReturns read-only components for the current entity that …\nRetrieves this world’s <code>Components</code> collection.\nReturns read-only components for the current entity that …\nGenerates a <code>Condition</code> that returns true when the passed …\nGenerates a <code>Condition</code> that returns true when the result of …\nApplies the provided <code>ScheduleBuildSettings</code> to all …\nConfigures a collection of system sets in this schedule, …\nConfigures a collection of system sets in the provided …\nReturns <code>true</code> if the given <code>Entity</code> matches the query.\nReturns <code>true</code> if the given <code>Entity</code> matches the query.\nReturns <code>true</code> if the current entity has a component of type …\nReturns <code>true</code> if the current entity has a component of type …\nReturns whether entity contains this <code>Component</code>\nDoes a schedule with the provided label already exist?\nReturns <code>true</code> if the current entity has a component of type …\nReturns <code>true</code> if the current entity has a component …\nReturns <code>true</code> if the current entity has a component …\nReturns <code>true</code> if the current entity has a component …\nReturns <code>true</code> if a resource of type <code>R</code> exists. Otherwise …\nReturns <code>true</code> if a resource with provided <code>component_id</code> …\nReturns <code>true</code> if a resource of type <code>R</code> exists. Otherwise …\nReturns <code>true</code> if a resource with provided <code>component_id</code> …\nReturns <code>true</code> if the current entity has a component with …\nReturns <code>true</code> if the current entity has a component with …\nReturns <code>true</code> if the current entity has a component with …\nGets the value of this <code>Component</code> type from entity from …\nGets the value of this <code>Resource</code> type from <code>source_world</code> and …\nAdds accesses required for <code>T</code> to self.\nCreates a schedule with a default label. Only use in …\nReturns the system’s default system sets.\nDespawns the entity. This will emit a warning if the …\nDespawns the current entity.\nDespawns the given <code>entity</code>, if it exists. This will also …\nDespawns the provided entity and its children. This will …\nDespawns the provided entity and its children. This will …\nAdd a run condition to each contained system.\nCreates a draining iterator that removes all events.\nClones this <code>SystemSet</code>.\nFeeds this value into the given <code>Hasher</code>.\nRetrieves this world’s <code>Entities</code> collection.\nRetrieves this world’s <code>Entities</code> collection mutably.\nReturns the <code>Entity</code> that triggered the observer, could be …\nReturns the <code>EntityCommands</code> for the requested <code>Entity</code>.\nReturns <code>EntityRef</code>s that expose read-only operations for …\nReturns <code>EntityMut</code>s that expose read and write operations …\nGet an <code>EntityEntryCommands</code> for the <code>Component</code> <code>T</code>, allowing …\nGets an Entry into the world for this entity and component …\nReturns a mutable reference to the schedules associated …\nReturns a reference to the triggered event.\nReturns a mutable reference to the triggered event.\nReturns a pointer to the triggered event.\nReturns the event type of this trigger.\nFetch underlying <code>Events</code>.\nAdds access to self’s underlying <code>FilteredAccess</code> …\nAdds filter from <code>T</code> to self.\nOptionally maps to an inner value by applying a function …\nOptionally maps to an inner value by applying a function …\nOptionally maps to an inner value by applying a function …\nEnsures any commands triggered by the actions of Self are …\nFlushes queued entities and commands.\nThe underlying function pointers implementing methods on …\nThe underlying function pointers implementing methods on …\nThe underlying function pointers implementing methods on …\nCalls a closure for each parameter in the set.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert a <code>Res</code> into a <code>Ref</code>. This allows keeping the …\nReturns the argument unchanged.\nConvert this <code>ResMut</code> into a <code>Mut</code>. This allows keeping the …\nConvert this <code>NonSendMut</code> into a <code>Mut</code>. This allows keeping …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReconstruct an <code>Entity</code> previously destructured with …\nCreates a new <code>QueryState</code> from a given <code>QueryBuilder</code> and …\nCreates a new entity ID with the specified <code>index</code> and a …\nCreates <code>Self</code> using data from the given <code>World</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nConstructs default reflected <code>FromWorld</code> from world using …\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nReturns the generation of this Entity’s index. The …\nGets the query result for the given <code>World</code> and <code>Entity</code>.\nReturns the read-only query item for the given <code>Entity</code>.\nGets access to the component of type <code>T</code> for the current …\nGets access to the component of type <code>T</code> for the current …\nGets a reference to the resource of the given type if it …\nRetrieves a reference to the given <code>entity</code>’s <code>Component</code> of …\nReturns a reference to the schedule associated with <code>label</code>, …\nGets access to the component of type <code>T</code> for the current …\nGets a reference to the resource of the given type if it …\nReturns the schedule’s current <code>ScheduleBuildSettings</code>.\nReturns untyped read-only reference(s) to component(s) for …\nReturns untyped read-only reference(s) to component(s) for …\nGets a pointer to the resource with the given <code>ComponentId</code> …\nRetrieves an immutable untyped reference to the given …\nReturns untyped read-only reference(s) to component(s) for …\nGets a pointer to the resource with the given <code>ComponentId</code> …\nRetrieves the change ticks for the given component. This …\nRetrieves the change ticks for the given component. This …\nRetrieves the change ticks for the given component. This …\nRetrieves the change ticks for the given <code>ComponentId</code>. This …\nRetrieves the change ticks for the given <code>ComponentId</code>. This …\nRetrieves the change ticks for the given <code>ComponentId</code>. This …\nGets this <code>Bundle</code>’s component ids. This will be <code>None</code> if …\nReturns read-only components for the current entity that …\nReturns read-only components for the current entity that …\nReturns read-only components for the current entity that …\nGets a new <code>EventCursor</code>. This will include all events …\nGets a new <code>EventCursor</code>. This will ignore all events …\nReturns the <code>EntityCommands</code> for the requested <code>Entity</code>, if it …\nReturns <code>EntityRef</code>s that expose read-only operations for …\nReturns <code>EntityMut</code>s that expose read and write operations …\nGet a specific event by id if it still exists in the …\nReturns the schedule’s current execution strategy.\nReturns the query item for the given <code>Entity</code>, with the …\nGets the tick indicating the last time this system ran.\nGets the query result for the given <code>World</code> and <code>Entity</code>.\nReturns the read-only query results for the given array of …\nReturns the read-only query items for the given array of …\nGets an <code>EntityRef</code> for multiple entities at once.\nGets an <code>EntityRef</code> for multiple entities at once, whose …\nGets mutable access to multiple entities, whose number is …\nGets mutable access to multiple entities, contained in a …\nGets mutable access to multiple entities.\nReturns the query results for the given array of <code>Entity</code>.\nReturns the query items for the given array of <code>Entity</code>.\nGets the query result for the given <code>World</code> and <code>Entity</code>.\nReturns the query item for the given <code>Entity</code>.\nAccesses the parameter at the given index. No other …\nGets mutable access to the component of type <code>T</code> for the …\nGets mutable access to the component of type <code>T</code> for the …\nGets a mutable reference to the resource of the given type …\nRetrieves a mutable reference to the given <code>entity</code>’s …\nReturns a mutable reference to the schedule associated …\nReturns untyped mutable reference(s) to component(s) for …\nReturns untyped mutable reference(s) to component(s) for …\nGets a mutable pointer to the resource with the given …\nRetrieves a mutable untyped reference to the given <code>entity</code>…\nGets a <code>!Send</code> resource to the resource with the id …\nGets a <code>!Send</code> resource to the resource with the id …\nGets a reference to the non-send resource of the given …\nGets a mutable reference to the non-send resource of the …\nPushes a <code>Command</code> to the queue for creating a new <code>Entity</code> if …\nReturns an <code>EntityWorldMut</code> for the given <code>entity</code> (if it …\nReturns the value of the flag that controls event …\nGets a new <code>EventCursor</code>. This will include all events …\nGets a new <code>EventCursor</code>. This will ignore all events …\nGets access to the component of type <code>T</code> for the current …\nGets access to the component of type <code>T</code> for the current …\nGets access to the component of type <code>T</code> for the current …\nRetrieves a reference to the given <code>entity</code>’s <code>Component</code> of …\nRetrieves a mutable reference to the given <code>entity</code>’s …\nRetrieves the required components for the given component …\nRetrieves the required components for the component of the …\nGets a reference to the resource of the given type if it …\nGets a pointer to the resource with the id <code>ComponentId</code> if …\nRetrieves the change ticks for the given resource.\nRetrieves the change ticks for the given <code>ComponentId</code>.\nGets a mutable reference to the resource of the given type …\nGets a pointer to the resource with the id <code>ComponentId</code> if …\nGets a mutable reference to the resource of type <code>T</code> if it …\nGets a mutable reference to the resource of type <code>T</code> if it …\nGets a reference including change detection to the …\nReturns a single immutable query result when there is …\nReturns a single read-only query item when there is …\nReturns a single mutable query result when there is …\nReturns a single query item when there is exactly one …\nReturns a query result when there is exactly one entity …\nReturns a query result when there is exactly one entity …\nGets the query result for the given <code>World</code> and <code>Entity</code>.\nReturns the query item for the given <code>Entity</code>.\nReturns the <code>ScheduleGraph</code>.\nReturns a mutable reference to the <code>ScheduleGraph</code>.\nReturns true if system has deferred buffers.\nReturns <code>true</code> if the <code>FilteredResources</code> has read access to …\nReturns <code>true</code> if the <code>FilteredResources</code> has access to the …\nReturns <code>true</code> if the <code>FilteredResources</code> has write access to …\nReturns the <code>Entity</code> id of the entity.\nReturns the ID of the current entity.\nReturns the ID of the current entity.\nRetrieves this <code>World</code>’s unique ID\nReturns the ID of the current entity.\nSuppress warnings and errors that would result from …\nSuppress warnings and errors that would result from …\nList of <code>ComponentId</code>s to ignore when reporting system order …\nAdd these systems to the provided <code>set</code>.\nAdd these system sets to the provided <code>set</code>.\nIncrements the world’s current change tick and returns …\nReturn a transiently unique identifier.\nInitializes a new non-send resource and returns the …\nPushes a <code>Command</code> to the queue for inserting a <code>Resource</code> in …\nInitializes a new resource and returns the <code>ComponentId</code> …\nInitialize the system.\nInitializes any newly-added systems and conditions, …\nAdds a <code>Bundle</code> of components to the entity.\nAdds a <code>Bundle</code> of components to the entity.\nInsert a reflected <code>Component</code> into the entity like <code>insert()</code>.\nInsert a reflected <code>Resource</code> into the world like <code>insert()</code>.\nInserts a labeled schedule into the map.\nPushes a <code>Command</code> to the queue for adding a <code>Bundle</code> type to …\nFor a given batch of (<code>Entity</code>, <code>Bundle</code>) pairs, adds the …\nPushes a <code>Command</code> to the queue for adding a <code>Bundle</code> type to …\nFor a given batch of (<code>Entity</code>, <code>Bundle</code>) pairs, adds the …\nAdds a dynamic component to an entity.\nInserts a dynamic <code>Component</code> into the entity.\nInserts a dynamic <code>Bundle</code> into the entity.\nSimilar to <code>Self::insert</code> but will only insert if the …\nAdds a <code>Bundle</code> of components to the entity without …\nAdds a <code>Bundle</code> of components to the entity without …\nAdds a <code>Bundle</code> of components to the entity without …\nInserts a new <code>!Send</code> resource with the given <code>value</code>. Will …\nInserts a new non-send resource with the given <code>value</code>.\nPushes a <code>Command</code> to the queue for creating entities, if …\nFor a given batch of (<code>Entity</code>, <code>Bundle</code>) pairs, either spawns …\nPushes a <code>Command</code> to the queue for inserting a <code>Resource</code> in …\nInserts a new resource with the given <code>value</code>.\nInserts a new resource with the given <code>value</code>. Will replace …\nReturns the components of an <code>Entity</code> through <code>ComponentInfo</code>.\nReturns an <code>Interned</code> value corresponding to <code>self</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConsumes <code>self</code> and gets access to the component of type <code>T</code> …\nConsumes <code>self</code> and gets access to the component of type <code>T</code> …\nConsumes <code>self</code> and returns untyped read-only reference(s) to\nConsumes <code>self</code> and returns untyped read-only reference(s) to\nConvert into a <code>SystemConfigs</code>.\nDue to lifetime limitations of the <code>Deref</code> trait, this …\nConsume <code>self</code> and return a mutable reference to the …\nConsume <code>self</code> and return a mutable reference to the …\nReturns the reference wrapped by this type. The reference …\nConsume <code>self</code> and return a mutable reference to the …\nReturns the inner item with ownership.\nReturns the inner item with ownership.\nConsumes self and gets mutable access to the component of …\nConsumes <code>self</code> and gets mutable access to the component of …\nConsumes self and gets mutable access to resource of the …\nConsumes <code>self</code> and returns untyped mutable reference(s) to …\nConsumes <code>self</code> and returns untyped mutable reference(s) to …\nConsumes self and gets mutable access to resource with the …\nConsumes <code>self</code> and gets access to the component of type <code>T</code> …\nConsumes <code>self</code> and gets access to the component of type <code>T</code> …\nTurns this value into its corresponding <code>System</code>.\nConverts this instance to its associated <code>SystemSet</code> type.\nReturns this entity’s <code>World</code>, consuming itself.\nReturns <code>true</code> if this value was added after the system last …\nReturns <code>true</code> if the resource was added after the system …\nReturns <code>true</code> if this system set is an <code>AnonymousSet</code>.\nReturns <code>true</code> if this value was added or mutably …\nReturns <code>true</code> if the resource was added or mutably …\nChecks if the query is empty for the given <code>World</code>, where …\nReturns <code>true</code> if there are no query items.\nReturns true if there are no events currently stored in …\nReturns <code>true</code> if there are no events available to read.\nReturns <code>true</code> if there are no events available to read.\nReturns <code>true</code> if there are no events available to read.\nReturns true if the system must be run exclusively.\nReturns <code>true</code> if a resource of type <code>R</code> exists and was added …\nReturns <code>true</code> if a resource with id <code>component_id</code> exists and …\nReturns <code>true</code> if a resource of type <code>R</code> exists and was …\nReturns <code>true</code> if a resource with id <code>component_id</code> exists and …\nReturns true if the system is <code>Send</code>.\nReturns an <code>Iterator</code> over the query results for the given …\nReturns an <code>Iterator</code> over the read-only query items.\nReturns an iterator over all schedules. Iteration order is …\nReturns an <code>Iterator</code> over all possible combinations of <code>K</code> …\nReturns a <code>QueryCombinationIter</code> over all combinations of <code>K</code> …\nReturns an <code>Iterator</code> over all possible combinations of <code>K</code> …\nReturns a <code>QueryCombinationIter</code> over all combinations of <code>K</code> …\nReturns an <code>Iterator</code> over all possible combinations of <code>K</code> …\nIterates over all possible combinations of <code>K</code> query items …\nIterates over events that happened since the last “update…\nReturns an <code>Entity</code> iterator of current entities.\nReturns a mutable iterator over all entities in the <code>World</code>.\nIterate through the <code>ComponentId</code>’s that will be ignored.\nReturns an <code>Iterator</code> over the query items, with the actual …\nReturns an <code>Iterator</code> over the query results for the given …\nReturns an <code>Iterator</code> over the read-only query items …\nReturns an <code>Iterator</code> over the read-only query items …\nReturns an <code>Iterator</code> over the read-only query items …\nReturns an iterator over the query items generated from an …\nReturns an iterator over the query items generated from an …\nReturns an <code>Iterator</code> over the query items generated from an …\nReturns an <code>Iterator</code> over the query results for the given …\nReturns an <code>Iterator</code> over the query items.\nReturns an iterator over mutable references to all …\nIterates over all resources in the world.\nMutably iterates over all resources in the world.\nReturns an <code>Iterator</code> over the query results for the given …\nReturns an <code>Iterator</code> over the query items.\nUse this to combine two queries. The data accessed will be …\nReturns a <code>QueryLens</code> that can be used to get a query with …\nUse this to combine two queries. The data accessed will be …\nEquivalent to <code>Self::join</code> but also includes a <code>QueryFilter</code> …\nGet the <code>InternedScheduleLabel</code> for this <code>Schedule</code>.\nWhen called from within an exclusive system (a <code>System</code> that …\nSets <code>World::last_change_tick()</code> to the specified value …\nReturns the change tick recording the time this data was …\nReturns the number of events currently stored in the event …\nDetermines the number of events available to be read from …\nDetermines the number of events available to be read from …\nDetermines the number of removal events available to be …\nLoad an asset similarly to <code>AssetServer::load</code>.\nLoad an asset with settings, similarly to …\nGets metadata indicating the location where the current …\nGets metadata indicating the location where the current …\nGets metadata indicating the location where the current …\nLogs the components of the entity at the info level.\nReturns the read-only query items for the given array of …\nGets an <code>EntityRef</code> for multiple entities at once.\nGets mutable access to multiple entities at once.\nReturns the query items for the given array of <code>Entity</code>.\nMap <code>Ref</code> to a different type using <code>f</code>.\nPass the output of this system into the passed function <code>f</code>, …\nMap an entity to another entity\nMaps to an inner value by applying a function to the …\nMaps to an inner value by applying a function to the …\nMaps to an inner value by applying a function to the …\nReturns the archetypes matched by this query.\nReturns the tables matched by this query.\nReturns <code>true</code> if this query matches a set of components. …\nAdds <code>&amp;mut T</code> to the <code>FilteredAccess</code> of self.\nReturns the system’s name.\nReturns a new run condition that only returns <code>false</code> if …\nCreate a new <code>Ref</code> using provided values.\nCreates a new change-detection enabled smart pointer. In …\nCreates a new <code>Observer</code>, which defaults to a “global” …\nCreates a new trigger for the given event and observer …\nCreates a new builder with the accesses required for <code>Q</code> and …\nCreates a new <code>QueryState</code> from a given <code>World</code> and inherits …\nConstructs an empty <code>Schedule</code>.\nReturns a new <code>Commands</code> instance from a <code>CommandQueue</code> and a …\nCreates a new empty <code>World</code>.\nCreate a custom implementation of <code>ReflectComponent</code>.\nCreate a custom implementation of <code>ReflectFromWorld</code>.\nCreate a custom implementation of <code>ReflectResource</code>.\nConstructs an empty <code>Schedules</code> with zero initial capacity.\nUpdate the current <code>QueryState</code> with information from the …\nReturns a new <code>Commands</code> instance from a <code>CommandQueue</code> and an …\nGets an immutable reference to the non-send resource of …\nGets a mutable reference to the non-send resource of the …\nReturns a new run condition that only returns <code>true</code> if both …\nGenerates a <code>Condition</code> that inverses the result of passed …\nCreates an <code>Observer</code> listening for a trigger of type <code>T</code> that …\nCreates an <code>Observer</code> listening for events of type <code>E</code> …\nReturns the <code>Entity</code> that observed the triggered event. This …\nReturns the index of the oldest event stored in the event …\nA <code>Condition</code>-satisfying system that returns <code>true</code> if there …\nTakes a function over mutable access to a <code>QueryBuilder</code>, …\nTakes a function over mutable access to a <code>QueryBuilder</code>, …\nReturns a new run condition that returns <code>true</code> if either …\nReturns a new run condition that returns <code>true</code> if either …\nGets exclusive access to the 0th parameter in this <code>ParamSet</code>…\nGets exclusive access to the 0th parameter in this <code>ParamSet</code>…\nGets exclusive access to the 0th parameter in this <code>ParamSet</code>…\nGets exclusive access to the 0th parameter in this <code>ParamSet</code>…\nGets exclusive access to the 0th parameter in this <code>ParamSet</code>…\nGets exclusive access to the 0th parameter in this <code>ParamSet</code>…\nGets exclusive access to the 0th parameter in this <code>ParamSet</code>…\nGets exclusive access to the 0th parameter in this <code>ParamSet</code>…\nGets exclusive access to the 1st parameter in this <code>ParamSet</code>…\nGets exclusive access to the 1st parameter in this <code>ParamSet</code>…\nGets exclusive access to the 1st parameter in this <code>ParamSet</code>…\nGets exclusive access to the 1st parameter in this <code>ParamSet</code>…\nGets exclusive access to the 1st parameter in this <code>ParamSet</code>…\nGets exclusive access to the 1st parameter in this <code>ParamSet</code>…\nGets exclusive access to the 1st parameter in this <code>ParamSet</code>…\nGets exclusive access to the 2nd parameter in this <code>ParamSet</code>…\nGets exclusive access to the 2nd parameter in this <code>ParamSet</code>…\nGets exclusive access to the 2nd parameter in this <code>ParamSet</code>…\nGets exclusive access to the 2nd parameter in this <code>ParamSet</code>…\nGets exclusive access to the 2nd parameter in this <code>ParamSet</code>…\nGets exclusive access to the 2nd parameter in this <code>ParamSet</code>…\nGets exclusive access to the 3rd parameter in this <code>ParamSet</code>…\nGets exclusive access to the 3rd parameter in this <code>ParamSet</code>…\nGets exclusive access to the 3rd parameter in this <code>ParamSet</code>…\nGets exclusive access to the 3rd parameter in this <code>ParamSet</code>…\nGets exclusive access to the 3rd parameter in this <code>ParamSet</code>…\nGets exclusive access to the 4th parameter in this <code>ParamSet</code>…\nGets exclusive access to the 4th parameter in this <code>ParamSet</code>…\nGets exclusive access to the 4th parameter in this <code>ParamSet</code>…\nGets exclusive access to the 4th parameter in this <code>ParamSet</code>…\nGets exclusive access to the 5th parameter in this <code>ParamSet</code>…\nGets exclusive access to the 5th parameter in this <code>ParamSet</code>…\nGets exclusive access to the 5th parameter in this <code>ParamSet</code>…\nGets exclusive access to the 6th parameter in this <code>ParamSet</code>…\nGets exclusive access to the 6th parameter in this <code>ParamSet</code>…\nGets exclusive access to the 7th parameter in this <code>ParamSet</code>…\nReturns a parallel iterator over the query results for the …\nReturns a parallel iterator over the query results for the …\nReturns a parallel iterator over the query results for the …\nReturns a parallel iterator over the query results for the …\nReturns a parallel iterator over the events this …\nReturns a parallel iterator over the events this …\nPass the output of this system <code>A</code> into a second system <code>B</code>, …\nPrints the names of the components and resources with <code>info</code>\nEnables or disables event propagation, allowing the same …\nReturns <code>QueryState</code> for the given <code>QueryData</code>, which is used …\nReturns <code>QueryState</code> for the given filtered <code>QueryData</code>, which …\nPushes a generic <code>Command</code> to the command queue.\nPushes an <code>EntityCommand</code> to the queue, which will get …\nEnqueues any <code>Deferred</code> system parameters (or other system …\nIterates over the events this <code>EventMutator</code> has not seen …\nIterates over the events this <code>EventReader</code> has not seen …\nIterates over the events this <code>RemovedComponents</code> has not …\nReads the current change tick of this world.\nLike <code>read</code>, except also returning the <code>EventId</code> of the events.\nLike <code>read</code>, except also returning the <code>EventId</code> of the events.\nLike <code>read</code>, except also returning the <code>EventId</code> of the events.\nFetch underlying <code>EventCursor</code>.\nFetch underlying <code>EventCursor</code> mutably.\nDestructures to get a mutable reference to the <code>EventCursor</code> …\nReturns a <code>Mut&lt;&gt;</code> with a smaller lifetime. This is useful if …\nReturns a <code>Mut&lt;&gt;</code> with a smaller lifetime. This is useful if …\nReturns a <code>Mut&lt;&gt;</code> with a smaller lifetime. This is useful if …\nReturns a <code>Commands</code> with a smaller lifetime. This is useful …\nReturns an <code>EntityCommands</code> with a smaller lifetime. This is …\nReturns a new <code>Query</code> reborrowing the access from this one. …\nReturns a <code>Deferred&lt;T&gt;</code> with a smaller lifetime. This is …\nReturns a new instance with a shorter lifetime. This is …\nReturns a new instance with a shorter lifetime. This is …\nAdds <code>&amp;T</code> to the <code>FilteredAccess</code> of self.\nGets the value of this <code>Component</code> type from the entity as a …\nGets the value of this <code>Resource</code> type from the world as a …\nGets the value of this <code>Component</code> type from the entity as a …\nGets the value of this <code>Resource</code> type from the world as a …\nSafety\nSafety\nSimilar to <code>Self::register_system</code>, but allows passing in a …\nRegisters all of the components in the given <code>Bundle</code> and …\nRegisters a new <code>Component</code> type and returns the <code>ComponentId</code> …\nRegister the type of this <code>Component</code> in <code>World</code>, returning …\nReturns a mutable reference to the <code>ComponentHooks</code> for a …\nCalled when registering this component, allowing mutable …\nReturns a mutable reference to the <code>ComponentHooks</code> for a …\nRegisters a new <code>Component</code> type and returns the <code>ComponentId</code> …\nRegisters components that are required by the components …\nRegisters the given component <code>R</code> as a required component …\nRegisters required components.\nRegisters the given component <code>R</code> as a required component …\nRegisters a new <code>Resource</code> type and returns the <code>ComponentId</code> …\nRegister the type of this <code>Resource</code> in <code>World</code>, returning the …\nRegisters a new <code>Resource</code> type and returns the <code>ComponentId</code> …\nRegisters a system and returns a <code>SystemId</code> so it can later …\nRegisters a system and returns a <code>SystemId</code> so it can later …\nRegisters a system or returns its cached <code>SystemId</code>.\nRemoves a <code>Bundle</code> of components from the entity.\nRemoves any components in the <code>Bundle</code> from the entity.\nRemoves this <code>Component</code> type from the entity. Does nothing …\nRemoves this <code>Resource</code> type from the world. Does nothing if …\nRemoves the schedule corresponding to the <code>label</code> from the …\nRemoves a component from the entity.\nRemoves a dynamic <code>Component</code> from the entity if it exists.\nRemoves the (schedule, label) pair corresponding to the …\nRemoves the resource of a given type, if it exists. …\nRemoves a <code>!Send</code> resource from the world and returns it, if …\nPushes a <code>Command</code> to the queue for removing a <code>Resource</code> from …\nRemoves the resource of a given type and returns it, if it …\nRemoves the resource of a given type, if it exists. …\nRemoves all components in the <code>Bundle</code> components and remove …\nRemoves all components in the <code>Bundle</code> and remove all …\nReturns an iterator of entities that had components of …\nRetrieves this world’s <code>RemovedComponentEvents</code> collection\nReturns an iterator of entities that had components with …\nOverwrites this smart pointer with the given value, if and …\nGets a reference to the resource of the given type\nA <code>Condition</code>-satisfying system that returns <code>true</code> if the …\nA <code>Condition</code>-satisfying system that returns <code>true</code> if the …\nA <code>Condition</code>-satisfying system that returns <code>true</code> if the …\nGenerates a <code>Condition</code>-satisfying closure that returns <code>true</code> …\nA <code>Condition</code>-satisfying system that returns <code>true</code> if the …\nA <code>Condition</code>-satisfying system that returns <code>true</code> if the …\nGenerates a <code>Condition</code>-satisfying closure that returns <code>true</code> …\nReturns the <code>ComponentId</code> of the given <code>Resource</code> type <code>T</code>.\nGets a mutable reference to the resource of the given type\nGets a reference to the resource of the given type\nA <code>Condition</code>-satisfying system that returns <code>true</code> if the …\nTemporarily removes the requested resource from this <code>World</code>…\nRemoves all components except the given <code>Bundle</code> from the …\nRemoves any components except those in the <code>Bundle</code> (and its …\nExecutes this system once. See <code>System::run</code> or …\nRuns all systems in this schedule on the <code>world</code>, using its …\nRuns the system with the given input in the world.\nRun the systems only if the <code>Condition</code> is <code>true</code>.\nRun the systems in this set(s) only if the <code>Condition</code> is …\nA <code>Condition</code>-satisfying system that returns <code>true</code> on the …\nRuns this system with the given input in the world.\nRuns the <code>Schedule</code> associated with the <code>label</code> a single time.\nRuns the system corresponding to the given <code>SystemId</code>. …\nRun stored systems by their <code>SystemId</code>. Before running a …\nSimilar to <code>Self::run_system</code>, but caching the <code>SystemId</code> in a …\nRuns a cached system, registering it if necessary.\nSimilar to <code>Self::run_system_with_input</code>, but caching the …\nRuns a cached system with an input, registering it if …\nRuns the system corresponding to the given <code>SystemId</code>. …\nRun a stored chained system by its <code>SystemId</code>, providing an …\nRuns the system with the given input in the world. Unlike …\nTemporarily removes the schedule associated with <code>label</code> …\n“Sends” an <code>event</code> by writing it to the current event …\nSends an <code>event</code>, which can later be read by <code>EventReader</code>s. …\nSends a list of <code>events</code> all at once, which can later be …\nSends a list of <code>events</code> all at once, which can later be …\nSends the default value of the event. Useful when the …\nSends the default value of the event. Useful when the …\nSends an arbitrary <code>Event</code>.\nSends an <code>Event</code>. This method returns the ID of the sent …\nSends a batch of <code>Event</code>s from an iterator. This method …\nSends the default value of the <code>Event</code> of type <code>E</code>. This …\nSet whether the schedule applies deferred system buffers …\nChanges miscellaneous build settings.\nFlags this value as having been changed.\nSets the schedule’s execution strategy.\nOverwrites this smart pointer with the given value, if and …\nManually sets the change tick recording the time when this …\nOverwrites the tick indicating the last time this system …\nReturns a single immutable query result when there is …\nReturns a single read-only query item when there is …\nReturns a single mutable query result when there is …\nReturns a single query item when there is exactly one …\nPushes a <code>Command</code> to the queue for creating a new entity …\nSpawns a new <code>Entity</code> with a given <code>Bundle</code> of components and …\nPushes a <code>Command</code> to the queue for creating entities with a …\nSpawns a batch of entities with the same component <code>Bundle</code> …\nReserves a new empty <code>Entity</code> to be spawned, and returns its …\nSpawns a new <code>Entity</code> and returns a corresponding …\nRetrieves this world’s <code>Storages</code> collection.\nReturns <code>Some</code> if this system set is a <code>SystemTypeSet</code>.\nGet the <code>TypeId</code> of the <code>System</code> produced after calling …\nReturns an iterator over all systems in this schedule.\nReturns the number of systems in this schedule.\nRemoves all components in the <code>Bundle</code> from the entity and …\nConvert to a form convenient for passing outside of rust.\nReturns another <code>Query</code> from this that fetches the read-only …\nTransmute the existing builder adding required accesses. …\nUse this to transform a <code>QueryState</code> into a more generic …\nTransmute the existing builder adding required accesses. …\nCreates a new <code>QueryState</code> with the same underlying …\nReturns a <code>QueryLens</code> that can be used to get a query with a …\nEquivalent to <code>Self::transmute_lens</code> but also includes a …\nSends a “global” <code>Trigger</code> without any targets. This …\nSends a <code>Trigger</code> targeting this entity. This will run any …\nTriggers the given <code>event</code> for this entity, which will run …\nTriggers the given <code>Event</code>, which will run any <code>Observer</code>s …\nTriggers the given <code>Event</code> as a mutable reference, which …\nSends a <code>Trigger</code> for the given targets. This will run any …\nTriggers the given <code>Event</code> for the given <code>targets</code>, which will …\nTriggers the given <code>Event</code> as a mutable reference for the …\nDespawns the entity. This will not emit a warning if the …\nPerforms the same function as <code>Self::despawn</code> but does not …\nDespawns the provided entity and its children. This will …\nDespawns the provided entity and its children. This will …\nReconstruct an <code>Entity</code> previously destructured with …\nTries to add a <code>Bundle</code> of components to the entity.\nPushes a <code>Command</code> to the queue for adding a <code>Bundle</code> type to …\nFor a given batch of (<code>Entity</code>, <code>Bundle</code>) pairs, adds the …\nPushes a <code>Command</code> to the queue for adding a <code>Bundle</code> type to …\nFor a given batch of (<code>Entity</code>, <code>Bundle</code>) pairs, adds the …\nAttempts to add a dynamic component to an entity.\nSimilar to <code>Self::try_insert</code> but will only try to insert if …\nTries to add a <code>Bundle</code> of components to the entity without …\nTries to add a <code>Bundle</code> of components to the entity without …\nTries to register the given component <code>R</code> as a required …\nTries to register the given component <code>R</code> as a required …\nAttempts to run the <code>Schedule</code> associated with the <code>label</code> a …\nTemporarily removes the schedule associated with <code>label</code> …\nReturns the <code>TypeId</code> of the underlying system type.\nRemoves a system previously registered with …\nRemoves a registered system and returns the system, if it …\nRemoves a cached system and its <code>CachedSystemId</code> resource.\nSwaps the event buffers and clears the oldest event …\nUpdate the system’s archetype component <code>Access</code>.\nFor the given <code>archetype</code>, adds any component accessed used …\nUpdates the state’s internal view of the <code>World</code>’s …\nUpdates the state’s internal view of the <code>world</code>’s …\nSwaps the event buffers and drains the oldest event …\nUpdates the internal entity location to match the current …\nSafe version of <code>System::validate_param_unsafe</code>. that runs …\nValidates that all parameters can be acquired and that …\nPanics\nObserve the given <code>entity</code>. This will cause the <code>Observer</code> to …\nAdds <code>With&lt;T&gt;</code> to the <code>FilteredAccess</code> of self.\nObserve the given <code>component</code>. This will cause the <code>Observer</code> …\nObserve the given <code>entity</code>. This will cause the <code>Observer</code> to …\nReturns a <code>Command</code> which executes this <code>EntityCommand</code> for …\nObserve the given <code>event</code>. This will cause the <code>Observer</code> to …\nAdds <code>With&lt;T&gt;</code> to the <code>FilteredAccess</code> of self from a runtime …\nAdds <code>Without&lt;T&gt;</code> to the <code>FilteredAccess</code> of self.\nAdds <code>Without&lt;T&gt;</code> to the <code>FilteredAccess</code> of self from a …\nReturns a reference to the world passed to <code>Self::new</code>.\nGets read-only access to the world that the current entity …\nReturns a mutable reference to the world passed to …\nReturns this entity’s world.\nGives mutable access to this entity’s <code>World</code> in a …\nConverts a <code>SystemInput::Inner</code> into a <code>SystemInput::Param</code>.\nReturns a new run condition that only returns <code>true</code> if <code>self</code> …\nReturns a new run condition that only returns <code>true</code> if …\nUsed as a type argument to <code>Ptr</code>, <code>PtrMut</code> and <code>OwningPtr</code> to …\nA newtype around <code>NonNull</code> that only allows conversion to …\nTrait that is only implemented for <code>Aligned</code> and <code>Unaligned</code> …\nType-erased Box-like pointer to some unknown type chosen …\nType-erased borrow of some unknown type chosen when …\nType-erased mutable borrow of some unknown type chosen …\nConceptually equivalent to <code>&amp;&#39;a [T]</code> but with length …\nUsed as a type argument to <code>Ptr</code>, <code>PtrMut</code> and <code>OwningPtr</code> to …\nExtension trait for helper methods on <code>UnsafeCell</code>\nGets a mutable pointer from this owned pointer.\nGets the underlying pointer, erasing the associated …\nGets the underlying pointer, erasing the associated …\nGets the underlying pointer, erasing the associated …\nReturns a shared reference to the value.\nGets an immutable reference from this mutable reference\nGets an immutable pointer from this owned pointer.\nTransforms this <code>Ptr</code> into an <code>PtrMut</code>\nCalculates the offset from a pointer (convenience for …\nCalculates the offset from a pointer (convenience for …\nCalculates the offset from a pointer (convenience for …\nCalculates the offset from a pointer. As the pointer is …\nCalculates the offset from a pointer. As the pointer is …\nCalculates the offset from a pointer. As the pointer is …\nCreates a dangling pointer with specified alignment. See …\nSafety\nTransforms this <code>Ptr&lt;T&gt;</code> into a <code>&amp;T</code> with the same lifetime\nSafety\nTransforms this <code>PtrMut&lt;T&gt;</code> into a <code>&amp;mut T</code> with the same …\nConsumes the <code>OwningPtr</code> to drop the underlying data of type …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nIndexes the slice without doing bounds checks\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConsumes a value and creates an <code>OwningPtr</code> to it while …\nCreates a new <code>ConstNonNull</code> if <code>ptr</code> is non-null.\nCreates a new instance from a raw pointer.\nCreates a new instance from a raw pointer.\nCreates a new instance from a raw pointer.\nCreates a new <code>ConstNonNull</code>.\nTransforms this <code>PtrMut</code> into an <code>OwningPtr</code>\nReturns a copy of the contained value.\nConsumes the <code>OwningPtr</code> to obtain ownership of the …\nConsumes the <code>OwningPtr</code> to obtain ownership of the …\nGets a <code>PtrMut</code> from this with a smaller lifetime.\nRemoves the alignment requirement of this pointer\nRemoves the alignment requirement of this pointer\nRemoves the alignment requirement of this pointer\nTracks read and write access to specific elements in a …\nRecords how two accesses conflict with each other\nA filter on a component that only retains results the …\nThe <code>Entity</code> was requested mutably more than once.\nConflict is for all indices\nThe <code>AnyOf</code> query parameter fetches entities with any of the …\nA marker trait to indicate that the filter works at an …\nA filter on a component that only retains results the …\nPer archetype/table state used by this <code>WorldQuery</code> to fetch …\nAn <code>Access</code> that has been filtered to include and exclude …\nA collection of <code>FilteredAccess</code> instances.\nReturns a bool that describes if an entity has the …\nReturns true if (and only if) this Filter relies strictly …\nReturns true if (and only if) every table of every …\nThere is a conflict for a subset of indices\nThe item returned by this <code>WorldQuery</code> For <code>QueryData</code> this …\nMultiple entities fit the query.\nNo entity fits the query.\nThe given <code>Entity</code> does not exist.\nA filter that tests if any of the given filters apply.\nBuilder struct to create <code>QueryState</code> instances at runtime.\nAn iterator over <code>K</code>-sized combinations of query items …\nTypes that can be fetched from a <code>World</code> using a <code>Query</code>.\nImplement <code>QueryData</code> to use a struct as a data parameter in …\nThe given <code>Entity</code>’s components do not match the query.\nAn error that occurs when retrieving a specific <code>Entity</code>’s …\nTypes that filter the results of a <code>Query</code>.\nImplement <code>QueryFilter</code> to use a struct as a filter …\nThe item type returned when a <code>WorldQuery</code> is iterated over\nAn <code>Iterator</code> over query results of a <code>Query</code>.\nAn <code>Iterator</code> over the query items generated from an …\nA parallel iterator over query results of a <code>Query</code>.\nAn error that occurs when evaluating a <code>Query</code> or <code>QueryState</code> …\nAn <code>Iterator</code> over sorted query results of a <code>Query</code>.\nProvides scoped access to a <code>World</code> state according to a …\nThe read-only variant of the item type returned when a …\nThe <code>WorldQuery::Fetch</code> type for <code>&amp; T</code>.\nThe read-only variant of this <code>QueryData</code>, which satisfies …\nA <code>QueryData</code> that is read only.\nState used to construct a <code>Self::Fetch</code>. This will be cached …\nFilter that selects entities with a component <code>T</code>.\nFilter that selects entities without a component <code>T</code>.\nTypes that can be used as parameters in a <code>Query</code>. Types …\nThe <code>WorldQuery::Fetch</code> type for <code>&amp;mut T</code>.\nReturns a reference to the underlying unfiltered access.\nReturns a mutable reference to the underlying unfiltered …\nAdds the filtered access to the set.\nAdds an archetypal (indirect) access to the component …\nAdds access to the component given by <code>index</code>.\nAdds access to the component given by <code>index</code>.\nAdds exclusive access to the component given by <code>index</code>.\nAdds exclusive access to the component given by <code>index</code>.\nAdds access to the resource given by <code>index</code>.\nAdds access to the resource given by <code>index</code>.\nAdds exclusive access to the resource given by <code>index</code>.\nAdds exclusive access to the resource given by <code>index</code>.\nAdds a <code>With</code> filter: corresponds to a conjunction (AND) …\nAdds a <code>Without</code> filter: corresponds to a conjunction (AND) …\nAppends an array of filters: corresponds to a disjunction …\nReturns the indices of the components that this has an …\nChanges the batching strategy used when iterating.\nRemoves all accesses.\nRemoves all accesses stored in this set.\nRemoves all writes.\nReturns a reference to the unfiltered access of the entire …\nAdds all access from <code>other</code>.\nAdds all access and filters from <code>other</code>.\nAdds all of the accesses from the passed set to <code>self</code>.\nAdds all of the accesses from <code>other</code> to <code>self</code>.\nFetch <code>Self::Item</code> for either the given <code>entity</code> in the …\nGet next result from the query\nGet next combination of queried components\nGet next result from the back of the query\nReturns true if the provided <code>Entity</code> and <code>TableRow</code> should be …\nRuns <code>func</code> on each query result in parallel.\nRuns <code>func</code> on each query result in parallel on a value …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nReturns a vector of elements that the access and <code>other</code> …\nReturns a vector of elements that this and <code>other</code> cannot …\nReturns a vector of elements that this set and <code>other</code> …\nReturns a vector of elements that this set and <code>other</code> …\nAttempts to initialize a <code>State</code> for this <code>WorldQuery</code> type …\nReturns <code>true</code> if this can access any component.\nReturns <code>true</code> if this accesses any component mutably.\nReturns <code>true</code> if this can access any resource.\nReturns <code>true</code> if this accesses any resource mutably.\nReturns true if this has an archetypal (indirect) access …\nReturns <code>true</code> if this can access the component given by …\nReturns <code>true</code> if this can exclusively access the component …\nReturns <code>true</code> if this has access to all indexed elements …\nReturns <code>true</code> if this has access to all components (i.e. …\nReturns <code>true</code> if this has access to all resources (i.e. …\nReturns <code>true</code> if this can access the resource given by <code>index</code>…\nReturns <code>true</code> if this can exclusively access the resource …\nReturns <code>true</code> if this has write access to all indexed …\nReturns <code>true</code> if this has write access to all components …\nReturns <code>true</code> if this has write access to all resources …\nCreates a new instance of this fetch.\nCreates and initializes a <code>State</code> for this <code>WorldQuery</code> type.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if the access and <code>other</code> can be active at the …\nReturns <code>true</code> if this and <code>other</code> can be active at the same …\nReturns <code>true</code> if this and <code>other</code> can be active at the same …\nReturns <code>true</code> if the access and <code>other</code> can be active at the …\nReturns <code>true</code> if the access and <code>other</code> can be active at the …\nReturns <code>true</code> if the set is a subset of another, i.e. <code>other</code> …\nReturns <code>true</code> if the set is a subset of another, i.e. <code>other</code> …\nReturns <code>true</code> if the set’s component access is a subset …\nReturns <code>true</code> if the set’s resource access is a subset of …\nReturns <code>true</code> if this query matches a set of components. …\nReturns a <code>FilteredAccess</code> which has no access and matches …\nReturns a <code>FilteredAccess</code> which has no access and matches …\nCreates an empty <code>Access</code> collection.\nSets this as having access to all indexed elements (i.e. …\nSets the underlying unfiltered access as having access to …\nMarks the set as reading all possible indices of type T.\nSets this as having access to all components (i.e. …\nSets the underlying unfiltered access as having access to …\nSets this as having access to all resources (i.e. <code>&amp;World</code>).\nCreates a new separate iterator yielding the same …\nCreates a new separate iterator yielding the same …\nRemoves both read and write access to the component given …\nRemoves write access to the component given by <code>index</code>.\nReturns the indices of the resources this has …\nReturns the indices of the resources this has access to.\nReturns the indices of the resources this has exclusive …\nSets available accesses for implementors with dynamic …\nAdjusts internal state to account for the next <code>Archetype</code>. …\nAdjusts internal state to account for the next <code>Table</code>. This …\nThis function manually implements subtyping for the query …\nThis function manually implements subtyping for the query …\nSorts all query items into a new iterator, using the query …\nSorts all query items into a new iterator with a …\nSort all query items into a new iterator with a key …\nSorts all query items into a new iterator with a key …\nSorts all query items into a new iterator, using the query …\nSorts all query items into a new iterator with a …")