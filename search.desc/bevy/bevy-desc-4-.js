searchState.loadedDescShard("bevy", 4, "Creates <code>Self</code> using <code>default()</code>.\nCreate a direction from its <code>x</code> and <code>y</code> components.\nCreate a two-dimensional isometry from a translation with …\nCreate a direction from its <code>x</code> and <code>y</code> components, assuming …\nCreate a direction from its <code>x</code>, <code>y</code>, and <code>z</code> components.\nCreate a direction from its <code>x</code>, <code>y</code>, and <code>z</code> components.\nCreate a three-dimensional isometry from a translation …\nCreate a direction from its <code>x</code>, <code>y</code>, and <code>z</code> components, …\nCreate a direction from its <code>x</code>, <code>y</code>, and <code>z</code> components, …\nCreates a new rotation quaternion.\nGet a point at a given distance along the ray\nGet a point at a given distance along the ray\nCreate a new <code>Curve</code> which is the graph of this one; that …\nRectangle half-size.\nRectangle half-size.\nRectangle half-size.\nRectangle height (max.y - min.y).\nRectangle height (max.y - min.y).\nRectangle height (max.y - min.y).\n<code>i16</code> vector types.\nCreates a 2-dimensional vector.\nCreates a 3-dimensional vector.\nCreates a 4-dimensional vector.\n<code>i32</code> vector types.\n<code>i64</code> vector types.\nCreates a 2-dimensional vector.\nCreates a 3-dimensional vector.\nCreates a 4-dimensional vector.\n<code>i8</code> vector types.\nCreates a 2-dimensional vector.\nCreates a 3-dimensional vector.\nCreates a 4-dimensional vector.\nCreate a new rectangle by expanding it evenly on all sides.\nCreate a new rectangle by expanding it evenly on all sides.\nCreate a new rectangle by expanding it evenly on all sides.\nExtract a <code>Distribution</code> whose samples are points of this …\nInterpolate between this value and the <code>other</code> given value …\nA version of <code>interpolate_stable</code> that assigns the result to …\nBuild a new rectangle formed of the intersection of this …\nBuild a new rectangle formed of the intersection of this …\nBuild a new rectangle formed of the intersection of this …\nGet the distance to a plane if the ray intersects it\nGet the distance to a plane if the ray intersects it\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the inverse of this aspect ratio (height/width).\nThe inverse isometry that undoes this one.\nThe inverse isometry that undoes this one.\nReturns the inverse of the rotation. This is also the …\nReturn the inverse of this transform.\nReturn the inverse of this transform.\nReturns the inverse of <code>self</code>.\nReturns the inverse of <code>self</code>.\nReturns the inverse of <code>self</code>.\nReturns the inverse of a normalized quaternion.\nReturns <code>v</code> normalized to the range <code>[a, b]</code>.\nCompute <code>iso1.inverse() * iso2</code> in a more efficient way for …\nCompute <code>iso1.inverse() * iso2</code> in a more efficient way for …\nTransform a point by rotating and translating it using the …\nTransform a point by rotating and translating it using the …\nCalculates the inverse transpose of the 3x3 matrix and …\nCheck if the rectangle is empty.\nCheck if the rectangle is empty.\nCheck if the rectangle is empty.\nReturns <code>true</code> if the rotation is neither infinite nor NaN.\nReturns <code>true</code> if, and only if, all elements are finite.\nReturns <code>true</code> if, and only if, all elements are finite.\nReturns <code>true</code> if, and only if, all elements are finite. If …\nReturns <code>true</code> if, and only if, all elements are finite. If …\nReturns <code>true</code> if, and only if, all elements are finite. If …\nReturns <code>true</code> if, and only if, all elements are finite. If …\nReturns <code>true</code> if, and only if, all elements are finite.  If …\nReturns <code>true</code> if, and only if, all elements are finite.  If …\nReturns <code>true</code> if, and only if, all elements are finite.  If …\nPerforms <code>is_finite</code> on each element of self, returning a …\nPerforms <code>is_finite</code> on each element of self, returning a …\nPerforms <code>is_finite</code> on each element of self, returning a …\nReturns true if the aspect ratio represents a landscape …\nReturns <code>true</code> if the rotation is NaN.\nReturns <code>true</code> if any elements are <code>NaN</code>.\nReturns <code>true</code> if any elements are <code>NaN</code>.\nReturns <code>true</code> if any elements are <code>NaN</code>.\nReturns <code>true</code> if any elements are <code>NaN</code>.\nReturns <code>true</code> if any elements are <code>NaN</code>.\nReturns <code>true</code> if any elements are <code>NAN</code>.\nReturns <code>true</code> if any elements are <code>NaN</code>.\nReturns <code>true</code> if any elements are <code>NaN</code>.\nReturns <code>true</code> if any elements are <code>NaN</code>.\nPerforms <code>is_nan</code> on each element of self, returning a …\nPerforms <code>is_nan</code> on each element of self, returning a …\nPerforms <code>is_nan</code> on each element of self, returning a …\nReturns <code>true</code> if the rotation is near <code>Rot2::IDENTITY</code>.\nReturns a bitmask with the lowest 2 bits set to the sign …\nReturns a bitmask with the lowest 3 bits set to the sign …\nReturns a bitmask with the lowest 4 bits set to the sign …\nReturns a bitmask with the lowest 2 bits set to the sign …\nReturns a bitmask with the lowest 3 bits set to the sign …\nReturns a bitmask with the lowest 4 bits set to the sign …\nReturns a bitmask with the lowest 2 bits set to the sign …\nReturns a bitmask with the lowest 3 bits set to the sign …\nReturns a bitmask with the lowest 4 bits set to the sign …\nReturns a bitmask with the lowest 2 bits set to the sign …\nReturns a bitmask with the lowest 3 bits set to the sign …\nReturns a bitmask with the lowest 4 bits set to the sign …\nReturns whether <code>self</code> has a length of <code>1.0</code> or not.\nReturns whether <code>self</code> of length <code>1.0</code> or not.\nReturns whether <code>self</code> is length <code>1.0</code> or not.\nReturns whether <code>self</code> is length <code>1.0</code> or not.\nReturns whether <code>self</code> is length <code>1.0</code> or not.\nReturns true if the aspect ratio represents a portrait …\nReturns true if the aspect ratio is exactly square.\nCreates a 2-dimensional vector.\nCreates a 3-dimensional vector.\nCreates a 4-dimensional vector.\nComputes the length or norm of the complex number used to …\nComputes the length of <code>self</code>.\nComputes the length of <code>self</code>.\nComputes the length of <code>self</code>.\nComputes the length of <code>self</code>.\nComputes <code>1.0 / self.length()</code>.\nComputes <code>1.0 / length()</code>.\nComputes <code>1.0 / length()</code>.\nComputes <code>1.0 / length()</code>.\nComputes <code>1.0 / length()</code>.\nComputes the squared length or norm of the complex number …\nComputes the squared length of <code>self</code>.\nComputes the squared length of <code>self</code>.\nComputes the squared length of <code>self</code>.\nComputes the squared length of <code>self</code>.\nComputes the squared length of <code>self</code>.\nComputes the squared length of <code>self</code>.\nComputes the squared length of <code>self</code>.\nComputes the squared length of <code>self</code>.\nComputes the squared length of <code>self</code>.\nComputes the squared length of <code>self</code>.\nComputes the squared length of <code>self</code>.\nComputes the squared length of <code>self</code>.\nComputes the squared length of <code>self</code>.\nComputes the squared length of <code>self</code>.\nComputes the squared length of <code>self</code>.\nComputes the squared length of <code>self</code>.\nComputes the squared length of <code>self</code>.\nComputes the squared length of <code>self</code>.\nComputes the squared length of <code>self</code>.\nComputes the squared length of <code>self</code>.\nComputes the squared length of <code>self</code>.\nComputes the squared length of <code>self</code>.\nPerforms a linear interpolation between <code>self</code> and <code>rhs</code> based …\nPerform vector space linear interpolation between this …\nPerforms a linear interpolation between <code>self</code> and <code>rhs</code> based …\nPerforms a linear interpolation between <code>self</code> and <code>rhs</code> based …\nPerforms a linear interpolation between <code>self</code> and <code>rhs</code> based …\nPerforms a linear interpolation between <code>self</code> and <code>rhs</code> based …\nCreates a left-handed view transform using a camera …\nCreates a left-handed view matrix using a camera position, …\nCreates a right-handed view transform using a camera …\nCreates a right-handed view matrix using a camera …\nCreates a left-handed view transform using a camera …\nCreates a left-handed view matrix using a camera position, …\nCreates a right-handed view transform using a camera …\nCreates a right-handed view matrix using a camera …\nCreate a new curve by mapping the values of this curve via …\nReturns a vector containing each element of <code>self</code> modified …\nReturns a vector containing each element of <code>self</code> modified …\nReturns a vector containing each element of <code>self</code> modified …\nReturns a vector containing each element of <code>self</code> modified …\nReturns a vector containing each element of <code>self</code> modified …\nReturns a vector containing each element of <code>self</code> modified …\nReturns a vector containing each element of <code>self</code> modified …\nReturns a vector containing each element of <code>self</code> modified …\nReturns a vector containing each element of <code>self</code> modified …\nReturns a vector containing each element of <code>self</code> modified …\nReturns a vector containing each element of <code>self</code> modified …\nReturns a vector containing each element of <code>self</code> modified …\nReturns a vector containing each element of <code>self</code> modified …\nReturns a vector containing each element of <code>self</code> modified …\nReturns a vector containing each element of <code>self</code> modified …\nReturns a vector containing each element of <code>self</code> modified …\nReturns a vector containing each element of <code>self</code> modified …\nReturns a vector containing each element of <code>self</code> modified …\nReturns a vector containing each element of <code>self</code> modified …\nReturns a vector containing each element of <code>self</code> modified …\nReturns a vector containing each element of <code>self</code> modified …\nCreates a 2x2 matrix from two column vectors.\nCreates a 3x3 matrix from three column vectors.\nCreates a 3x3 matrix from three column vectors.\nCreates a 4x4 matrix from four column vectors.\nScaling, rotation, shears, and other non-translation …\nReturns a vector containing the maximum values for each …\nReturns a vector containing the maximum values for each …\nReturns a vector containing the maximum values for each …\nReturns a vector containing the maximum values for each …\nReturns a vector containing the maximum values for each …\nReturns a vector containing the maximum values for each …\nReturns a vector containing the maximum values for each …\nReturns a vector containing the maximum values for each …\nReturns a vector containing the maximum values for each …\nReturns a vector containing the maximum values for each …\nReturns a vector containing the maximum values for each …\nReturns a vector containing the maximum values for each …\nReturns a vector containing the maximum values for each …\nReturns a vector containing the maximum values for each …\nReturns a vector containing the maximum values for each …\nReturns a vector containing the maximum values for each …\nReturns a vector containing the maximum values for each …\nReturns a vector containing the maximum values for each …\nReturns a vector containing the maximum values for each …\nReturns a vector containing the maximum values for each …\nReturns a vector containing the maximum values for each …\nThe maximum corner point of the rect.\nThe maximum corner point of the rect.\nThe maximum corner point of the rect.\nReturns the horizontal maximum of <code>self</code>.\nReturns the horizontal maximum of <code>self</code>.\nReturns the horizontal maximum of <code>self</code>.\nReturns the horizontal maximum of <code>self</code>.\nReturns the horizontal maximum of <code>self</code>.\nReturns the horizontal maximum of <code>self</code>.\nReturns the horizontal maximum of <code>self</code>.\nReturns the horizontal maximum of <code>self</code>.\nReturns the horizontal maximum of <code>self</code>.\nReturns the horizontal maximum of <code>self</code>.\nReturns the horizontal maximum of <code>self</code>.\nReturns the horizontal maximum of <code>self</code>.\nReturns the horizontal maximum of <code>self</code>.\nReturns the horizontal maximum of <code>self</code>.\nReturns the horizontal maximum of <code>self</code>.\nReturns the horizontal maximum of <code>self</code>.\nReturns the horizontal maximum of <code>self</code>.\nReturns the horizontal maximum of <code>self</code>.\nReturns the horizontal maximum of <code>self</code>.\nReturns the horizontal maximum of <code>self</code>.\nReturns the horizontal maximum of <code>self</code>.\nCalculates the midpoint between <code>self</code> and <code>rhs</code>.\nCalculates the midpoint between <code>self</code> and <code>rhs</code>.\nCalculates the midpoint between <code>self</code> and <code>rhs</code>.\nReturns a vector containing the minimum values for each …\nReturns a vector containing the minimum values for each …\nReturns a vector containing the minimum values for each …\nReturns a vector containing the minimum values for each …\nReturns a vector containing the minimum values for each …\nReturns a vector containing the minimum values for each …\nReturns a vector containing the minimum values for each …\nReturns a vector containing the minimum values for each …\nReturns a vector containing the minimum values for each …\nReturns a vector containing the minimum values for each …\nReturns a vector containing the minimum values for each …\nReturns a vector containing the minimum values for each …\nReturns a vector containing the minimum values for each …\nReturns a vector containing the minimum values for each …\nReturns a vector containing the minimum values for each …\nReturns a vector containing the minimum values for each …\nReturns a vector containing the minimum values for each …\nReturns a vector containing the minimum values for each …\nReturns a vector containing the minimum values for each …\nReturns a vector containing the minimum values for each …\nReturns a vector containing the minimum values for each …\nThe minimum corner point of the rect.\nThe minimum corner point of the rect.\nThe minimum corner point of the rect.\nReturns the horizontal minimum of <code>self</code>.\nReturns the horizontal minimum of <code>self</code>.\nReturns the horizontal minimum of <code>self</code>.\nReturns the horizontal minimum of <code>self</code>.\nReturns the horizontal minimum of <code>self</code>.\nReturns the horizontal minimum of <code>self</code>.\nReturns the horizontal minimum of <code>self</code>.\nReturns the horizontal minimum of <code>self</code>.\nReturns the horizontal minimum of <code>self</code>.\nReturns the horizontal minimum of <code>self</code>.\nReturns the horizontal minimum of <code>self</code>.\nReturns the horizontal minimum of <code>self</code>.\nReturns the horizontal minimum of <code>self</code>.\nReturns the horizontal minimum of <code>self</code>.\nReturns the horizontal minimum of <code>self</code>.\nReturns the horizontal minimum of <code>self</code>.\nReturns the horizontal minimum of <code>self</code>.\nReturns the horizontal minimum of <code>self</code>.\nReturns the horizontal minimum of <code>self</code>.\nReturns the horizontal minimum of <code>self</code>.\nReturns the horizontal minimum of <code>self</code>.\nMoves towards <code>rhs</code> based on the value <code>d</code>.\nMoves towards <code>rhs</code> based on the value <code>d</code>.\nMoves towards <code>rhs</code> based on the value <code>d</code>.\nRotates the <code>Dir2</code> using a <code>Rot2</code>.\nRotates a <code>Vec2</code> by a <code>Rot2</code>.\nMultiplies two quaternions. If they each represent a …\nMultiplies a quaternion by a scalar value.\nMultiplies a quaternion and a 3D vector, returning the …\nFused multiply-add. Computes <code>(self * a) + b</code> element-wise …\nFused multiply-add. Computes <code>(self * a) + b</code> element-wise …\nFused multiply-add. Computes <code>(self * a) + b</code> element-wise …\nMultiplies two quaternions. If they each represent a …\nMultiplies two 2x2 matrices.\nMultiplies two 3x3 matrices.\nMultiplies two 4x4 matrices.\nMultiplies two quaternions. If they each represent a …\nMultiplies a 2x2 matrix by a scalar.\nMultiplies a 3x3 matrix by a scalar.\nMultiplies a 4x4 matrix by a scalar.\nTransforms a 2D vector.\nTransforms a 3D vector.\nMultiplies a quaternion and a 3D vector, returning the …\nTransforms a 4D vector.\nCreate a direction from a finite, nonzero <code>Vec2</code>, …\nCreate a direction from a finite, nonzero <code>Vec3</code>, …\nCreate a direction from a finite, nonzero <code>Vec3A</code>, …\nCreate a two-dimensional isometry from a rotation and a …\nCreate a three-dimensional isometry from a rotation and a …\nCreate a new <code>Ray2d</code> from a given origin and direction\nCreate a new <code>Ray3d</code> from a given origin and direction\nCreate a new rectangle from two corner points.\nCreate a new rectangle from two corner points.\nCreate a new rectangle from two corner points.\nCreates a new vector mask.\nCreates a new vector mask.\nCreates a new vector.\nCreates a new vector.\nCreates a new vector.\nCreates a new vector.\nCreates a new vector.\nCreates a new vector.\nCreates a new vector.\nCreates a new vector.\nCreates a new vector.\nCreates a new vector.\nCreates a new vector.\nCreates a new vector.\nCreates a new vector.\nCreates a new vector.\nCreates a new vector.\nCreates a new vector.\nCreates a new vector.\nCreates a new vector.\nCreates a new vector.\nCreates a new vector.\nCreates a new vector.\nCreate a direction from a finite, nonzero <code>Vec2</code>, …\nCreate a direction from a finite, nonzero <code>Vec3</code>, …\nCreate a direction from a finite, nonzero <code>Vec3A</code>, …\nCreate a <code>Dir2</code> from a <code>Vec2</code> that is already normalized.\nCreate a <code>Dir3</code> from a <code>Vec3</code> that is already normalized.\nCreate a <code>Dir3A</code> from a <code>Vec3A</code> that is already normalized.\nPerforms a linear interpolation between <code>self</code> and <code>rhs</code> based …\nThe size of this element. The return value should always …\nThe squared norm of this element. Computing this is often …\nBuild a new rectangle from this one with its coordinates …\nReturns <code>self</code> with a length of <code>1.0</code>.\nReturns <code>self</code> normalized to length 1.0.\nReturns <code>self</code> normalized to length 1.0.\nReturns <code>self</code> normalized to length 1.0.\nReturns <code>self</code> normalized to length 1.0.\nReturns <code>self</code> normalized to length 1.0 if possible, else …\nReturns <code>self</code> normalized to length 1.0 if possible, else …\nReturns <code>self</code> normalized to length 1.0 if possible, else …\nReturns <code>self</code> normalized to length 1.0 if possible, else …\nReturns <code>self</code> normalized to length 1.0 if possible, else …\nReturns <code>self</code> normalized to length 1.0 if possible, else …\nThe origin of the ray.\nThe origin of the ray.\nCreates a left-handed orthographic projection matrix with …\nCreates a right-handed orthographic projection matrix with …\nCreates a right-handed orthographic projection matrix with …\nReturns a vector that is equal to <code>self</code> rotated by 90 …\nReturns a vector that is equal to <code>self</code> rotated by 90 …\nReturns a vector that is equal to <code>self</code> rotated by 90 …\nReturns a vector that is equal to <code>self</code> rotated by 90 …\nThe perpendicular dot product of <code>self</code> and <code>rhs</code>. Also known …\nThe perpendicular dot product of <code>self</code> and <code>rhs</code>. Also known …\nThe perpendicular dot product of <code>self</code> and <code>rhs</code>. Also known …\nThe perpendicular dot product of <code>self</code> and <code>rhs</code>. Also known …\nCreates an infinite left-handed perspective projection …\nCreates an infinite reverse left-handed perspective …\nCreates an infinite reverse right-handed perspective …\nCreates an infinite right-handed perspective projection …\nCreates a left-handed perspective projection matrix with …\nCreates a right-handed perspective projection matrix with …\nCreates a right-handed perspective projection matrix with …\nCreate a new <code>Curve</code> chaining the original curve with its …\nReturns a vector containing each element of <code>self</code> raised to …\nReturns a vector containing each element of <code>self</code> raised to …\nReturns a vector containing each element of <code>self</code> raised to …\nThe math prelude.\nThis module defines primitive shapes. The origin is (0, 0) …\nReturns the vector projection of <code>self</code> onto <code>rhs</code>.\nReturns the vector projection of <code>self</code> onto <code>rhs</code>.\nReturns the vector projection of <code>self</code> onto <code>rhs</code>.\nReturns the vector projection of <code>self</code> onto <code>rhs</code>.\nReturns the vector projection of <code>self</code> onto <code>rhs</code>.\nReturns the vector projection of <code>self</code> onto <code>rhs</code>.\nTransforms the given 3D vector as a point, applying …\nCreates a quaternion from <code>x</code>, <code>y</code>, <code>z</code> and <code>w</code> values.\nCreates a <code>Rot2</code> from a counterclockwise angle in radians.\nReturns the aspect ratio as a f32 value.\nReturns a vector containing the reciprocal <code>1.0/n</code> of each …\nReturns a vector containing the reciprocal <code>1.0/n</code> of each …\nReturns a vector containing the reciprocal <code>1.0/n</code> of each …\nReturns the reflection vector for a given incident vector …\nReturns the reflection vector for a given incident vector …\nReturns the reflection vector for a given incident vector …\nReturns the refraction direction for a given incident …\nReturns the refraction direction for a given incident …\nReturns the refraction direction for a given incident …\nReturns the vector rejection of <code>self</code> from <code>rhs</code>.\nReturns the vector rejection of <code>self</code> from <code>rhs</code>.\nReturns the vector rejection of <code>self</code> from <code>rhs</code>.\nReturns the vector rejection of <code>self</code> from <code>rhs</code>.\nReturns the vector rejection of <code>self</code> from <code>rhs</code>.\nReturns the vector rejection of <code>self</code> from <code>rhs</code>.\nReturns the element-wise remainder of Euclidean division …\nReturns the element-wise remainder of Euclidean division …\nReturns the element-wise remainder of Euclidean division …\nReturns the element-wise remainder of Euclidean division …\nReturns the element-wise remainder of Euclidean division …\nReturns the element-wise remainder of Euclidean division …\nReturns the element-wise remainder of Euclidean division …\nReturns the element-wise remainder of Euclidean division …\nReturns the element-wise remainder of Euclidean division …\nReturns the element-wise remainder of Euclidean division …\nReturns the element-wise remainder of Euclidean division …\nReturns the element-wise remainder of Euclidean division …\nRemap <code>self</code> from the input range to the output range.\nCreate a new <code>Curve</code> whose parameter space is related to the …\nReparametrize this <code>Curve</code> by sampling from another curve.\nLinearly reparametrize this <code>Curve</code>, producing a new curve …\nCreate a new <code>Curve</code> repeating this curve <code>N</code> times, producing …\nResample this <code>Curve</code> to produce a new one that is defined …\nResample this <code>Curve</code> to produce a new one that is defined …\nResample this <code>Curve</code> to produce a new one that is defined …\nResample this <code>Curve</code> to produce a new one that is defined …\nCreate a new <code>Curve</code> inverting this curve on the x-axis, …\nReturns <code>rhs</code> rotated by the angle of <code>self</code>. If <code>self</code> is …\nReturns <code>rhs</code> rotated by the angle of <code>self</code>. If <code>self</code> is …\nReturns <code>rhs</code> rotated by the angle of <code>self</code>. If <code>self</code> is …\nReturns <code>rhs</code> rotated by the angle of <code>self</code>. If <code>self</code> is …\nRotates towards <code>rhs</code> up to <code>max_angle</code> (in radians).\nRotates towards <code>rhs</code> up to <code>max_angle</code> (in radians).\nThe rotational part of a two-dimensional isometry.\nThe rotational part of a three-dimensional isometry.\nGet the rotation that rotates <code>other</code> to this direction.\nGet the rotation that rotates the X-axis to this direction.\nGet the rotation that rotates the Y-axis to this direction.\nGet the rotation that rotates this direction to <code>other</code>.\nGet the rotation that rotates this direction to the X-axis.\nGet the rotation that rotates this direction to the Y-axis.\nReturns a vector containing the nearest integer to a …\nReturns a vector containing the nearest integer to a …\nReturns a vector containing the nearest integer to a …\nReturns the matrix row for the given <code>index</code>.\nReturns the matrix row for the given <code>index</code>.\nReturns the matrix row for the given <code>index</code>.\nSample a point on this curve at the parameter value <code>t</code>, …\nUniformly sample a point from the surface of this shape, …\nSample a point on this curve at the parameter value <code>t</code>, …\nUniformly sample a point from inside the area/volume of …\nSample a collection of <code>n &gt;= 0</code> points on this curve at the …\nSample a collection of <code>n &gt;= 0</code> points on this curve at the …\nSample a collection of <code>n &gt;= 0</code> points on this curve at the …\nSample a point on this curve at the parameter value <code>t</code>, …\nExtract an iterator over evenly-spaced samples from this …\nThis module contains tools related to random sampling.\nReturns a vector containing the saturating addition of <code>self</code>…\nReturns a vector containing the saturating addition of <code>self</code>…\nReturns a vector containing the saturating addition of <code>self</code>…\nReturns a vector containing the saturating addition of <code>self</code>…\nReturns a vector containing the saturating addition of <code>self</code>…\nReturns a vector containing the saturating addition of <code>self</code>…\nReturns a vector containing the saturating addition of <code>self</code>…\nReturns a vector containing the saturating addition of <code>self</code>…\nReturns a vector containing the saturating addition of <code>self</code>…\nReturns a vector containing the saturating addition of <code>self</code>…\nReturns a vector containing the saturating addition of <code>self</code>…\nReturns a vector containing the saturating addition of <code>self</code>…\nReturns a vector containing the saturating addition of <code>self</code>…\nReturns a vector containing the saturating addition of <code>self</code>…\nReturns a vector containing the saturating addition of <code>self</code>…\nReturns a vector containing the saturating addition of <code>self</code>…\nReturns a vector containing the saturating addition of <code>self</code>…\nReturns a vector containing the saturating addition of <code>self</code>…\nReturns a vector containing the saturating addition of <code>self</code>…\nReturns a vector containing the saturating addition of <code>self</code>…\nReturns a vector containing the saturating addition of <code>self</code>…\nReturns a vector containing the saturating addition of <code>self</code>…\nReturns a vector containing the saturating addition of <code>self</code>…\nReturns a vector containing the saturating addition of <code>self</code>…\nReturns a vector containing the saturating addition of <code>self</code>…\nReturns a vector containing the saturating addition of <code>self</code>…\nReturns a vector containing the saturating addition of <code>self</code>…\nIn other words this computes …\nIn other words this computes …\nIn other words this computes …\nIn other words this computes …\nIn other words this computes …\nIn other words this computes …\nIn other words this computes …\nIn other words this computes …\nIn other words this computes …\nReturns a vector containing the saturating division of <code>self</code>…\nReturns a vector containing the saturating division of <code>self</code>…\nReturns a vector containing the saturating division of <code>self</code>…\nReturns a vector containing the saturating division of <code>self</code>…\nReturns a vector containing the saturating division of <code>self</code>…\nReturns a vector containing the saturating division of <code>self</code>…\nReturns a vector containing the saturating division of <code>self</code>…\nReturns a vector containing the saturating division of <code>self</code>…\nReturns a vector containing the saturating division of <code>self</code>…\nReturns a vector containing the saturating division of <code>self</code>…\nReturns a vector containing the saturating division of <code>self</code>…\nReturns a vector containing the saturating division of <code>self</code>…\nReturns a vector containing the saturating division of <code>self</code>…\nReturns a vector containing the saturating division of <code>self</code>…\nReturns a vector containing the saturating division of <code>self</code>…\nReturns a vector containing the saturating division of <code>self</code>…\nReturns a vector containing the saturating division of <code>self</code>…\nReturns a vector containing the saturating division of <code>self</code>…\nReturns a vector containing the saturating multiplication …\nReturns a vector containing the saturating multiplication …\nReturns a vector containing the saturating multiplication …\nReturns a vector containing the saturating multiplication …\nReturns a vector containing the saturating multiplication …\nReturns a vector containing the saturating multiplication …\nReturns a vector containing the saturating multiplication …\nReturns a vector containing the saturating multiplication …\nReturns a vector containing the saturating multiplication …\nReturns a vector containing the saturating multiplication …\nReturns a vector containing the saturating multiplication …\nReturns a vector containing the saturating multiplication …\nReturns a vector containing the saturating multiplication …\nReturns a vector containing the saturating multiplication …\nReturns a vector containing the saturating multiplication …\nReturns a vector containing the saturating multiplication …\nReturns a vector containing the saturating multiplication …\nReturns a vector containing the saturating multiplication …\nReturns a vector containing the saturating subtraction of …\nReturns a vector containing the saturating subtraction of …\nReturns a vector containing the saturating subtraction of …\nReturns a vector containing the saturating subtraction of …\nReturns a vector containing the saturating subtraction of …\nReturns a vector containing the saturating subtraction of …\nReturns a vector containing the saturating subtraction of …\nReturns a vector containing the saturating subtraction of …\nReturns a vector containing the saturating subtraction of …\nReturns a vector containing the saturating subtraction of …\nReturns a vector containing the saturating subtraction of …\nReturns a vector containing the saturating subtraction of …\nReturns a vector containing the saturating subtraction of …\nReturns a vector containing the saturating subtraction of …\nReturns a vector containing the saturating subtraction of …\nReturns a vector containing the saturating subtraction of …\nReturns a vector containing the saturating subtraction of …\nReturns a vector containing the saturating subtraction of …\nReturns a vector containing the saturating subtraction of …\nReturns a vector containing the saturating subtraction of …\nReturns a vector containing the saturating subtraction of …\nReturns a vector containing the saturating subtraction of …\nReturns a vector containing the saturating subtraction of …\nReturns a vector containing the saturating subtraction of …\nReturns a vector containing the saturating subtraction of …\nReturns a vector containing the saturating subtraction of …\nReturns a vector containing the saturating subtraction of …\nCreates a vector from the elements in <code>if_true</code> and <code>if_false</code>…\nCreates a vector from the elements in <code>if_true</code> and <code>if_false</code>…\nCreates a vector from the elements in <code>if_true</code> and <code>if_false</code>…\nCreates a vector from the elements in <code>if_true</code> and <code>if_false</code>…\nCreates a vector from the elements in <code>if_true</code> and <code>if_false</code>…\nCreates a vector from the elements in <code>if_true</code> and <code>if_false</code>…\nCreates a vector from the elements in <code>if_true</code> and <code>if_false</code>…\nCreates a vector from the elements in <code>if_true</code> and <code>if_false</code>…\nCreates a vector from the elements in <code>if_true</code> and <code>if_false</code>…\nCreates a vector from the elements in <code>if_true</code> and <code>if_false</code>…\nCreates a vector from the elements in <code>if_true</code> and <code>if_false</code>…\nCreates a vector from the elements in <code>if_true</code> and <code>if_false</code>…\nCreates a vector from the elements in <code>if_true</code> and <code>if_false</code>…\nCreates a vector from the elements in <code>if_true</code> and <code>if_false</code>…\nCreates a vector from the elements in <code>if_true</code> and <code>if_false</code>…\nCreates a vector from the elements in <code>if_true</code> and <code>if_false</code>…\nCreates a vector from the elements in <code>if_true</code> and <code>if_false</code>…\nCreates a vector from the elements in <code>if_true</code> and <code>if_false</code>…\nCreates a vector from the elements in <code>if_true</code> and <code>if_false</code>…\nCreates a vector from the elements in <code>if_true</code> and <code>if_false</code>…\nCreates a vector from the elements in <code>if_true</code> and <code>if_false</code>…\nSets the element at <code>index</code>.\nSets the element at <code>index</code>.\nReturns a vector with elements representing the sign of …\nReturns a vector with elements representing the sign of …\nReturns a vector with elements representing the sign of …\nReturns a vector with elements representing the sign of …\nReturns a vector with elements representing the sign of …\nReturns a vector with elements representing the sign of …\nReturns a vector with elements representing the sign of …\nReturns a vector with elements representing the sign of …\nReturns a vector with elements representing the sign of …\nReturns a vector with elements representing the sign of …\nReturns a vector with elements representing the sign of …\nReturns a vector with elements representing the sign of …\nThe sine of the rotation angle in radians.\nReturns the sine and cosine of the rotation angle in …\nRectangle size.\nRectangle size.\nRectangle size.\nPerforms a spherical linear interpolation between <code>self</code> and …\nPerforms a spherical linear interpolation between <code>self</code> and …\nPerforms a spherical linear interpolation between <code>self</code> and …\nPerforms a spherical linear interpolation between <code>self</code> and …\nPerforms a spherical linear interpolation between <code>self</code> and …\nSmoothly nudge this value towards the <code>target</code> at a given …\nCreates a vector mask with all elements set to <code>v</code>.\nCreates a vector mask with all elements set to <code>v</code>.\nCreates a vector with all elements set to <code>v</code>.\nCreates a vector with all elements set to <code>v</code>.\nCreates a vector with all elements set to <code>v</code>.\nCreates a vector with all elements set to <code>v</code>.\nCreates a vector with all elements set to <code>v</code>.\nCreates a vector with all elements set to <code>v</code>.\nCreates a vector with all elements set to <code>v</code>.\nCreates a vector with all elements set to <code>v</code>.\nCreates a vector with all elements set to <code>v</code>.\nCreates a vector with all elements set to <code>v</code>.\nCreates a vector with all elements set to <code>v</code>.\nCreates a vector with all elements set to <code>v</code>.\nCreates a vector with all elements set to <code>v</code>.\nCreates a vector with all elements set to <code>v</code>.\nCreates a vector with all elements set to <code>v</code>.\nCreates a vector with all elements set to <code>v</code>.\nCreates a vector with all elements set to <code>v</code>.\nCreates a vector with all elements set to <code>v</code>.\nCreates a vector with all elements set to <code>v</code>.\nCreates a vector with all elements set to <code>v</code>.\nCreates a vector with all elements set to <code>v</code>.\nSquares the f32\nSubtracts the <code>rhs</code> quaternion from <code>self</code>.\nSubtracts two 2x2 matrices.\nSubtracts two 3x3 matrices.\nSubtracts two 4x4 matrices.\nTraits adding swizzle methods to all vector types.\nTests the value at <code>index</code>.\nTests the value at <code>index</code>.\nReturns the angle (in radians) of this vector in the range …\n<code>[x, y, z, w]</code>\n<code>[x, y]</code>\n<code>[x, y, z]</code>\n<code>[x, y, z, w]</code>\n<code>[x, y]</code>\n<code>[x, y, z]</code>\n<code>[x, y, z, w]</code>\n<code>[x, y]</code>\n<code>[x, y, z]</code>\n<code>[x, y, z, w]</code>\n<code>[x, y]</code>\n<code>[x, y, z]</code>\n<code>[x, y, z, w]</code>\n<code>[x, y]</code>\n<code>[x, y, z]</code>\n<code>[x, y, z, w]</code>\n<code>[x, y]</code>\n<code>[x, y, z]</code>\n<code>[x, y, z, w]</code>\n<code>[x, y]</code>\n<code>[x, y, z]</code>\n<code>[x, y, z, w]</code>\nReturns the rotation axis (normalized) and angle (in …\nCreates a <code>[f64; 6]</code> array storing data in column major …\nCreates a <code>[f64; 12]</code> array storing data in column major …\nCreates a <code>[f64; 4]</code> array storing data in column major …\nCreates a <code>[f64; 9]</code> array storing data in column major …\nCreates a <code>[f64; 16]</code> array storing data in column major …\nCreates a <code>[[f64; 2]; 3]</code> 2D array storing data in column …\nCreates a <code>[[f64; 3]; 4]</code> 3D array storing data in column …\nCreates a <code>[[f64; 2]; 2]</code> 2D array storing data in column …\nCreates a <code>[[f64; 3]; 3]</code> 3D array storing data in column …\nCreates a <code>[[f64; 4]; 4]</code> 4D array storing data in column …\nExtract Euler angles with the given Euler rotation order.\nExtract Euler angles with the given Euler rotation order.\nReturns the rotation angles for the given euler rotation …\nExtracts <code>scale</code>, <code>angle</code> and <code>translation</code> from <code>self</code>.\nExtracts <code>scale</code>, <code>rotation</code> and <code>translation</code> from <code>self</code>.\nExtracts <code>scale</code>, <code>rotation</code> and <code>translation</code> from <code>self</code>. The …\nReturns the rotation axis scaled by the rotation in …\nCalculates the transpose of the affine 4x3 matrix to a 3x4 …\nTransform a point by rotating and translating it using …\nTransform a point by rotating and translating it using …\nTransforms the given 2D point, applying shear, scale, …\nTransforms the given 2D vector as a point.\nTransforms the given 3D points, applying shear, scale, …\nTransforms the given 3D vector as a point.\nTransforms the given 2D vector, applying shear, scale and …\nRotates the given 2D vector.\nTransforms the given 3D vector, applying shear, scale and …\nTransforms the give 3D vector as a direction.\nTranslation\nThe translational part of a two-dimensional isometry.\nThe translational part of a three-dimensional isometry.\nReturns the transpose of <code>self</code>.\nReturns the transpose of <code>self</code>.\nReturns the transpose of <code>self</code>.\nReturns a vector containing the integer part each element …\nReturns a vector containing the integer part each element …\nReturns a vector containing the integer part each element …\nCreates a 2D vector from the <code>x</code> and <code>y</code> elements of <code>self</code>, …\nCreates a 3D vector from the <code>x</code>, <code>y</code> and <code>z</code> elements of <code>self</code>, …\nCreates a 2D vector from the <code>x</code> and <code>y</code> elements of <code>self</code>, …\nCreates a 3D vector from the <code>x</code>, <code>y</code> and <code>z</code> elements of <code>self</code>, …\nCreates a 2D vector from the <code>x</code> and <code>y</code> elements of <code>self</code>, …\nCreates a 3D vector from the <code>x</code>, <code>y</code> and <code>z</code> elements of <code>self</code>, …\nCreates a 2D vector from the <code>x</code> and <code>y</code> elements of <code>self</code>, …\nCreates a 3D vector from the <code>x</code>, <code>y</code> and <code>z</code> elements of <code>self</code>, …\nCreates a 2D vector from the <code>x</code> and <code>y</code> elements of <code>self</code>, …\nCreates a 3D vector from the <code>x</code>, <code>y</code> and <code>z</code> elements of <code>self</code>, …\nCreates a 2D vector from the <code>x</code> and <code>y</code> elements of <code>self</code>, …\nCreates a 3D vector from the <code>x</code>, <code>y</code> and <code>z</code> elements of <code>self</code>, …\nCreates a 2D vector from the <code>x</code> and <code>y</code> elements of <code>self</code>, …\nCreates a 3D vector from the <code>x</code>, <code>y</code> and <code>z</code> elements of <code>self</code>, …\nAttempts to create a new <code>AspectRatio</code> from a given amount …\nAttempts to create a new <code>AspectRatio</code> from a given width …\nReturns <code>self</code> with a length of <code>1.0</code> if possible, and <code>None</code> …\nReturns <code>self</code> normalized to length 1.0 if possible, else …\nReturns <code>self</code> normalized to length 1.0 if possible, else …\nReturns <code>self</code> normalized to length 1.0 if possible, else …\nCreates a <code>Rot2</code> from a counterclockwise fraction of a full …\n<code>u16</code> vector types.\nCreates a 2-dimensional vector.\nCreates a 3-dimensional vector.\nCreates a 4-dimensional vector.\n<code>u32</code> vector types.\n<code>u64</code> vector types.\nCreates a 2-dimensional vector.\nCreates a 3-dimensional vector.\nCreates a 4-dimensional vector.\n<code>u8</code> vector types.\nCreates a 2-dimensional vector.\nCreates a 3-dimensional vector.\nCreates a 4-dimensional vector.\nBuild a new rectangle formed of the union of this …\nBuild a new rectangle formed of the union of this …\nBuild a new rectangle formed of the union of this …\nBuild a new rectangle formed of the union of this …\nBuild a new rectangle formed of the union of this …\nBuild a new rectangle formed of the union of this …\nCreates a 2-dimensional vector.\nCreates a 3-dimensional vector.\nCreates a 4-dimensional vector.\nCreates a 2-dimensional vector.\nCreates a 3-dimensional vector.\nCreates a 3-dimensional vector.\nCreates a 4-dimensional vector.\nRectangle width (max.x - min.x).\nRectangle width (max.x - min.x).\nRectangle width (max.x - min.x).\nCreates a 4D vector from <code>self</code> with the given value of <code>w</code>.\nCreates a 4D vector from <code>self</code> with the given value of <code>w</code>.\nCreates a 4D vector from <code>self</code> with the given value of <code>w</code>.\nCreates a 4D vector from <code>self</code> with the given value of <code>w</code>.\nCreates a 4D vector from <code>self</code> with the given value of <code>w</code>.\nCreates a 4D vector from <code>self</code> with the given value of <code>w</code>.\nCreates a 4D vector from <code>self</code> with the given value of <code>w</code>.\nCreates a 2D vector from <code>self</code> with the given value of <code>x</code>.\nCreates a 3D vector from <code>self</code> with the given value of <code>x</code>.\nCreates a 4D vector from <code>self</code> with the given value of <code>x</code>.\nCreates a 2D vector from <code>self</code> with the given value of <code>x</code>.\nCreates a 3D vector from <code>self</code> with the given value of <code>x</code>.\nCreates a 4D vector from <code>self</code> with the given value of <code>x</code>.\nCreates a 2D vector from <code>self</code> with the given value of <code>x</code>.\nCreates a 3D vector from <code>self</code> with the given value of <code>x</code>.\nCreates a 4D vector from <code>self</code> with the given value of <code>x</code>.\nCreates a 2D vector from <code>self</code> with the given value of <code>x</code>.\nCreates a 3D vector from <code>self</code> with the given value of <code>x</code>.\nCreates a 4D vector from <code>self</code> with the given value of <code>x</code>.\nCreates a 2D vector from <code>self</code> with the given value of <code>x</code>.\nCreates a 3D vector from <code>self</code> with the given value of <code>x</code>.\nCreates a 4D vector from <code>self</code> with the given value of <code>x</code>.\nCreates a 2D vector from <code>self</code> with the given value of <code>x</code>.\nCreates a 3D vector from <code>self</code> with the given value of <code>x</code>.\nCreates a 4D vector from <code>self</code> with the given value of <code>x</code>.\nCreates a 2D vector from <code>self</code> with the given value of <code>x</code>.\nCreates a 3D vector from <code>self</code> with the given value of <code>x</code>.\nCreates a 4D vector from <code>self</code> with the given value of <code>x</code>.\nCreates a 2D vector from <code>self</code> with the given value of <code>y</code>.\nCreates a 3D vector from <code>self</code> with the given value of <code>y</code>.\nCreates a 4D vector from <code>self</code> with the given value of <code>y</code>.\nCreates a 2D vector from <code>self</code> with the given value of <code>y</code>.\nCreates a 3D vector from <code>self</code> with the given value of <code>y</code>.\nCreates a 4D vector from <code>self</code> with the given value of <code>y</code>.\nCreates a 2D vector from <code>self</code> with the given value of <code>y</code>.\nCreates a 3D vector from <code>self</code> with the given value of <code>y</code>.\nCreates a 4D vector from <code>self</code> with the given value of <code>y</code>.\nCreates a 2D vector from <code>self</code> with the given value of <code>y</code>.\nCreates a 3D vector from <code>self</code> with the given value of <code>y</code>.\nCreates a 4D vector from <code>self</code> with the given value of <code>y</code>.\nCreates a 2D vector from <code>self</code> with the given value of <code>y</code>.\nCreates a 3D vector from <code>self</code> with the given value of <code>y</code>.\nCreates a 4D vector from <code>self</code> with the given value of <code>y</code>.\nCreates a 2D vector from <code>self</code> with the given value of <code>y</code>.\nCreates a 3D vector from <code>self</code> with the given value of <code>y</code>.\nCreates a 4D vector from <code>self</code> with the given value of <code>y</code>.\nCreates a 2D vector from <code>self</code> with the given value of <code>y</code>.\nCreates a 3D vector from <code>self</code> with the given value of <code>y</code>.\nCreates a 4D vector from <code>self</code> with the given value of <code>y</code>.\nCreates a 3D vector from <code>self</code> with the given value of <code>z</code>.\nCreates a 4D vector from <code>self</code> with the given value of <code>z</code>.\nCreates a 3D vector from <code>self</code> with the given value of <code>z</code>.\nCreates a 4D vector from <code>self</code> with the given value of <code>z</code>.\nCreates a 3D vector from <code>self</code> with the given value of <code>z</code>.\nCreates a 4D vector from <code>self</code> with the given value of <code>z</code>.\nCreates a 3D vector from <code>self</code> with the given value of <code>z</code>.\nCreates a 4D vector from <code>self</code> with the given value of <code>z</code>.\nCreates a 3D vector from <code>self</code> with the given value of <code>z</code>.\nCreates a 4D vector from <code>self</code> with the given value of <code>z</code>.\nCreates a 3D vector from <code>self</code> with the given value of <code>z</code>.\nCreates a 4D vector from <code>self</code> with the given value of <code>z</code>.\nCreates a 3D vector from <code>self</code> with the given value of <code>z</code>.\nCreates a 4D vector from <code>self</code> with the given value of <code>z</code>.\nReturns a vector containing the wrapping addition of <code>self</code> …\nReturns a vector containing the wrapping addition of <code>self</code> …\nReturns a vector containing the wrapping addition of <code>self</code> …\nReturns a vector containing the wrapping addition of <code>self</code> …\nReturns a vector containing the wrapping addition of <code>self</code> …\nReturns a vector containing the wrapping addition of <code>self</code> …\nReturns a vector containing the wrapping addition of <code>self</code> …\nReturns a vector containing the wrapping addition of <code>self</code> …\nReturns a vector containing the wrapping addition of <code>self</code> …\nReturns a vector containing the wrapping addition of <code>self</code> …\nReturns a vector containing the wrapping addition of <code>self</code> …\nReturns a vector containing the wrapping addition of <code>self</code> …\nReturns a vector containing the wrapping addition of <code>self</code> …\nReturns a vector containing the wrapping addition of <code>self</code> …\nReturns a vector containing the wrapping addition of <code>self</code> …\nReturns a vector containing the wrapping addition of <code>self</code> …\nReturns a vector containing the wrapping addition of <code>self</code> …\nReturns a vector containing the wrapping addition of <code>self</code> …\nReturns a vector containing the wrapping addition of <code>self</code> …\nReturns a vector containing the wrapping addition of <code>self</code> …\nReturns a vector containing the wrapping addition of <code>self</code> …\nReturns a vector containing the wrapping addition of <code>self</code> …\nReturns a vector containing the wrapping addition of <code>self</code> …\nReturns a vector containing the wrapping addition of <code>self</code> …\nReturns a vector containing the wrapping addition of <code>self</code> …\nReturns a vector containing the wrapping addition of <code>self</code> …\nReturns a vector containing the wrapping addition of <code>self</code> …\nReturns a vector containing the wrapping addition of <code>self</code> …\nReturns a vector containing the wrapping addition of <code>self</code> …\nReturns a vector containing the wrapping addition of <code>self</code> …\nReturns a vector containing the wrapping addition of <code>self</code> …\nReturns a vector containing the wrapping addition of <code>self</code> …\nReturns a vector containing the wrapping addition of <code>self</code> …\nReturns a vector containing the wrapping addition of <code>self</code> …\nReturns a vector containing the wrapping addition of <code>self</code> …\nReturns a vector containing the wrapping addition of <code>self</code> …\nReturns a vector containing the wrapping division of <code>self</code> …\nReturns a vector containing the wrapping division of <code>self</code> …\nReturns a vector containing the wrapping division of <code>self</code> …\nReturns a vector containing the wrapping division of <code>self</code> …\nReturns a vector containing the wrapping division of <code>self</code> …\nReturns a vector containing the wrapping division of <code>self</code> …\nReturns a vector containing the wrapping division of <code>self</code> …\nReturns a vector containing the wrapping division of <code>self</code> …\nReturns a vector containing the wrapping division of <code>self</code> …\nReturns a vector containing the wrapping division of <code>self</code> …\nReturns a vector containing the wrapping division of <code>self</code> …\nReturns a vector containing the wrapping division of <code>self</code> …\nReturns a vector containing the wrapping division of <code>self</code> …\nReturns a vector containing the wrapping division of <code>self</code> …\nReturns a vector containing the wrapping division of <code>self</code> …\nReturns a vector containing the wrapping division of <code>self</code> …\nReturns a vector containing the wrapping division of <code>self</code> …\nReturns a vector containing the wrapping division of <code>self</code> …\nReturns a vector containing the wrapping multiplication of …\nReturns a vector containing the wrapping multiplication of …\nReturns a vector containing the wrapping multiplication of …\nReturns a vector containing the wrapping multiplication of …\nReturns a vector containing the wrapping multiplication of …\nReturns a vector containing the wrapping multiplication of …\nReturns a vector containing the wrapping multiplication of …\nReturns a vector containing the wrapping multiplication of …\nReturns a vector containing the wrapping multiplication of …\nReturns a vector containing the wrapping multiplication of …\nReturns a vector containing the wrapping multiplication of …\nReturns a vector containing the wrapping multiplication of …\nReturns a vector containing the wrapping multiplication of …\nReturns a vector containing the wrapping multiplication of …\nReturns a vector containing the wrapping multiplication of …\nReturns a vector containing the wrapping multiplication of …\nReturns a vector containing the wrapping multiplication of …\nReturns a vector containing the wrapping multiplication of …\nReturns a vector containing the wrapping subtraction of …\nReturns a vector containing the wrapping subtraction of …\nReturns a vector containing the wrapping subtraction of …\nReturns a vector containing the wrapping subtraction of …\nReturns a vector containing the wrapping subtraction of …\nReturns a vector containing the wrapping subtraction of …\nReturns a vector containing the wrapping subtraction of …\nReturns a vector containing the wrapping subtraction of …\nReturns a vector containing the wrapping subtraction of …\nReturns a vector containing the wrapping subtraction of …\nReturns a vector containing the wrapping subtraction of …\nReturns a vector containing the wrapping subtraction of …\nReturns a vector containing the wrapping subtraction of …\nReturns a vector containing the wrapping subtraction of …\nReturns a vector containing the wrapping subtraction of …\nReturns a vector containing the wrapping subtraction of …\nReturns a vector containing the wrapping subtraction of …\nReturns a vector containing the wrapping subtraction of …\nReturns a vector containing the wrapping subtraction of …\nReturns a vector containing the wrapping subtraction of …\nReturns a vector containing the wrapping subtraction of …\nReturns a vector containing the wrapping subtraction of …\nReturns a vector containing the wrapping subtraction of …\nReturns a vector containing the wrapping subtraction of …\nReturns a vector containing the wrapping subtraction of …\nReturns a vector containing the wrapping subtraction of …\nReturns a vector containing the wrapping subtraction of …\nWrites the columns of <code>self</code> to the first 6 elements in <code>slice</code>…\nWrites the columns of <code>self</code> to the first 12 elements in …\nWrites the columns of <code>self</code> to the first 4 elements in <code>slice</code>…\nWrites the columns of <code>self</code> to the first 9 elements in <code>slice</code>…\nWrites the columns of <code>self</code> to the first 16 elements in …\nWrites the quaternion to an unaligned slice.\nWrites the elements of <code>self</code> to the first 2 elements in …\nWrites the elements of <code>self</code> to the first 3 elements in …\nWrites the elements of <code>self</code> to the first 4 elements in …\nWrites the elements of <code>self</code> to the first 2 elements in …\nWrites the elements of <code>self</code> to the first 3 elements in …\nWrites the elements of <code>self</code> to the first 4 elements in …\nWrites the elements of <code>self</code> to the first 2 elements in …\nWrites the elements of <code>self</code> to the first 3 elements in …\nWrites the elements of <code>self</code> to the first 4 elements in …\nWrites the elements of <code>self</code> to the first 2 elements in …\nWrites the elements of <code>self</code> to the first 3 elements in …\nWrites the elements of <code>self</code> to the first 4 elements in …\nWrites the elements of <code>self</code> to the first 2 elements in …\nWrites the elements of <code>self</code> to the first 3 elements in …\nWrites the elements of <code>self</code> to the first 4 elements in …\nWrites the elements of <code>self</code> to the first 2 elements in …\nWrites the elements of <code>self</code> to the first 3 elements in …\nWrites the elements of <code>self</code> to the first 4 elements in …\nWrites the elements of <code>self</code> to the first 2 elements in …\nWrites the elements of <code>self</code> to the first 3 elements in …\nWrites the elements of <code>self</code> to the first 4 elements in …\nReturns the vector part of the quaternion.\nCreate a new <code>Curve</code> by zipping this curve together with …\nA 2-dimensional <code>bool</code> vector mask.\nA 3-dimensional <code>bool</code> vector mask.\nA 3-dimensional SIMD vector mask.\nA 4-dimensional <code>bool</code> vector mask.\nA 4-dimensional SIMD vector mask.\nAll false.\nAll false.\nAll false.\nAll true.\nAll true.\nAll true.\nReturns true if all the elements are true, false otherwise.\nReturns true if all the elements are true, false otherwise.\nReturns true if all the elements are true, false otherwise.\nReturns true if any of the elements are true, false …\nReturns true if any of the elements are true, false …\nReturns true if any of the elements are true, false …\nReturns a bitmask with the lowest 2 bits set from the …\nReturns a bitmask with the lowest 3 bits set from the …\nReturns a bitmask with the lowest 4 bits set from the …\nCreates a 2-dimensional <code>bool</code> vector mask.\nCreates a 3-dimensional <code>bool</code> vector mask.\nCreates a 3-dimensional <code>bool</code> vector mask.\nCreates a 4-dimensional <code>bool</code> vector mask.\nCreates a 4-dimensional <code>bool</code> vector mask.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a new vector mask from a bool array.\nCreates a new vector mask from a bool array.\nCreates a new vector mask from a bool array.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new vector mask.\nCreates a new vector mask.\nCreates a new vector mask.\nSets the element at <code>index</code>.\nSets the element at <code>index</code>.\nSets the element at <code>index</code>.\nCreates a vector mask with all elements set to <code>v</code>.\nCreates a vector mask with all elements set to <code>v</code>.\nCreates a vector mask with all elements set to <code>v</code>.\nTests the value at <code>index</code>.\nTests the value at <code>index</code>.\nTests the value at <code>index</code>.\nA 2D axis-aligned bounding box, or bounding rectangle\nA 3D axis-aligned bounding box\nAn intersection test that casts an <code>Aabb2d</code> along a ray.\nAn intersection test that casts an <code>Aabb3d</code> along a ray.\nA trait with methods that return 2D bounding volumes for a …\nA trait with methods that return 3D bounding volumes for a …\nA trait implemented on 2D shapes which determines the 3D …\nA bounding circle\nAn intersection test that casts a <code>BoundingCircle</code> along a …\nA bounding sphere\nAn intersection test that casts a <code>BoundingSphere</code> along a …\nA trait that generalizes different bounding volumes. …\nThe type used for the size of the bounding volume. Usually …\nA trait that generalizes intersection tests against a …\nA raycast intersection test for 2D bounding volumes\nA raycast intersection test for 3D bounding volumes\nThe rotation type used for the volume. This should be <code>f32</code> …\nThe position type used for the volume. This should be <code>Vec2</code> …\nThe aabb that is being cast\nThe aabb that is being cast\nGet an axis-aligned bounding box for the shape translated …\nComputes the smallest <code>Aabb2d</code> containing this <code>BoundingCircle</code>…\nGet an axis-aligned bounding box for the shape translated …\nComputes the smallest <code>Aabb3d</code> containing this <code>BoundingSphere</code>…\nGet the distance at which the <code>Aabb2d</code>s collide, if at all.\nGet the distance at which the <code>Aabb3d</code>s collide, if at all.\nGet the distance of an intersection with an <code>Aabb2d</code>, if any.\nGet the distance of an intersection with an <code>Aabb3d</code>, if any.\nGet a bounding circle for the shape translated and rotated …\nComputes the smallest <code>BoundingCircle</code> containing this <code>Aabb2d</code>…\nGet a bounding sphere for the shape translated and rotated …\nComputes the smallest <code>BoundingSphere</code> containing this <code>Aabb3d</code>…\nReturns the center of the bounding volume.\nThe center of the bounding circle\nThe center of the bounding sphere\nThe circle\nThe circle that is being cast\nGet the distance at which the <code>BoundingCircle</code>s collide, if …\nGet the distance of an intersection with a <code>BoundingCircle</code>, …\nFinds the point on the AABB that is closest to the given …\nFinds the point on the bounding circle that is closest to …\nFinds the point on the AABB that is closest to the given …\nFinds the point on the bounding sphere that is closest to …\nChecks if this bounding volume contains another one.\nThe direction of the ray.\nGet the cached multiplicative inverse of the direction of …\nGet the cached multiplicative inverse of the direction of …\nGet an axis-aligned bounding box for an extrusion with …\nGet a bounding sphere for an extrusion of the <code>base_shape</code> …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nComputes the smallest <code>Aabb2d</code> containing the given set of …\nComputes a <code>BoundingCircle</code> containing the given set of …\nComputes the smallest <code>Aabb3d</code> containing the given set of …\nComputes a <code>BoundingSphere</code> containing the given set of …\nConstruct a <code>RayCast2d</code> from a <code>Ray2d</code> and max distance.\nConstruct an <code>AabbCast2d</code> from an <code>Aabb2d</code>, <code>Ray2d</code>, and max …\nConstruct a <code>BoundingCircleCast</code> from a <code>BoundingCircle</code>, <code>Ray2d</code>…\nConstruct a <code>RayCast3d</code> from a <code>Ray3d</code> and max distance.\nConstruct an <code>AabbCast3d</code> from an <code>Aabb3d</code>, <code>Ray3d</code>, and max …\nConstruct a <code>BoundingSphereCast</code> from a <code>BoundingSphere</code>, <code>Ray3d</code>…\nIncreases the size of the bounding volume in each …\nReturns the half size of the bounding volume.\nCheck if a volume intersects with this intersection test\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe maximum, conventionally top-right, point of the box\nThe maximum point of the box\nThe maximum distance for the ray\nThe maximum distance for the ray\nComputes the smallest bounding volume that contains both …\nThe minimum, conventionally bottom-left, point of the box\nThe minimum point of the box\nConstructs an AABB from its center and half-size.\nConstructs a bounding circle from its center and radius.\nConstructs an AABB from its center and half-size.\nConstructs a bounding sphere from its center and radius.\nConstruct a <code>RayCast2d</code> from an origin, <code>Dir2</code>, and max …\nConstruct an <code>AabbCast2d</code> from an <code>Aabb2d</code>, origin, <code>Dir2</code>, and …\nConstruct a <code>BoundingCircleCast</code> from a <code>BoundingCircle</code>, …\nConstruct a <code>RayCast3d</code> from an origin, direction, and max …\nConstruct an <code>AabbCast3d</code> from an <code>Aabb3d</code>, origin, direction, …\nConstruct a <code>BoundingSphereCast</code> from a <code>BoundingSphere</code>, …\nThe origin of the ray.\nGet the radius of the bounding circle\nGet the radius of the bounding sphere\nThe ray for the test\nThe ray along which to cast the bounding volume\nThe ray along which to cast the bounding volume\nThe ray along which to cast the bounding volume\nThe ray along which to cast the bounding volume\nRotates the bounding volume around the origin by the given …\nRotates the bounding volume around the origin by the given …\nRotates the bounding volume around the origin by the given …\nRotates the bounding volume around the origin by the given …\nRotates the bounding volume around the origin by the given …\nRotates the bounding volume around the origin by the given …\nScale the size of the bounding volume around its center by …\nDecreases the size of the bounding volume in each …\nThe sphere\nThe sphere that is being cast\nGet the distance at which the <code>BoundingSphere</code>s collide, if …\nGet the distance of an intersection with a <code>BoundingSphere</code>, …\nTransforms the bounding volume by first rotating it around …\nTransforms the bounding volume by first rotating it around …\nTransforms the bounding volume by first rotating it around …\nTransforms the bounding volume by first rotating it around …\nTransforms the bounding volume by first rotating it around …\nTransforms the bounding volume by first rotating it around …\nTranslates the bounding volume by the given translation.\nTranslates the bounding volume by the given translation.\nComputes the visible surface area of the bounding volume. …\nA type that supports the operations of a normed vector …\nA type with a natural interpolation that provides strong …\nA type that supports the mathematical operations of a real …\nThe zero vector, which is the identity of addition for the …\nThe distance between this element and another, as …\nThe squared distance between this element and another, as …\nInterpolate between this value and the <code>other</code> given value …\nA version of <code>interpolate_stable</code> that assigns the result to …\nPerform vector space linear interpolation between this …\nThe size of this element. The return value should always …\nThe squared norm of this element. Computing this is often …\nSmoothly nudge this value towards the <code>target</code> at a given …\nThe provided knots were all equal. Knots must contain at …\nA spline interpolated continuously across the nearest four …\nA spline composed of a single cubic Bezier curve.\nAn error returned during cubic curve generation for cubic …\nA spline interpolated continuously across the nearest four …\nA collection of <code>CubicSegment</code>s chained into a single …\nImplement this on cubic splines that can generate a cubic …\nA spline interpolated continuously between the nearest two …\nNon-uniform Rational B-Splines (NURBS) are a powerful …\nError during construction of <code>CubicNurbs</code>\nA segment of a cubic curve, used to hold precomputed …\nImplement this on cubic splines that can generate a cyclic …\nThe provided knots had a descending knot pair. Subsequent …\nAn error type indicating why construction might fail.\nAn error type indicating why construction might fail.\nAn error type indicating why construction might fail.\nAn error indicating that a spline construction didn’t …\nProvided the wrong number of knots.\nA spline interpolated linearly between the nearest 2 …\nThe number of control points provided is less than 4.\nA collection of <code>RationalSegment</code>s chained into a single …\nImplement this on cubic splines that can generate a …\nA segment of a rational cubic curve, used to hold …\nProvided a different number of weights and control points.\nPolynomial coefficients for the segment.\nThe coefficients matrix of the cubic curve.\nThe control points of the Bezier curve.\nThe control points of the Hermite curve.\nThe control points of the Cardinal spline\nThe control points of the spline\nThe control points of the NURBS\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe width of the domain of this segment.\nKnots\nCreate a new linear spline from a list of points to be …\nThe control points of the linear spline.\nTension\nBuild a <code>CubicCurve</code> by computing the interpolation …\nBuild a <code>RationalCurve</code> by computing the interpolation …\nBuild a cyclic <code>CubicCurve</code> by computing the interpolation …\nThe homogeneous weight coefficients.\nWeights\nExpected number of knots\nExpected number of weights\nProvided number of knots\nProvided number of weights\nThe number of control points provided\n<code>f(t) = 2.70158 * t³ - 1.70158 * t²</code>\nBehaves as <code>EaseFunction::BackIn</code> for t &lt; 0.5 and as …\n<code>f(t) = 1.0 +  2.70158 * (t - 1.0)³ - 1.70158 * (t - 1.0)²</code>\nbouncy at the start!\nBehaves as <code>EaseFunction::BounceIn</code> for t &lt; 0.5 and as …\nbouncy at the end!\nThe curve that results from chaining one curve with …\nAn error indicating that an end-to-end composition couldn…\n<code>f(t) = 1.0 - sqrt(1.0 - t²)</code>\nBehaves as <code>EaseFunction::CircularIn</code> for t &lt; 0.5 and as …\n<code>f(t) = sqrt((2.0 - t) * t)</code>\nA curve with a constant value over its domain.\nThe curve that results from chaining two curves.\n<code>f(t) = t³</code>\nBehaves as <code>EaseFunction::CubicIn</code> for t &lt; 0.5 and as …\n<code>f(t) = (t - 1.0)³ + 1.0</code>\nA trait for a type that can represent values of type <code>T</code> …\nA curve that has been reparametrized by another curve, …\nA type whose values can be eased between.\nCurve functions over the unit interval, commonly used for …\nA <code>Curve</code> that is defined by\n…\n…\nBehaves as <code>EaseFunction::ElasticIn</code> for t &lt; 0.5 and as …\n…\n<code>f(t) = 2.0^(10.0 * (t - 1.0))</code>\nBehaves as <code>EaseFunction::ExponentialIn</code> for t &lt; 0.5 and as …\n<code>f(t) = 1.0 - 2.0^(-10.0 * t)</code>\nThe right endpoint of the first curve was infinite.\nThe curve that results from repeating a curve forever.\nA curve defined by a function together with a fixed domain.\nA curve that is the graph of another curve over its …\nA nonempty closed interval, possibly unbounded in either …\n<code>f(t) = t</code>\nA curve that has had its domain changed by a linear …\nAn error indicating that a linear reparametrization couldn…\nA curve whose samples are defined by mapping samples from …\nThis resampling operation was not provided with enough …\nThe curve that results from chaining a curve with its …\nAn error indicating that a ping ponging of a curve couldn…\n<code>f(t) = t²</code>\nBehaves as <code>EaseFunction::QuadraticIn</code> for t &lt; 0.5 and as …\n<code>f(t) = -(t * (t - 2.0))</code>\n<code>f(t) = t⁴</code>\nBehaves as <code>EaseFunction::QuarticIn</code> for t &lt; 0.5 and as …\n<code>f(t) = (t - 1.0)³ * (1.0 - t) + 1.0</code>\n<code>f(t) = t⁵</code>\nBehaves as <code>EaseFunction::QuinticIn</code> for t &lt; 0.5 and as …\n<code>f(t) = (t - 1.0)⁵ + 1.0</code>\nA curve whose sample space is mapped onto that of some …\nThe curve that results from repeating a curve <code>N</code> times.\nAn error indicating that a repetition of a curve couldn’…\nAn error indicating that a resampling operation could not …\nThe curve that results from reversing another.\nAn error indicating that a reversion of a curve couldn’t …\nA curve that is defined by neighbor interpolation over a …\nA curve that is defined by explicit neighbor interpolation …\nThe left endpoint of the second curve was infinite.\n<code>f(t) = 1.0 - cos(t * π / 2.0)</code>\nBehaves as <code>EaseFunction::SineIn</code> for t &lt; 0.5 and as …\n<code>f(t) = sin(t * π / 2.0)</code>\nThe source curve that was to be reparametrized had …\nThe source curve that was to be reversed had unbounded …\nThe source curve that was to be ping ponged had unbounded …\nThe source curve that was to be repeated had unbounded …\n<code>n</code> steps connecting the start and the end\nThe target interval for reparametrization was unbounded.\nThis resampling operation failed because of an unbounded …\nA curve that is defined by interpolation over unevenly …\nA curve that is defined by interpolation over unevenly …\nA curve that combines the output data from two constituent …\nBorrow this curve rather than taking ownership of it. This …\nCreate a new <code>Curve</code> by composing this curve end-to-start …\nCreate a new <code>Curve</code> by composing this curve end-to-start …\nThe interval over which this curve is parametrized.\nFlip this curve so that its tuple output is arranged the …\nCreate a new <code>Curve</code> repeating this curve forever, producing …\nCreate a new <code>Curve</code> which is the graph of this one; that …\nGiven <code>start</code> and <code>end</code> values, produce a curve with unlimited …\nCreate an <code>Interval</code> with a given <code>start</code> and <code>end</code>. Alias of …\nCreate a new curve by mapping the values of this curve via …\nCreate a new <code>Curve</code> chaining the original curve with its …\nCreate a new <code>Curve</code> whose parameter space is related to the …\nReparametrize this <code>Curve</code> by sampling from another curve.\nLinearly reparametrize this <code>Curve</code>, producing a new curve …\nCreate a new <code>Curve</code> repeating this curve <code>N</code> times, producing …\nResample this <code>Curve</code> to produce a new one that is defined …\nResample this <code>Curve</code> to produce a new one that is defined …\nResample this <code>Curve</code> to produce a new one that is defined …\nResample this <code>Curve</code> to produce a new one that is defined …\nCreate a new <code>Curve</code> inverting this curve on the x-axis, …\nSample a point on this curve at the parameter value <code>t</code>, …\nSample a point on this curve at the parameter value <code>t</code>, …\nSample a collection of <code>n &gt;= 0</code> points on this curve at the …\nSample a collection of <code>n &gt;= 0</code> points on this curve at the …\nSample a collection of <code>n &gt;= 0</code> points on this curve at the …\nSample a point on this curve at the parameter value <code>t</code>, …\nExtract an iterator over evenly-spaced samples from this …\nCreate a new <code>Curve</code> by zipping this curve together with …\nThe unit axes.\nThe unit axes.\nThe unit axes.\nThe unit axes.\nA 2D affine transform, which can represent translation, …\nA 3D affine transform, which can represent translation, …\nThe identity transform.\nThe identity transform.\nA 3x3 identity matrix, where all diagonal elements are <code>1</code>, …\nA 2x2 identity matrix, where all diagonal elements are <code>1</code>, …\nA 3x3 identity matrix, where all diagonal elements are <code>1</code>, …\nA 4x4 identity matrix, where all diagonal elements are <code>1</code>, …\nThe identity quaternion. Corresponds to no rotation.\nAll <code>f32::INFINITY</code>.\nAll <code>f32::INFINITY</code>.\nAll <code>f32::INFINITY</code>.\nAll <code>f32::INFINITY</code>.\nAll <code>f32::MAX</code>.\nAll <code>f32::MAX</code>.\nAll <code>f32::MAX</code>.\nAll <code>f32::MAX</code>.\nAll <code>f32::MIN</code>.\nAll <code>f32::MIN</code>.\nAll <code>f32::MIN</code>.\nAll <code>f32::MIN</code>.\nA 2x2 column major matrix.\nA 3x3 column major matrix.\nA 3x3 column major matrix.\nA 4x4 column major matrix.\nAll NAN:s.\nAll NAN:s.\nAll NAN:s.\nAll <code>f32::NAN</code>.\nAll <code>f32::NAN</code>.\nAll NAN:s.\nAll NAN:s.\nAll NAN:s.\nAll NANs.\nAll <code>f32::NAN</code>.\nAll <code>f32::NAN</code>.\nAll <code>f32::NEG_INFINITY</code>.\nAll <code>f32::NEG_INFINITY</code>.\nAll <code>f32::NEG_INFINITY</code>.\nAll <code>f32::NEG_INFINITY</code>.\nAll negative ones.\nAll negative ones.\nAll negative ones.\nAll negative ones.\nA unit vector pointing along the negative W axis.\nA unit vector pointing along the negative X axis.\nA unit vector pointing along the negative X axis.\nA unit vector pointing along the negative X axis.\nA unit vector pointing along the negative X axis.\nA unit vector pointing along the negative Y axis.\nA unit vector pointing along the negative Y axis.\nA unit vector pointing along the negative Y axis.\nA unit vector pointing along the negative Y axis.\nA unit vector pointing along the negative Z axis.\nA unit vector pointing along the negative Z axis.\nA unit vector pointing along the negative Z axis.\nAll ones.\nAll ones.\nAll ones.\nAll ones.\nA quaternion representing an orientation.\nA 2-dimensional vector.\nA 3-dimensional vector.\nA 3-dimensional vector.\nA 4-dimensional vector.\nA unit vector pointing along the positive W axis.\nA unit vector pointing along the positive X axis.\nA unit vector pointing along the positive X axis.\nA unit vector pointing along the positive X axis.\nA unit vector pointing along the positive X axis.\nA unit vector pointing along the positive Y axis.\nA unit vector pointing along the positive Y axis.\nA unit vector pointing along the positive Y axis.\nA unit vector pointing along the positive Y axis.\nA unit vector pointing along the positive Z axis.\nA unit vector pointing along the positive Z axis.\nA unit vector pointing along the positive Z axis.\nThe degenerate zero transform.\nThe degenerate zero transform.\nA 3x3 matrix with all elements set to <code>0.0</code>.\nAll zeroes.\nAll zeroes.\nA 2x2 matrix with all elements set to <code>0.0</code>.\nA 3x3 matrix with all elements set to <code>0.0</code>.\nA 4x4 matrix with all elements set to <code>0.0</code>.\nAll zeroes.\nAll zeroes.\nTakes the absolute value of each element in <code>self</code>\nReturns a vector containing the absolute value of each …\nReturns a vector containing the absolute value of each …\nTakes the absolute value of each element in <code>self</code>\nTakes the absolute value of each element in <code>self</code>\nTakes the absolute value of each element in <code>self</code>\nReturns a vector containing the absolute value of each …\nReturns a vector containing the absolute value of each …\nReturns true if the absolute difference of all elements …\nReturns true if the absolute difference of all elements …\nReturns true if the absolute difference of all elements …\nReturns true if the absolute difference of all elements …\nReturns true if the absolute difference of all elements …\nReturns true if the absolute difference of all elements …\nReturns true if the absolute difference of all elements …\nReturns true if the absolute difference of all elements …\nReturns true if the absolute difference of all elements …\nReturns true if the absolute difference of all elements …\nReturns true if the absolute difference of all elements …\nAdds two quaternions.\nAdds two 2x2 matrices.\nAdds two 3x3 matrices.\nAdds two 3x3 matrices.\nAdds two 4x4 matrices.\nReturns the angle (in radians) between two vectors in the …\nReturns the angle (in radians) for the minimal rotation …\nReturns the angle (in radians) between two vectors in the …\nReturns the angle of rotation (in radians) from <code>self</code> to <code>rhs</code>…\nReturns some vector that is orthogonal to the given one.\nReturns some vector that is orthogonal to the given one.\nGiven a unit vector return two other vectors that together …\nGiven a unit vector return two other vectors that together …\nReturns any unit vector that is orthogonal to the given …\nReturns any unit vector that is orthogonal to the given …\nCasts all elements of <code>self</code> to <code>f64</code>.\nCasts all elements of <code>self</code> to <code>f64</code>.\nCasts all elements of <code>self</code> to <code>f64</code>.\nCasts all elements of <code>self</code> to <code>f64</code>.\nCasts all elements of <code>self</code> to <code>i16</code>.\nCasts all elements of <code>self</code> to <code>i16</code>.\nCasts all elements of <code>self</code> to <code>i16</code>.\nCasts all elements of <code>self</code> to <code>i16</code>.\nCasts all elements of <code>self</code> to <code>i64</code>.\nCasts all elements of <code>self</code> to <code>i64</code>.\nCasts all elements of <code>self</code> to <code>i64</code>.\nCasts all elements of <code>self</code> to <code>i64</code>.\nCasts all elements of <code>self</code> to <code>i8</code>.\nCasts all elements of <code>self</code> to <code>i8</code>.\nCasts all elements of <code>self</code> to <code>i8</code>.\nCasts all elements of <code>self</code> to <code>i8</code>.\nCasts all elements of <code>self</code> to <code>i32</code>.\nCasts all elements of <code>self</code> to <code>i32</code>.\nCasts all elements of <code>self</code> to <code>i32</code>.\nCasts all elements of <code>self</code> to <code>i32</code>.\nCasts all elements of <code>self</code> to <code>u16</code>.\nCasts all elements of <code>self</code> to <code>u16</code>.\nCasts all elements of <code>self</code> to <code>u16</code>.\nCasts all elements of <code>self</code> to <code>u16</code>.\nCasts all elements of <code>self</code> to <code>u64</code>.\nCasts all elements of <code>self</code> to <code>u64</code>.\nCasts all elements of <code>self</code> to <code>u64</code>.\nCasts all elements of <code>self</code> to <code>u64</code>.\nCasts all elements of <code>self</code> to <code>u8</code>.\nCasts all elements of <code>self</code> to <code>u8</code>.\nCasts all elements of <code>self</code> to <code>u8</code>.\nCasts all elements of <code>self</code> to <code>u8</code>.\nCasts all elements of <code>self</code> to <code>u32</code>.\nCasts all elements of <code>self</code> to <code>u32</code>.\nCasts all elements of <code>self</code> to <code>u32</code>.\nCasts all elements of <code>self</code> to <code>u32</code>.\nReturns a vector containing the smallest integer greater …\nReturns a vector containing the smallest integer greater …\nReturns a vector containing the smallest integer greater …\nReturns a vector containing the smallest integer greater …\nComponent-wise clamping of values, similar to <code>f32::clamp</code>.\nComponent-wise clamping of values, similar to <code>f32::clamp</code>.\nComponent-wise clamping of values, similar to <code>f32::clamp</code>.\nComponent-wise clamping of values, similar to <code>f32::clamp</code>.\nReturns a vector with a length no less than <code>min</code> and no …\nReturns a vector with a length no less than <code>min</code> and no …\nReturns a vector with a length no less than <code>min</code> and no …\nReturns a vector with a length no less than <code>min</code> and no …\nReturns a vector with a length no more than <code>max</code>.\nReturns a vector with a length no more than <code>max</code>.\nReturns a vector with a length no more than <code>max</code>.\nReturns a vector with a length no more than <code>max</code>.\nReturns a vector with a length no less than <code>min</code>.\nReturns a vector with a length no less than <code>min</code>.\nReturns a vector with a length no less than <code>min</code>.\nReturns a vector with a length no less than <code>min</code>.\nReturns a vector mask containing the result of a <code>==</code> …\nReturns a vector mask containing the result of a <code>==</code> …\nReturns a vector mask containing the result of a <code>==</code> …\nReturns a vector mask containing the result of a <code>==</code> …\nReturns a vector mask containing the result of a <code>&gt;=</code> …\nReturns a vector mask containing the result of a <code>&gt;=</code> …\nReturns a vector mask containing the result of a <code>&gt;=</code> …\nReturns a vector mask containing the result of a <code>&gt;=</code> …\nReturns a vector mask containing the result of a <code>&gt;</code> …\nReturns a vector mask containing the result of a <code>&gt;</code> …\nReturns a vector mask containing the result of a <code>&gt;</code> …\nReturns a vector mask containing the result of a <code>&gt;</code> …\nReturns a vector mask containing the result of a <code>&lt;=</code> …\nReturns a vector mask containing the result of a <code>&lt;=</code> …\nReturns a vector mask containing the result of a <code>&lt;=</code> …\nReturns a vector mask containing the result of a <code>&lt;=</code> …\nReturns a vector mask containing the result of a <code>&lt;</code> …\nReturns a vector mask containing the result of a <code>&lt;</code> …\nReturns a vector mask containing the result of a <code>&lt;</code> …\nReturns a vector mask containing the result of a <code>&lt;</code> …\nReturns a vector mask containing the result of a <code>!=</code> …\nReturns a vector mask containing the result of a <code>!=</code> …\nReturns a vector mask containing the result of a <code>!=</code> …\nReturns a vector mask containing the result of a <code>!=</code> …\nReturns the matrix column for the given <code>index</code>.\nReturns the matrix column for the given <code>index</code>.\nReturns the matrix column for the given <code>index</code>.\nReturns the matrix column for the given <code>index</code>.\nReturns a mutable reference to the matrix column for the …\nReturns a mutable reference to the matrix column for the …\nReturns a mutable reference to the matrix column for the …\nReturns a mutable reference to the matrix column for the …\nReturns the quaternion conjugate of <code>self</code>. For a unit …\nReturns a vector with signs of <code>rhs</code> and the magnitudes of …\nReturns a vector with signs of <code>rhs</code> and the magnitudes of …\nReturns a vector with signs of <code>rhs</code> and the magnitudes of …\nReturns a vector with signs of <code>rhs</code> and the magnitudes of …\nComputes the cross product of <code>self</code> and <code>rhs</code>.\nComputes the cross product of <code>self</code> and <code>rhs</code>.\nReturns the determinant of <code>self</code>.\nReturns the determinant of <code>self</code>.\nReturns the determinant of <code>self</code>.\nReturns the determinant of <code>self</code>.\nComputes the Euclidean distance between two points in …\nComputes the Euclidean distance between two points in …\nComputes the Euclidean distance between two points in …\nComputes the Euclidean distance between two points in …\nCompute the squared euclidean distance between two points …\nCompute the squared euclidean distance between two points …\nCompute the squared euclidean distance between two points …\nCompute the squared euclidean distance between two points …\nDivides a quaternion by a scalar value. The quotient is …\nReturns the element-wise quotient of [Euclidean division] …\nReturns the element-wise quotient of [Euclidean division] …\nReturns the element-wise quotient of [Euclidean division] …\nReturns the element-wise quotient of [Euclidean division] …\nDivides a 3x3 matrix by a scalar.\nDivides a 2x2 matrix by a scalar.\nDivides a 3x3 matrix by a scalar.\nDivides a 4x4 matrix by a scalar.\nComputes the dot product of <code>self</code> and <code>rhs</code>.\nComputes the dot product of <code>self</code> and <code>rhs</code>.\nComputes the dot product of <code>self</code> and <code>rhs</code>. The dot product …\nComputes the dot product of <code>self</code> and <code>rhs</code>.\nComputes the dot product of <code>self</code> and <code>rhs</code>.\nReturns a vector where every component is the dot product …\nReturns a vector where every component is the dot product …\nReturns a vector where every component is the dot product …\nReturns a vector where every component is the dot product …\nReturns the product of all elements of <code>self</code>.\nReturns the product of all elements of <code>self</code>.\nReturns the product of all elements of <code>self</code>.\nReturns the product of all elements of <code>self</code>.\nReturns the sum of all elements of <code>self</code>.\nReturns the sum of all elements of <code>self</code>.\nReturns the sum of all elements of <code>self</code>.\nReturns the sum of all elements of <code>self</code>.\nReturns a vector containing <code>e^self</code> (the exponential …\nReturns a vector containing <code>e^self</code> (the exponential …\nReturns a vector containing <code>e^self</code> (the exponential …\nReturns a vector containing <code>e^self</code> (the exponential …\nCreates a 3D vector from <code>self</code> and the given <code>z</code> value.\nCreates a 4D vector from <code>self</code> and the given <code>w</code> value.\nCreates a 4D vector from <code>self</code> and the given <code>w</code> value.\nReturns a vector containing the largest integer less than …\nReturns a vector containing the largest integer less than …\nReturns a vector containing the largest integer less than …\nReturns a vector containing the largest integer less than …\nReturns a vector containing the fractional part of the …\nReturns a vector containing the fractional part of the …\nReturns a vector containing the fractional part of the …\nReturns a vector containing the fractional part of the …\nReturns a vector containing the fractional part of the …\nReturns a vector containing the fractional part of the …\nReturns a vector containing the fractional part of the …\nReturns a vector containing the fractional part of the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a <code>Mat2</code> rotation matrix from a <code>Rot2</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a quaternion from a 3x3 rotation matrix inside a …\nCreates an affine transform from the given rotation <code>angle</code>.\nCreates an affine transformation matrix from the given 2D …\nCreates a 2D vector containing <code>[angle.cos(), angle.sin()]</code>. …\nCreates a 2x2 matrix containing a rotation of <code>angle</code> (in …\nCreates an affine transformation matrix from the given 2D …\nCreates an affine transform from the given 2D rotation …\nCreates a new vector from an array.\nCreates a new vector from an array.\nCreates a rotation quaternion from an array.\nCreates a new vector from an array.\nCreates a new vector from an array.\nCreates an affine transform containing a 3D rotation …\nCreates a 3D rotation matrix from a normalized rotation …\nCreates a 3D rotation matrix from a normalized rotation …\nCreates an affine transformation matrix containing a 3D …\nCreate a quaternion for a normalized rotation <code>axis</code> and …\nCreates an affine transform from three column vectors.\nCreates an affine transform from three column vectors.\nCreates a 3x3 matrix from three column vectors.\nCreates a 2x2 matrix from two column vectors.\nCreates a 3x3 matrix from three column vectors.\nCreates a 4x4 matrix from four column vectors.\nCreates an affine transform from a <code>[f32; 6]</code> array stored …\nCreates an affine transform from a <code>[f32; 12]</code> array stored …\nCreates a 3x3 matrix from a <code>[f32; 9]</code> array stored in …\nCreates a 2x2 matrix from a <code>[f32; 4]</code> array stored in …\nCreates a 3x3 matrix from a <code>[f32; 9]</code> array stored in …\nCreates a 4x4 matrix from a <code>[f32; 16]</code> array stored in …\nCreates an affine transform from a <code>[[f32; 2]; 3]</code> 2D array …\nCreates an affine transform from a <code>[[f32; 3]; 4]</code> 3D array …\nCreates a 3x3 matrix from a <code>[[f32; 3]; 3]</code> 3D array stored …\nCreates a 2x2 matrix from a <code>[[f32; 2]; 2]</code> 2D array stored …\nCreates a 3x3 matrix from a <code>[[f32; 3]; 3]</code> 3D array stored …\nCreates a 4x4 matrix from a <code>[[f32; 4]; 4]</code> 4D array stored …\nCreates an affine transform from the first 6 values in …\nCreates an affine transform from the first 12 values in …\nCreates a 3x3 matrix from the first 9 values in <code>slice</code>.\nCreates a 2x2 matrix from the first 4 values in <code>slice</code>.\nCreates a 3x3 matrix from the first 9 values in <code>slice</code>.\nCreates a 4x4 matrix from the first 16 values in <code>slice</code>.\nCreates a 3x3 matrix with its diagonal set to <code>diagonal</code> and …\nCreates a 2x2 matrix with its diagonal set to <code>diagonal</code> and …\nCreates a 3x3 matrix with its diagonal set to <code>diagonal</code> and …\nCreates a 4x4 matrix with its diagonal set to <code>diagonal</code> and …\nCreates a 3D rotation matrix from the given euler rotation …\nCreates a 3D rotation matrix from the given euler rotation …\nCreates a affine transformation matrix containing a …\nCreates a quaternion from the given Euler rotation …\nCreates an affine transform from a 2x2 matrix (expressing …\nCreates an affine transformation matrix from the given 2x2 …\nCreates an affine transformation matrix from the given 2x2 …\nCreates an affine transform from a 2x2 matrix (expressing …\nThe given <code>Mat3</code> must be an affine transform,\nCreates an affine transform from a 3x3 matrix (expressing …\nCreates a 2x2 matrix from a 3x3 matrix, discarding the 2nd …\nCreates an affine transformation matrix from the given 3x3 …\nCreates a quaternion from a 3x3 rotation matrix.\nCreates a 2x2 matrix from the minor of the given 3x3 …\nCreates an affine transform from a 3x3 matrix (expressing …\nThe given <code>Mat3A</code> must be an affine transform,\nCreates a 2x2 matrix from a 3x3 matrix, discarding the 2nd …\nCreates an affine transformation matrix from the given 3x3 …\nCreates a quaternion from a 3x3 SIMD aligned rotation …\nCreates a 2x2 matrix from the minor of the given 3x3 …\nThe given <code>Mat4</code> must be an affine transform, i.e. contain …\nCreates a 3x3 matrix from a 4x4 matrix, discarding the 4th …\nCreates a 3x3 matrix from a 4x4 matrix, discarding the 4th …\nCreates a quaternion from the upper 3x3 rotation matrix …\nCreates a 3x3 matrix from the minor of the given 4x4 …\nCreates a 3x3 matrix from the minor of the given 4x4 …\nCreates an affine transform from the given <code>rotation</code> …\nCreates a 3D rotation matrix from the given quaternion.\nCreates a 3D rotation matrix from the given quaternion.\nCreates an affine transformation matrix from the given …\nGets the minimal rotation for transforming <code>from</code> to <code>to</code>.  …\nGets the minimal rotation for transforming <code>from</code> to <code>to</code>.  …\nGets the minimal rotation for transforming <code>from</code> to either …\nCreates an affine transform from the given 3D <code>rotation</code> and …\nCreates an affine transformation matrix from the given 3D …\nCreates an affine transform containing a 3D rotation …\nCreates a 3D rotation matrix from <code>angle</code> (in radians) …\nCreates a 3D rotation matrix from <code>angle</code> (in radians) …\nCreates an affine transformation matrix containing a 3D …\nCreates a quaternion from the <code>angle</code> (in radians) around …\nCreates an affine transform containing a 3D rotation …\nCreates a 3D rotation matrix from <code>angle</code> (in radians) …\nCreates a 3D rotation matrix from <code>angle</code> (in radians) …\nCreates an affine transformation matrix containing a 3D …\nCreates a quaternion from the <code>angle</code> (in radians) around …\nCreates an affine transform containing a 3D rotation …\nCreates a 3D rotation matrix from <code>angle</code> (in radians) …\nCreates a 3D rotation matrix from <code>angle</code> (in radians) …\nCreates an affine transformation matrix containing a 3D …\nCreates a quaternion from the <code>angle</code> (in radians) around …\nCreates an affine transform that changes scale. Note that …\nCreates an affine transform that changes scale. Note that …\nCreates an affine transformation matrix from the given …\nCreates an affine transformation matrix from the given …\nCreates an affine transformation matrix containing the …\nCreates a 2x2 matrix containing the combining non-uniform …\nCreates an affine transform from the given 2D <code>scale</code>, …\nCreates an affine transformation matrix from the given 2D …\nCreates an affine transformation matrix from the given 2D …\nCreates an affine transform from the given 3D <code>scale</code>, …\nCreates an affine transformation matrix from the given 3D …\nCreate a quaternion that rotates <code>v.length()</code> radians around …\nCreates a vector from the first 2 values in <code>slice</code>.\nCreates a vector from the first 3 values in <code>slice</code>.\nCreates a rotation quaternion from a slice.\nCreates a vector from the first 3 values in <code>slice</code>.\nCreates a vector from the first 4 values in <code>slice</code>.\nCreates an affine transformation from the given 2D …\nCreates an affine transformation from the given 3D …\nCreates an affine transformation matrix from the given 2D …\nCreates an affine transformation matrix from the given 2D …\nCreates an affine transformation matrix from the given 3D …\nCreates a new rotation quaternion from a 4D vector.\nCreates a <code>Vec3A</code> from the <code>x</code>, <code>y</code> and <code>z</code> elements of <code>self</code> …\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates a new rotation quaternion.\nPerforms a slerp to smoothly interpolate between …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturn the inverse of this transform.\nReturn the inverse of this transform.\nReturns the inverse of <code>self</code>.\nReturns the inverse of <code>self</code>.\nReturns the inverse of <code>self</code>.\nReturns the inverse of <code>self</code>.\nReturns the inverse of a normalized quaternion.\nReturns <code>true</code> if, and only if, all elements are finite.\nReturns <code>true</code> if, and only if, all elements are finite.\nReturns <code>true</code> if, and only if, all elements are finite. If …\nReturns <code>true</code> if, and only if, all elements are finite.  If …\nReturns <code>true</code> if, and only if, all elements are finite.  If …\nReturns <code>true</code> if, and only if, all elements are finite. If …\nReturns <code>true</code> if, and only if, all elements are finite. If …\nReturns <code>true</code> if, and only if, all elements are finite. If …\nReturns <code>true</code> if, and only if, all elements are finite. If …\nReturns <code>true</code> if, and only if, all elements are finite.  If …\nReturns <code>true</code> if, and only if, all elements are finite.  If …\nPerforms <code>is_finite</code> on each element of self, returning a …\nPerforms <code>is_finite</code> on each element of self, returning a …\nPerforms <code>is_finite</code> on each element of self, returning a …\nPerforms <code>is_finite</code> on each element of self, returning a …\nReturns <code>true</code> if any elements are <code>NaN</code>.\nReturns <code>true</code> if any elements are <code>NaN</code>.\nReturns <code>true</code> if any elements are <code>NaN</code>.\nReturns <code>true</code> if any elements are <code>NaN</code>.\nReturns <code>true</code> if any elements are <code>NaN</code>.\nReturns <code>true</code> if any elements are <code>NaN</code>.\nReturns <code>true</code> if any elements are <code>NaN</code>.\nReturns <code>true</code> if any elements are <code>NaN</code>.\nReturns <code>true</code> if any elements are <code>NAN</code>.\nReturns <code>true</code> if any elements are <code>NaN</code>.\nReturns <code>true</code> if any elements are <code>NaN</code>.\nPerforms <code>is_nan</code> on each element of self, returning a …\nPerforms <code>is_nan</code> on each element of self, returning a …\nPerforms <code>is_nan</code> on each element of self, returning a …\nPerforms <code>is_nan</code> on each element of self, returning a …\nReturns a bitmask with the lowest 2 bits set to the sign …\nReturns a bitmask with the lowest 3 bits set to the sign …\nReturns a bitmask with the lowest 3 bits set to the sign …\nReturns a bitmask with the lowest 4 bits set to the sign …\nReturns whether <code>self</code> is length <code>1.0</code> or not.\nReturns whether <code>self</code> is length <code>1.0</code> or not.\nReturns whether <code>self</code> of length <code>1.0</code> or not.\nReturns whether <code>self</code> is length <code>1.0</code> or not.\nReturns whether <code>self</code> is length <code>1.0</code> or not.\nComputes the length of <code>self</code>.\nComputes the length of <code>self</code>.\nComputes the length of <code>self</code>.\nComputes the length of <code>self</code>.\nComputes the length of <code>self</code>.\nComputes <code>1.0 / length()</code>.\nComputes <code>1.0 / length()</code>.\nComputes <code>1.0 / length()</code>.\nComputes <code>1.0 / length()</code>.\nComputes <code>1.0 / length()</code>.\nComputes the squared length of <code>self</code>.\nComputes the squared length of <code>self</code>.\nComputes the squared length of <code>self</code>.\nComputes the squared length of <code>self</code>.\nComputes the squared length of <code>self</code>.\nPerforms a linear interpolation between <code>self</code> and <code>rhs</code> based …\nPerforms a linear interpolation between <code>self</code> and <code>rhs</code> based …\nPerforms a linear interpolation between <code>self</code> and <code>rhs</code> based …\nPerforms a linear interpolation between <code>self</code> and <code>rhs</code> based …\nPerforms a linear interpolation between <code>self</code> and <code>rhs</code> based …\nCreates a left-handed view transform using a camera …\nCreates a left-handed view matrix using a camera position, …\nCreates a right-handed view transform using a camera …\nCreates a right-handed view matrix using a camera …\nCreates a left-handed view transform using a camera …\nCreates a left-handed view matrix using a camera position, …\nCreates a right-handed view transform using a camera …\nCreates a right-handed view matrix using a camera …\nReturns a vector containing each element of <code>self</code> modified …\nReturns a vector containing each element of <code>self</code> modified …\nReturns a vector containing each element of <code>self</code> modified …\nReturns a vector containing each element of <code>self</code> modified …\nCreates a 2x2 matrix from two column vectors.\nCreates a 3x3 matrix from three column vectors.\nCreates a 3x3 matrix from three column vectors.\nCreates a 4x4 matrix from four column vectors.\nReturns a vector containing the maximum values for each …\nReturns a vector containing the maximum values for each …\nReturns a vector containing the maximum values for each …\nReturns a vector containing the maximum values for each …\nReturns the horizontal maximum of <code>self</code>.\nReturns the horizontal maximum of <code>self</code>.\nReturns the horizontal maximum of <code>self</code>.\nReturns the horizontal maximum of <code>self</code>.\nCalculates the midpoint between <code>self</code> and <code>rhs</code>.\nCalculates the midpoint between <code>self</code> and <code>rhs</code>.\nCalculates the midpoint between <code>self</code> and <code>rhs</code>.\nCalculates the midpoint between <code>self</code> and <code>rhs</code>.\nReturns a vector containing the minimum values for each …\nReturns a vector containing the minimum values for each …\nReturns a vector containing the minimum values for each …\nReturns a vector containing the minimum values for each …\nReturns the horizontal minimum of <code>self</code>.\nReturns the horizontal minimum of <code>self</code>.\nReturns the horizontal minimum of <code>self</code>.\nReturns the horizontal minimum of <code>self</code>.\nMoves towards <code>rhs</code> based on the value <code>d</code>.\nMoves towards <code>rhs</code> based on the value <code>d</code>.\nMoves towards <code>rhs</code> based on the value <code>d</code>.\nMoves towards <code>rhs</code> based on the value <code>d</code>.\nRotates the <code>Dir3</code> using a <code>Quat</code>.\nRotates the <code>Dir3A</code> using a <code>Quat</code>.\nMultiplies a quaternion and a 3D vector, returning the …\nMultiplies two quaternions. If they each represent a …\nMultiplies a quaternion by a scalar value.\nFused multiply-add. Computes <code>(self * a) + b</code> element-wise …\nFused multiply-add. Computes <code>(self * a) + b</code> element-wise …\nFused multiply-add. Computes <code>(self * a) + b</code> element-wise …\nFused multiply-add. Computes <code>(self * a) + b</code> element-wise …\nMultiplies two quaternions. If they each represent a …\nMultiplies two 2x2 matrices.\nMultiplies two 3x3 matrices.\nMultiplies two 3x3 matrices.\nMultiplies two 4x4 matrices.\nMultiplies two quaternions. If they each represent a …\nMultiplies a 3x3 matrix by a scalar.\nMultiplies a 2x2 matrix by a scalar.\nMultiplies a 3x3 matrix by a scalar.\nMultiplies a 4x4 matrix by a scalar.\nTransforms a 2D vector.\nTransforms a 3D vector.\nTransforms a 3D vector.\nMultiplies a quaternion and a 3D vector, returning the …\nTransforms a <code>Vec3A</code>.\nTransforms a <code>Vec3A</code>.\nMultiplies a quaternion and a 3D vector, returning the …\nTransforms a 4D vector.\nCreates a new vector.\nCreates a new vector.\nCreates a new vector.\nCreates a new vector.\nReturns <code>self</code> normalized to length 1.0.\nReturns <code>self</code> normalized to length 1.0.\nReturns <code>self</code> normalized to length 1.0.\nReturns <code>self</code> normalized to length 1.0.\nReturns <code>self</code> normalized to length 1.0.\nReturns <code>self</code> normalized to length 1.0 if possible, else …\nReturns <code>self</code> normalized to length 1.0 if possible, else …\nReturns <code>self</code> normalized to length 1.0 if possible, else …\nReturns <code>self</code> normalized to length 1.0 if possible, else …\nReturns <code>self</code> normalized to length 1.0 if possible, else …\nReturns <code>self</code> normalized to length 1.0 if possible, else …\nReturns <code>self</code> normalized to length 1.0 if possible, else …\nReturns <code>self</code> normalized to length 1.0 if possible, else …\nCreates a left-handed orthographic projection matrix with …\nCreates a right-handed orthographic projection matrix with …\nCreates a right-handed orthographic projection matrix with …\nReturns a vector that is equal to <code>self</code> rotated by 90 …\nThe perpendicular dot product of <code>self</code> and <code>rhs</code>. Also known …\nCreates an infinite left-handed perspective projection …\nCreates an infinite reverse left-handed perspective …\nCreates an infinite reverse right-handed perspective …\nCreates an infinite right-handed perspective projection …\nCreates a left-handed perspective projection matrix with …\nCreates a right-handed perspective projection matrix with …\nCreates a right-handed perspective projection matrix with …\nReturns a vector containing each element of <code>self</code> raised to …\nReturns a vector containing each element of <code>self</code> raised to …\nReturns a vector containing each element of <code>self</code> raised to …\nReturns a vector containing each element of <code>self</code> raised to …\nReturns the vector projection of <code>self</code> onto <code>rhs</code>.\nReturns the vector projection of <code>self</code> onto <code>rhs</code>.\nReturns the vector projection of <code>self</code> onto <code>rhs</code>.\nReturns the vector projection of <code>self</code> onto <code>rhs</code>.\nReturns the vector projection of <code>self</code> onto <code>rhs</code>.\nReturns the vector projection of <code>self</code> onto <code>rhs</code>.\nReturns the vector projection of <code>self</code> onto <code>rhs</code>.\nReturns the vector projection of <code>self</code> onto <code>rhs</code>.\nTransforms the given 3D vector as a point, applying …\nTransforms the given <code>Vec3A</code> as a 3D point, applying …\nCreates a quaternion from <code>x</code>, <code>y</code>, <code>z</code> and <code>w</code> values.\nReturns a vector containing the reciprocal <code>1.0/n</code> of each …\nReturns a vector containing the reciprocal <code>1.0/n</code> of each …\nReturns a vector containing the reciprocal <code>1.0/n</code> of each …\nReturns a vector containing the reciprocal <code>1.0/n</code> of each …\nReturns the reflection vector for a given incident vector …\nReturns the reflection vector for a given incident vector …\nReturns the reflection vector for a given incident vector …\nReturns the reflection vector for a given incident vector …\nReturns the refraction direction for a given incident …\nReturns the refraction direction for a given incident …\nReturns the refraction direction for a given incident …\nReturns the refraction direction for a given incident …\nReturns the vector rejection of <code>self</code> from <code>rhs</code>.\nReturns the vector rejection of <code>self</code> from <code>rhs</code>.\nReturns the vector rejection of <code>self</code> from <code>rhs</code>.\nReturns the vector rejection of <code>self</code> from <code>rhs</code>.\nReturns the vector rejection of <code>self</code> from <code>rhs</code>.\nReturns the vector rejection of <code>self</code> from <code>rhs</code>.\nReturns the vector rejection of <code>self</code> from <code>rhs</code>.\nReturns the vector rejection of <code>self</code> from <code>rhs</code>.\nReturns the element-wise remainder of Euclidean division …\nReturns the element-wise remainder of Euclidean division …\nReturns the element-wise remainder of Euclidean division …\nReturns the element-wise remainder of Euclidean division …\nReturns <code>rhs</code> rotated by the angle of <code>self</code>. If <code>self</code> is …\nRotates towards <code>rhs</code> up to <code>max_angle</code> (in radians).\nRotates towards <code>rhs</code> up to <code>max_angle</code> (in radians).\nReturns a vector containing the nearest integer to a …\nReturns a vector containing the nearest integer to a …\nReturns a vector containing the nearest integer to a …\nReturns a vector containing the nearest integer to a …\nReturns the matrix row for the given <code>index</code>.\nReturns the matrix row for the given <code>index</code>.\nReturns the matrix row for the given <code>index</code>.\nReturns the matrix row for the given <code>index</code>.\nCreates a vector from the elements in <code>if_true</code> and <code>if_false</code>…\nCreates a vector from the elements in <code>if_true</code> and <code>if_false</code>…\nCreates a vector from the elements in <code>if_true</code> and <code>if_false</code>…\nCreates a vector from the elements in <code>if_true</code> and <code>if_false</code>…\nReturns a vector with elements representing the sign of …\nReturns a vector with elements representing the sign of …\nReturns a vector with elements representing the sign of …\nReturns a vector with elements representing the sign of …\nPerforms a spherical linear interpolation between <code>self</code> and …\nCreates a vector with all elements set to <code>v</code>.\nCreates a vector with all elements set to <code>v</code>.\nCreates a vector with all elements set to <code>v</code>.\nCreates a vector with all elements set to <code>v</code>.\nSubtracts the <code>rhs</code> quaternion from <code>self</code>.\nSubtracts two 2x2 matrices.\nSubtracts two 3x3 matrices.\nSubtracts two 3x3 matrices.\nSubtracts two 4x4 matrices.\nReturns the angle (in radians) of this vector in the range …\n<code>[x, y]</code>\n<code>[x, y, z]</code>\n<code>[x, y, z, w]</code>\n<code>[x, y, z]</code>\n<code>[x, y, z, w]</code>\nReturns the rotation axis (normalized) and angle (in …\nCreates a <code>[f32; 6]</code> array storing data in column major …\nCreates a <code>[f32; 12]</code> array storing data in column major …\nCreates a <code>[f32; 9]</code> array storing data in column major …\nCreates a <code>[f32; 4]</code> array storing data in column major …\nCreates a <code>[f32; 9]</code> array storing data in column major …\nCreates a <code>[f32; 16]</code> array storing data in column major …\nCreates a <code>[[f32; 2]; 3]</code> 2D array storing data in column …\nCreates a <code>[[f32; 3]; 4]</code> 3D array storing data in column …\nCreates a <code>[[f32; 3]; 3]</code> 3D array storing data in column …\nCreates a <code>[[f32; 2]; 2]</code> 2D array storing data in column …\nCreates a <code>[[f32; 3]; 3]</code> 3D array storing data in column …\nCreates a <code>[[f32; 4]; 4]</code> 4D array storing data in column …\nExtract Euler angles with the given Euler rotation order.\nExtract Euler angles with the given Euler rotation order.\nExtract Euler angles with the given Euler rotation order.\nReturns the rotation angles for the given euler rotation …\nExtracts <code>scale</code>, <code>angle</code> and <code>translation</code> from <code>self</code>.\nExtracts <code>scale</code>, <code>rotation</code> and <code>translation</code> from <code>self</code>.\nExtracts <code>scale</code>, <code>rotation</code> and <code>translation</code> from <code>self</code>. The …\nReturns the rotation axis scaled by the rotation in …\nTransforms the given 2D point, applying shear, scale, …\nTransforms the given 2D vector as a point.\nTransforms the given 2D vector as a point.\nTransforms the given 3D points, applying shear, scale, …\nTransforms the given 3D vector as a point.\nTransforms the given <code>Vec3A</code>, applying shear, scale, …\nTransforms the given <code>Vec3A</code> as 3D point.\nTransforms the given 2D vector, applying shear, scale and …\nRotates the given 2D vector.\nRotates the given 2D vector.\nTransforms the given 3D vector, applying shear, scale and …\nTransforms the give 3D vector as a direction.\nTransforms the given <code>Vec3A</code>, applying shear, scale and …\nTransforms the give <code>Vec3A</code> as 3D vector.\nReturns the transpose of <code>self</code>.\nReturns the transpose of <code>self</code>.\nReturns the transpose of <code>self</code>.\nReturns the transpose of <code>self</code>.\nReturns a vector containing the integer part each element …\nReturns a vector containing the integer part each element …\nReturns a vector containing the integer part each element …\nReturns a vector containing the integer part each element …\nCreates a 2D vector from the <code>x</code> and <code>y</code> elements of <code>self</code>, …\nCreates a 2D vector from the <code>x</code> and <code>y</code> elements of <code>self</code>, …\nCreates a 3D vector from the <code>x</code>, <code>y</code> and <code>z</code> elements of <code>self</code>, …\nReturns <code>self</code> normalized to length 1.0 if possible, else …\nReturns <code>self</code> normalized to length 1.0 if possible, else …\nReturns <code>self</code> normalized to length 1.0 if possible, else …\nReturns <code>self</code> normalized to length 1.0 if possible, else …\nCreates a 2-dimensional vector.\nCreates a 3-dimensional vector.\nCreates a 3-dimensional vector.\nCreates a 4-dimensional vector.\nCreates a 4D vector from <code>self</code> with the given value of <code>w</code>.\nCreates a 2D vector from <code>self</code> with the given value of <code>x</code>.\nCreates a 3D vector from <code>self</code> with the given value of <code>x</code>.\nCreates a 3D vector from <code>self</code> with the given value of <code>x</code>.\nCreates a 4D vector from <code>self</code> with the given value of <code>x</code>.\nCreates a 2D vector from <code>self</code> with the given value of <code>y</code>.\nCreates a 3D vector from <code>self</code> with the given value of <code>y</code>.\nCreates a 3D vector from <code>self</code> with the given value of <code>y</code>.\nCreates a 4D vector from <code>self</code> with the given value of <code>y</code>.\nCreates a 3D vector from <code>self</code> with the given value of <code>z</code>.\nCreates a 3D vector from <code>self</code> with the given value of <code>z</code>.\nCreates a 4D vector from <code>self</code> with the given value of <code>z</code>.\nWrites the columns of <code>self</code> to the first 6 elements in <code>slice</code>…\nWrites the columns of <code>self</code> to the first 12 elements in …\nWrites the columns of <code>self</code> to the first 9 elements in <code>slice</code>…\nWrites the columns of <code>self</code> to the first 4 elements in <code>slice</code>…\nWrites the columns of <code>self</code> to the first 9 elements in <code>slice</code>…\nWrites the columns of <code>self</code> to the first 16 elements in …\nWrites the elements of <code>self</code> to the first 2 elements in …\nWrites the elements of <code>self</code> to the first 3 elements in …\nWrites the quaternion to an unaligned slice.\nWrites the elements of <code>self</code> to the first 3 elements in …\nWrites the elements of <code>self</code> to the first 4 elements in …\nReturns the vector part of the quaternion.\nA 2D affine transform, which can represent translation, …\nA 3D affine transform, which can represent translation, …\nA 2x2 column major matrix.\nA 3x3 column major matrix.\nA 4x4 column major matrix.\nA quaternion representing an orientation.\nA 2-dimensional vector.\nA 3-dimensional vector.\nA 4-dimensional vector.\nCreates a 2x2 matrix from two column vectors.\nCreates a 3x3 matrix from three column vectors.\nCreates a 4x4 matrix from four column vectors.\nCreates a quaternion from <code>x</code>, <code>y</code>, <code>z</code> and <code>w</code> values.\nCreates a 2-dimensional vector.\nCreates a 3-dimensional vector.\nCreates a 4-dimensional vector.\nA 2-dimensional vector.\nA 3-dimensional vector.\nA 4-dimensional vector.\nCreates a 2-dimensional vector.\nCreates a 3-dimensional vector.\nCreates a 4-dimensional vector.\nThe unit axes.\nThe unit axes.\nThe unit axes.\nA 2-dimensional vector.\nA 3-dimensional vector.\nA 4-dimensional vector.\nAll <code>i32::MAX</code>.\nAll <code>i32::MAX</code>.\nAll <code>i32::MAX</code>.\nAll <code>i32::MIN</code>.\nAll <code>i32::MIN</code>.\nAll <code>i32::MIN</code>.\nAll negative ones.\nAll negative ones.\nAll negative ones.\nA unit vector pointing along the negative W axis.\nA unit vector pointing along the negative X axis.\nA unit vector pointing along the negative X axis.\nA unit vector pointing along the negative X axis.\nA unit vector pointing along the negative Y axis.\nA unit vector pointing along the negative Y axis.\nA unit vector pointing along the negative Y axis.\nA unit vector pointing along the negative Z axis.\nA unit vector pointing along the negative Z axis.\nAll ones.\nAll ones.\nAll ones.\nA unit vector pointing along the positive W axis.\nA unit vector pointing along the positive X axis.\nA unit vector pointing along the positive X axis.\nA unit vector pointing along the positive X axis.\nA unit vector pointing along the positive Y axis.\nA unit vector pointing along the positive Y axis.\nA unit vector pointing along the positive Y axis.\nA unit vector pointing along the positive Z axis.\nA unit vector pointing along the positive Z axis.\nAll zeroes.\nAll zeroes.\nAll zeroes.\nReturns a vector containing the absolute value of each …\nReturns a vector containing the absolute value of each …\nReturns a vector containing the absolute value of each …\nCasts all elements of <code>self</code> to <code>f64</code>.\nCasts all elements of <code>self</code> to <code>f64</code>.\nCasts all elements of <code>self</code> to <code>f64</code>.\nCasts all elements of <code>self</code> to <code>i16</code>.\nCasts all elements of <code>self</code> to <code>i16</code>.\nCasts all elements of <code>self</code> to <code>i16</code>.\nCasts all elements of <code>self</code> to <code>i64</code>.\nCasts all elements of <code>self</code> to <code>i64</code>.\nCasts all elements of <code>self</code> to <code>i64</code>.\nCasts all elements of <code>self</code> to <code>i8</code>.\nCasts all elements of <code>self</code> to <code>i8</code>.\nCasts all elements of <code>self</code> to <code>i8</code>.\nCasts all elements of <code>self</code> to <code>u16</code>.\nCasts all elements of <code>self</code> to <code>u16</code>.\nCasts all elements of <code>self</code> to <code>u16</code>.\nCasts all elements of <code>self</code> to <code>u64</code>.\nCasts all elements of <code>self</code> to <code>u64</code>.\nCasts all elements of <code>self</code> to <code>u64</code>.\nCasts all elements of <code>self</code> to <code>u8</code>.\nCasts all elements of <code>self</code> to <code>u8</code>.\nCasts all elements of <code>self</code> to <code>u8</code>.\nCasts all elements of <code>self</code> to <code>u32</code>.\nCasts all elements of <code>self</code> to <code>u32</code>.\nCasts all elements of <code>self</code> to <code>u32</code>.\nCasts all elements of <code>self</code> to <code>f32</code>.\nCasts all elements of <code>self</code> to <code>f32</code>.\nCasts all elements of <code>self</code> to <code>f32</code>.\nCasts all elements of <code>self</code> to <code>f32</code>.\nComponent-wise clamping of values, similar to <code>i32::clamp</code>.\nComponent-wise clamping of values, similar to <code>i32::clamp</code>.\nComponent-wise clamping of values, similar to <code>i32::clamp</code>.\nReturns a vector mask containing the result of a <code>==</code> …\nReturns a vector mask containing the result of a <code>==</code> …\nReturns a vector mask containing the result of a <code>==</code> …\nReturns a vector mask containing the result of a <code>&gt;=</code> …\nReturns a vector mask containing the result of a <code>&gt;=</code> …\nReturns a vector mask containing the result of a <code>&gt;=</code> …\nReturns a vector mask containing the result of a <code>&gt;</code> …\nReturns a vector mask containing the result of a <code>&gt;</code> …\nReturns a vector mask containing the result of a <code>&gt;</code> …\nReturns a vector mask containing the result of a <code>&lt;=</code> …\nReturns a vector mask containing the result of a <code>&lt;=</code> …\nReturns a vector mask containing the result of a <code>&lt;=</code> …\nReturns a vector mask containing the result of a <code>&lt;</code> …\nReturns a vector mask containing the result of a <code>&lt;</code> …\nReturns a vector mask containing the result of a <code>&lt;</code> …\nReturns a vector mask containing the result of a <code>!=</code> …\nReturns a vector mask containing the result of a <code>!=</code> …\nReturns a vector mask containing the result of a <code>!=</code> …\nComputes the cross product of <code>self</code> and <code>rhs</code>.\nCompute the squared euclidean distance between two points …\nCompute the squared euclidean distance between two points …\nCompute the squared euclidean distance between two points …\nReturns the element-wise quotient of [Euclidean division] …\nReturns the element-wise quotient of [Euclidean division] …\nReturns the element-wise quotient of [Euclidean division] …\nComputes the dot product of <code>self</code> and <code>rhs</code>.\nComputes the dot product of <code>self</code> and <code>rhs</code>.\nComputes the dot product of <code>self</code> and <code>rhs</code>.\nReturns a vector where every component is the dot product …\nReturns a vector where every component is the dot product …\nReturns a vector where every component is the dot product …\nReturns the product of all elements of <code>self</code>.\nReturns the product of all elements of <code>self</code>.\nReturns the product of all elements of <code>self</code>.\nReturns the sum of all elements of <code>self</code>.\nReturns the sum of all elements of <code>self</code>.\nReturns the sum of all elements of <code>self</code>.\nCreates a 3D vector from <code>self</code> and the given <code>z</code> value.\nCreates a 4D vector from <code>self</code> and the given <code>w</code> value.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a new vector from an array.\nCreates a new vector from an array.\nCreates a new vector from an array.\nCreates a vector from the first 2 values in <code>slice</code>.\nCreates a vector from the first 3 values in <code>slice</code>.\nCreates a vector from the first 4 values in <code>slice</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns a bitmask with the lowest 2 bits set to the sign …\nReturns a bitmask with the lowest 3 bits set to the sign …\nReturns a bitmask with the lowest 4 bits set to the sign …\nCreates a 2-dimensional vector.\nCreates a 3-dimensional vector.\nCreates a 4-dimensional vector.\nComputes the squared length of <code>self</code>.\nComputes the squared length of <code>self</code>.\nComputes the squared length of <code>self</code>.\nReturns a vector containing each element of <code>self</code> modified …\nReturns a vector containing each element of <code>self</code> modified …\nReturns a vector containing each element of <code>self</code> modified …\nReturns a vector containing the maximum values for each …\nReturns a vector containing the maximum values for each …\nReturns a vector containing the maximum values for each …\nReturns the horizontal maximum of <code>self</code>.\nReturns the horizontal maximum of <code>self</code>.\nReturns the horizontal maximum of <code>self</code>.\nReturns a vector containing the minimum values for each …\nReturns a vector containing the minimum values for each …\nReturns a vector containing the minimum values for each …\nReturns the horizontal minimum of <code>self</code>.\nReturns the horizontal minimum of <code>self</code>.\nReturns the horizontal minimum of <code>self</code>.\nCreates a new vector.\nCreates a new vector.\nCreates a new vector.\nReturns a vector that is equal to <code>self</code> rotated by 90 …\nThe perpendicular dot product of <code>self</code> and <code>rhs</code>. Also known …\nReturns the element-wise remainder of Euclidean division …\nReturns the element-wise remainder of Euclidean division …\nReturns the element-wise remainder of Euclidean division …\nReturns <code>rhs</code> rotated by the angle of <code>self</code>. If <code>self</code> is …\nReturns a vector containing the saturating addition of <code>self</code>…\nReturns a vector containing the saturating addition of <code>self</code>…\nReturns a vector containing the saturating addition of <code>self</code>…\nIn other words this computes …\nIn other words this computes …\nIn other words this computes …\nReturns a vector containing the saturating division of <code>self</code>…\nReturns a vector containing the saturating division of <code>self</code>…\nReturns a vector containing the saturating division of <code>self</code>…\nReturns a vector containing the saturating multiplication …\nReturns a vector containing the saturating multiplication …\nReturns a vector containing the saturating multiplication …\nReturns a vector containing the saturating subtraction of …\nReturns a vector containing the saturating subtraction of …\nReturns a vector containing the saturating subtraction of …\nReturns a vector containing the saturating subtraction of …")